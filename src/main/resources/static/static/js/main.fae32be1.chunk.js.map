{"version":3,"sources":["components/TruncBox.js","ordonnance/ArborescenceComponent.js","ordonnance/ArborescenceService.js","redux/OrdonnanceActions.js","ordonnance/FicheDouleurComponent.js","ordonnance/FicheDouleurService.js","redux/reduxFormAdapter.js","ordonnance/PrescriptionObj.js","ordonnance/PrescriptionForm.js","ordonnance/PrescriptionService.js","ordonnance/OrdonnanceForm.js","ordonnance/OrdonnanceService.js","config/URLs-conf.js","redux/reducers.js","redux/store.js","components/MenuBar.js","components/Accueil.jsx","index.jsx","App.jsx"],"names":["TruncBox","props","className","children","width","height","moreText","lessText","rest","Object","objectWithoutProperties","style","react_default","a","createElement","concat","truncated","onClick","e","target","previousSibling","Fragment","assign","Arborescence","handleClickDouleur","buttonStyle","float","maxWidth","marginTop","marginBottom","marginRight","Entree","_ref","data","libelle","infosGenerales","idDouleur","retour","title","content","Button","components_TruncBox","Accordion","styled","panels","Branche","_ref2","nomenclaturesEnfants","Array","isArray","entreesAffichables","map","nomenclature","titre","id","length","_ref3","nomenclatures","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","goToRoute","routes","FICHE_DOULEUR","bind","assertThisInitialized","_setArborescence","apply","arguments","setArborescence","Message","info","ArborescenceComponent_Arborescence","Component","connect","appState","ordonnance","dataTypes","ARBORESCENCE","FicheDouleurComponent","prescriptions","prescriptionChoisie","clickOrdonnance","douleur","nomenclatureDouleur","infos","recommandations","nbPreco","messageInfo","warning","messageRecommandation","Divider_Divider","horizontal","fitted","Header","as","renderPrescription","prescription","medicamentsPreconises","preconisation","description","split","ligne","react","index","Label","FicheDouleur","clickPrescription","dispatchData","PRESCRIPTION_CHOISIE","FORMULAIRE_PRESCRIPTION","_x","_setPreconisations","setPreconisations","getRouteParams","match","params","PRESCRIPTIONS","renderRadio","field","Form","Radio","checked","input","value","radioValue","label","name","onChange","renderSelect","Select","options","placeholder","renderTextArea","TextArea","Prescription","ordonnancePreconisee","nbMedicaments","getProduits","numMedicament","compatibilites","compatibilite","produit","getDesignationsProduits","produits","designation","PrescriptionForm","recapPrescription","medicaments","libellesMedicaments","medicament","join","_this2","size","onSubmit","prescriptionSaisie","formulaireMedicament","Field","component","formAdapter","Group","inline","type","primary","reset","padding","Grid","container","spacing","numProduit","item","xs","Input","required","key","text","_this3","dosagesProduits","dosage","autresChamps","prescpription","_loop","forEach","champ","React","PrescriptionService","submitPrescription","PRESCRIPTION_SAISIE","body","JSON","stringify","console","log","FORMULAIRE_ORDONNANCE","ordonnance_PrescriptionForm","formValues","recapitulerPrescription","filter","recapDosage","quantite","forme","frequence","duree","reduxForm","form","state","values","OrdonnanceForm","OrdonnanceService","submitOrdonnance","infosPatient","_x2","_setOrdonnanceEmise","setOrdonnanceEmise","OrdonnanceForm_OrdonnanceForm","margin","recapitulerInfosPatient","error","keys","apiURLs","arborescenceDouleurs","ficheDouleur","nouvelleOrdonnance","HISTORIQUE","LIENS","routesConfig","path","ArborescenceService","FicheDouleurService","getRoutePath","route","pathParams","generatePath","element","config","history","push","ORDONNANCE_EMISE","_callee3","result","regenerator_default","wrap","_context3","prev","next","getResultFromUrl","urls","sent","stop","_callee4","_context4","_callee5","file","fileURL","_context5","postObjectToUrl","responseType","Blob","URL","createObjectURL","window","open","asyncToGenerator","mark","_callee","url","_context","axios","get","then","response","abrupt","t0","_x3","_x4","_callee2","object","_context2","post","status","_x5","_x6","_x7","combineReducers","undefined","action","objectSpread","defineProperty","formReducer","store","createStore","reducers","dispatch","MenuBar","BurgerMenu","href","Accueil","actif","setState","message","ReactDOM","render","msgBienvenue","es","react_router_dom","MenuBar_MenuBar","color","textAlign","inverted","dividing","paddingTop","paddingBottom","position","top","left","zIndex","background","minWidth","Segment","react_router","exact","components_Accueil","Divider","document","getElementById"],"mappings":"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","file":"static/js/main.fae32be1.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction TruncBox(props) {\r\n\r\n    const {className, children, width, height, moreText, lessText, ...rest} = props\r\n\r\n    const style = \r\n        <style> {`\r\n            .truncated {\r\n                max-height: ${height ? height + ';':'2rem;'}\r\n                max-width: ${width ? width + ';':'100%;'}\r\n                width: ${width ? width + ';':'100%;'}\r\n                overflow: hidden;\r\n                text-overflow: ellipsis;\r\n            } \r\n            .expand, .trunc {\r\n                width: fit-content;\r\n                margin-left: auto;\r\n                margin-right: auto;\r\n            }\r\n            .expand::after, .trunc::after {\r\n                cursor: pointer;\r\n                color: #718293;\r\n                font-style: italic;\r\n            }\r\n            .expand::after {\r\n                content: '${moreText ? moreText : '\\\\0025BC'}'; \r\n                font-size: ${!moreText ? '1rem' : '.5rem'};\r\n            }         \r\n            .trunc::after {\r\n                content: '${lessText ? lessText : '\\\\0025B2'}';\r\n                font-size: ${!lessText ? '1rem' : '.5rem'};\r\n            }\r\n        `}\r\n        </style>\r\n\r\n    let truncated = true\r\n\r\n    const onClick = e => {\r\n        if (truncated) {\r\n            e.target.className = 'trunc'\r\n            e.target.previousSibling.className = className ? className: ''\r\n            truncated = false\r\n        } else {\r\n            e.target.className = 'expand'\r\n            e.target.previousSibling.className = `${className ? className + ' ' : ''}truncated`\r\n            truncated = true\r\n        }\r\n    }\r\n\r\n    const render = function () {\r\n        return (\r\n            <React.Fragment>\r\n                {style}\r\n                <div className={`${className ? className + ' ' : ''}truncated`} {...rest}>\r\n                    {children}                    \r\n                </div>\r\n                <div onClick={onClick} className='expand'></div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    return render()\r\n}\r\n\r\nexport default TruncBox","import React from 'react'\r\nimport { Accordion, Button } from 'semantic-ui-react'\r\nimport \"./Arborescence.css\";\r\nimport TruncBox from '../components/TruncBox';\r\n\r\nexport default function Arborescence(props) {\r\n\r\n    const { handleClickDouleur } = props\r\n\r\n    const buttonStyle = { float: 'right', maxWidth: '100%', marginTop: '-40px', marginBottom: '5px', marginRight: '2%' }\r\n\r\n    const Entree = function ({ libelle, infosGenerales, idDouleur }) {\r\n        const buildContent = function (data) {\r\n            if (data) {\r\n                return (\r\n                    <React.Fragment>\r\n                        <Button style={buttonStyle} onClick={() => handleClickDouleur(idDouleur)}>\r\n                            Faire l'ordonnance\r\n                        </Button>\r\n                        <TruncBox height='6rem' moreText='▼ ( voir plus ... )' lessText='▲ ( réduire ... )'>\r\n                            <pre className='infosBase'>{data}</pre>\r\n                        </TruncBox>\r\n                    </React.Fragment>\r\n                )\r\n            }\r\n            return \"\";\r\n        }\r\n        const content = buildContent(infosGenerales)\r\n        const retour = [{\r\n            title: libelle,\r\n            content: { content }\r\n        }];\r\n        return (<Accordion styled panels={retour} />)\r\n    }\r\n\r\n    const Branche = function ({ libelle, nomenclaturesEnfants, ...rest }) {\r\n        const retour = [{\r\n            title: libelle,\r\n            content: {}\r\n        }];\r\n        if (nomenclaturesEnfants && Array.isArray(nomenclaturesEnfants)) {\r\n            let entreesAffichables = nomenclaturesEnfants.map(nomenclature => {\r\n                let titre = nomenclature.libelle\r\n                let infosGenerales = nomenclature.infosGenerales;\r\n                let idDouleur = nomenclature.id;\r\n                if (nomenclature.nomenclaturesEnfants && nomenclature.nomenclaturesEnfants.length > 0) {\r\n                    return <Branche libelle={titre} nomenclaturesEnfants={nomenclature.nomenclaturesEnfants} {...rest} />;\r\n                }\r\n                else {\r\n                    return <Entree libelle={titre} infosGenerales={infosGenerales} idDouleur={idDouleur} {...rest} />;\r\n                }\r\n            });\r\n            let content = <div>{entreesAffichables}</div>;\r\n            retour[0].content = { content };\r\n        }\r\n        /**\r\n         * FIX : Extraire la function Branche dans une classe avec gestion d'état actif/inactif \r\n         * en fonction du click (handler méthode)\r\n         * pour modifier l'attribut className (mettre une bordure si actif, pas de bordure si inactif)\r\n         */\r\n        return <Accordion styled panels={retour} />;\r\n    }\r\n\r\n    const Arbre = function ({ nomenclatures, ...rest }) {\r\n        return (\r\n            <div>{\r\n                Array.isArray(nomenclatures) && nomenclatures.map(\r\n                    nomenclature => {\r\n                        return <Branche libelle={nomenclature.libelle} nomenclaturesEnfants={nomenclature.nomenclaturesEnfants} {...rest} />;\r\n                    }\r\n                )\r\n            }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Arbre {...props} />\r\n    );\r\n}\r\n","/**\r\n * Ici on prends en compte l'état applicatif.\r\n * La méthode connect() relie le store au composant cible \r\n */\r\nimport { connect } from 'react-redux'\r\nimport { setArborescence, dataTypes } from \"../redux/OrdonnanceActions\";\r\nimport ArborescenceComponent from \"./ArborescenceComponent\";\r\nimport React, { Component } from 'react'\r\nimport { Message } from 'semantic-ui-react';\r\nimport { routes, goToRoute } from '../config/URLs-conf';\r\n\r\nclass Arborescence extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.handleClickDouleur.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        setArborescence()\r\n    }\r\n\r\n    handleClickDouleur = (idDouleur) => {\r\n        goToRoute(this.props)(routes.FICHE_DOULEUR, {idDouleur})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Message info>Choisissez le type de douleur concernée dans l'arborescence ci-dessous</Message>\r\n                <ArborescenceComponent {...this.props} handleClickDouleur={this.handleClickDouleur}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n/**\r\n * La fonction mapStateToProps renvoie un objet résultant du state. \r\n * L'objet renvoyé est passé en props du composant connecté\r\n */\r\nconst mapStateToProps = appState => ({\r\n    nomenclatures: appState.ordonnance[dataTypes.ARBORESCENCE]\r\n})\r\n/**\r\n * La méthode connect() relie le store au composant cible.\r\n * Elle prend en paramètres \r\n * - la fonction \"mapStateToProps\" à laquelle le state du store est passé en paramètre.\r\n */\r\nexport default connect(mapStateToProps)(Arborescence)","import dispatchData from \"./store\";\r\nimport axios from \"axios\";\r\nimport { apiURLs as urls } from \"../config/URLs-conf\";\r\n\r\nexport const dataTypes = {\r\n  ARBORESCENCE: 'ARBORESCENCE',\r\n  PRESCRIPTIONS: 'PRESCRIPTIONS',\r\n  PRESCRIPTION_CHOISIE: 'PRESCRIPTION_CHOISIE',\r\n  PRESCRIPTION_SAISIE: 'PRESCRIPTION_SAISIE',\r\n  ORDONNANCE_EMISE: 'ORDONNANCE_EMISE'\r\n}\r\n\r\nexport async function setArborescence() {\r\n  const result = await getResultFromUrl(urls.arborescenceDouleurs)\r\n  dispatchData(dataTypes.ARBORESCENCE, result);\r\n}\r\n\r\nexport async function setPreconisations(idDouleur) {\r\n  const result = await getResultFromUrl(urls.ficheDouleur(idDouleur))\r\n  dispatchData(dataTypes.PRESCRIPTIONS, result);\r\n}\r\n\r\nexport function setPrescriptionChoisie(prescription) {\r\n  dispatchData(dataTypes.PRESCRIPTION_CHOISIE, prescription);\r\n}\r\n\r\nexport function setPrescriptionSaisie(prescription) {  \r\n  dispatchData(dataTypes.PRESCRIPTION_SAISIE, prescription);\r\n}\r\n\r\nexport async function setOrdonnanceEmise(ordonnance) {\r\n  let result = await postObjectToUrl(ordonnance, urls.nouvelleOrdonnance, {responseType: 'blob'})\r\n  if (result.data) {\r\n    const file = new Blob([result.data], {type: 'application/pdf'})\r\n    const fileURL = URL.createObjectURL(file);\r\n    window.open(fileURL);\r\n    console.log('L\\'ordonnance a bien été enregistrée')\r\n  } else {\r\n    console.error('L\\'ordonnance n\\'a pas pu être correctement enregistrée')\r\n  }\r\n  dispatchData(dataTypes.ORDONNANCE_EMISE, ordonnance)\r\n}\r\n\r\nexport const getResultFromUrl = async (url, config) => {\r\n  try {\r\n    let result\r\n    await axios.get(url, config).then(response => result = response.data)\r\n    return result\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n}\r\n\r\nexport const postObjectToUrl = async (object, url, config) => {\r\n  try {\r\n    let result = {}\r\n    await axios.post(url, object, config).then(response => {\r\n      result.status = response.status\r\n      result.data = response.data\r\n\r\n    })\r\n    return result\r\n  } catch (error) {\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * Reducer pour le thème ordonnance\r\n * @param {*} ordonnance \r\n * @param {*} action \r\n */\r\nexport default function ordonnanceReducer(ordonnance = {}, action) {\r\n\r\n  if (dataTypes[action.type]) {\r\n    return { ...ordonnance, [dataTypes[action.type]]: action.content }\r\n  }\r\n  return ordonnance\r\n\r\n}\r\n\r\n","import React, { Fragment } from 'react'\r\nimport { Message, Label, Divider, Header } from 'semantic-ui-react'\r\n\r\nexport default function FicheDouleurComponent(props) {\r\n\r\n  const { prescriptions, prescriptionChoisie, clickOrdonnance } = props\r\n\r\n  /**\r\n   * Si une prescription a été choisie on n'affiche que celle ci avec un message approprié\r\n   * Sinon on affiche la liste des prescriptions proposées avec possibilité d'en choisir une par clic\r\n   */\r\n\r\n  let douleur = () => {\r\n    let nomenclatureDouleur = null\r\n    if (prescriptionChoisie) {\r\n      nomenclatureDouleur = prescriptionChoisie.nomenclatureDouleur\r\n    } else if (prescriptions && prescriptions.length > 0) {\r\n      nomenclatureDouleur = prescriptions[0].nomenclatureDouleur\r\n    }\r\n    if (nomenclatureDouleur) {\r\n      return {\r\n        libelle: nomenclatureDouleur.libelle,\r\n        infos: nomenclatureDouleur.infosGenerales,\r\n        recommandations: nomenclatureDouleur.recommandations,\r\n      }\r\n    }\r\n    return {}\r\n  }\r\n  douleur = douleur()\r\n\r\n  let nbPreco = prescriptions && prescriptions.length > 0 ? prescriptions.length : 0\r\n\r\n\r\n  let messageInfo = () => {\r\n    if (prescriptionChoisie) {\r\n      return (\r\n        <Message info>Vous avez choisi l'ordonnance suivante</Message>\r\n      )\r\n    }\r\n    return (\r\n      nbPreco === 0 ?\r\n        <Message warning>Aucune ordonnance n'est encore proposée pour cette douleur</Message> :\r\n        <Message info>\r\n          {` ${nbPreco} ordonnance${nbPreco > 1 ? 's vous sont proposées' : ' vous est proposée'} `}\r\n          <br />Cliquez sur l'ordonnance de votre choix\r\n        </Message>\r\n    )\r\n  }\r\n  messageInfo = messageInfo()\r\n\r\n\r\n  let messageRecommandation = (\r\n    !prescriptionChoisie && douleur.recommandations && douleur.recommandations.length > 0 ?\r\n      <Message warning className='infosBase'>\r\n        <Divider horizontal fitted><Header as='h4'>Remarques</Header></Divider>\r\n        {douleur.recommandations}\r\n      </Message> : ''\r\n  )\r\n\r\n  const renderListePrescriptions = () => {\r\n\r\n    if (prescriptionChoisie) {\r\n      return (\r\n        <Fragment>\r\n          {renderPrescription(prescriptionChoisie)}\r\n          <Divider />\r\n        </Fragment>\r\n      )\r\n    }\r\n    else if (nbPreco > 0) {\r\n      return prescriptions.map(\r\n        (prescription, index) => (\r\n          <Fragment>\r\n            <Label as='a' onClick={() => clickOrdonnance(index)}>\r\n              Ordonnance {index + 1}\r\n            </Label>\r\n            {renderPrescription(prescription)}\r\n            <Divider />\r\n          </Fragment>\r\n        )\r\n      )\r\n    }\r\n  }\r\n\r\n\r\n\r\n  const renderPrescription = (prescription) => {\r\n    const formatTexte = description => {\r\n      let lignes = description.split(' ; ')\r\n      return lignes.map(\r\n        ligne => (ligne + '\\r\\n')\r\n      )\r\n    }\r\n    if (prescription.medicamentsPreconises.length > 0) {\r\n      return (\r\n        <div className='infosBase'> {\r\n          prescription.medicamentsPreconises.map(\r\n            preconisation => <p>{formatTexte(preconisation.description)}</p>\r\n          )\r\n        }</div>)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>{douleur.libelle}</h3>\r\n      {messageInfo}         \r\n      {renderListePrescriptions()}\r\n      {messageRecommandation}   \r\n    </div>\r\n  )\r\n}\r\n\r\n","import { connect } from 'react-redux'\r\nimport React, { Component, Fragment } from 'react'\r\n\r\nimport { setPreconisations, setPrescriptionChoisie, dataTypes } from \"../redux/OrdonnanceActions\";\r\nimport FicheDouleurComponent from \"./FicheDouleurComponent\";\r\nimport { goToRoute, routes } from '../config/URLs-conf';\r\n\r\n\r\nclass FicheDouleur extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.clickPrescription.bind(this)\r\n    }    \r\n\r\n    componentDidMount() {\r\n        let { idDouleur } = this.getRouteParams()\r\n        setPreconisations(idDouleur)\r\n    }\r\n\r\n    getRouteParams() {\r\n        if (this.props.match) {\r\n            return this.props.match.params\r\n        }\r\n        return {}\r\n    }\r\n\r\n    clickPrescription = (index) => {\r\n        setPrescriptionChoisie(this.props.prescriptions[index])\r\n        goToRoute(this.props)(routes.FORMULAIRE_PRESCRIPTION)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <FicheDouleurComponent clickOrdonnance={this.clickPrescription} prescriptions={this.props.prescriptions} />               \r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * La fonction mapStateToProps renvoie un objet résultant du state. \r\n * L'objet renvoyé est passé en props du composant connecté\r\n */\r\nconst mapStateToProps = appState => ({\r\n    prescriptions: appState.ordonnance[dataTypes.PRESCRIPTIONS],\r\n})\r\n\r\n/**\r\n * La méthode connect() relie le store au composant cible.\r\n * Elle prend en paramètre la fonction \"mapStateToProps\", laquelle prend elle-même en paramètre le state du store.\r\n */\r\nexport default connect(mapStateToProps)(FicheDouleur)\r\n","import React from \"react\";\r\nimport { Form } from \"semantic-ui-react\";\r\n\r\nexport const renderCheckbox = field => (\r\n  <Form.Checkbox\r\n    checked={!!field.input.value}\r\n    name={field.input.name}\r\n    label={field.label}\r\n    onChange={(e, { checked }) => field.input.onChange(checked)}\r\n  />\r\n);\r\n\r\nexport const renderRadio = field => (\r\n  <Form.Radio\r\n    checked={field.input.value === field.radioValue}\r\n    label={field.label}\r\n    name={field.input.name}\r\n    onChange={(e, { checked }) => field.input.onChange(field.radioValue)}\r\n  />\r\n);\r\n\r\nexport const renderSelect = field => (\r\n  <Form.Select\r\n    label={field.label}\r\n    name={field.input.name}\r\n    onChange={(e, { value }) => field.input.onChange(value)}\r\n    options={field.options}\r\n    placeholder={field.placeholder}\r\n    value={field.input.value}\r\n  />\r\n);\r\n\r\nexport const renderTextArea = field => (\r\n  <Form.TextArea\r\n    {...field.input}\r\n    label={field.label}\r\n    placeholder={field.placeholder}\r\n  />\r\n);","export default function Prescription(ordonnancePreconisee) {\r\n\r\n  // L'ordonnance préconisée est reçue du backend et est un objet de la forme suivante :\r\n  // \t.medicamentsPreconises[]\r\n  // \t\t.description\r\n  // \t\t.dureeMin\r\n  // \t\t.dureeMax\r\n  // \t\t.idDouleur\r\n  // \t\t.numOrdonnance\r\n  // \t\t.numMedicament\r\n  // \t\t.compatibilites[]\r\n  // \t\t\t.produit\r\n  // \t\t\t\t.code\r\n  // \t\t\t\t.designation\r\n  // \t\t\t\t.id\r\n  // \t\t\t\t.indesirable\r\n  // \t\t\t\t.indication\r\n  // \t\t\t.dosages\r\n  // \t\t\t.formes\r\n\r\n  this.medicamentsPreconises = ordonnancePreconisee ? ordonnancePreconisee.medicamentsPreconises : []\r\n\r\n  this.nbMedicaments = this.medicamentsPreconises.length\r\n\r\n  this.getProduits = function(numMedicament) {\r\n    if (this.medicamentsPreconises[numMedicament] && this.medicamentsPreconises[numMedicament].compatibilites) {\r\n      return this.medicamentsPreconises[numMedicament].compatibilites.map(compatibilite => compatibilite.produit)\r\n    }\r\n    return null\r\n  }\r\n\r\n  this.getDesignationsProduits = function(numMedicament) {\r\n    const produits = this.getProduits(numMedicament)\r\n    if (produits) {\r\n      return produits.map(produit => produit.designation)\r\n    }\r\n    return null\r\n  }\r\n\r\n\r\n}","import React from \"react\";\r\nimport { Field } from \"redux-form\";\r\nimport { Form, Message, Header, Divider, Label } from \"semantic-ui-react\";\r\nimport * as formAdapter from \"../redux/reduxFormAdapter\"\r\nimport Prescription from \"./PrescriptionObj\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nclass PrescriptionForm extends React.Component {\r\n\r\n  // On reçoit la prescription préconisée en props. Cet objet est utilisé pour construire la Prescription\r\n  constructor(props) {\r\n\r\n    super(props)\r\n    this.prescriptionChoisie = new Prescription(props.prescription)\r\n    this.recapPrescription = props.recapPrescription\r\n    this.medicaments = this.prescriptionChoisie.medicamentsPreconises\r\n    this.libellesMedicaments = this.medicaments.map(\r\n      (medicament, numMedicament) => this.prescriptionChoisie.getDesignationsProduits(numMedicament).join(' + ')\r\n    )\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Form size='small' onSubmit={() => this.props.onSubmit(this.prescriptionSaisie())}>\r\n\r\n        <Message info>Veuillez renseigner la posologie dans le formulaire ci-dessous</Message>\r\n\r\n        {\r\n          this.prescriptionChoisie && this.prescriptionChoisie.medicamentsPreconises.map(\r\n            (medicament, numMedicament) => this.formulaireMedicament(numMedicament)\r\n          )\r\n        }\r\n\r\n        <Field\r\n          component={formAdapter.renderTextArea}\r\n          label=\"Recommandations\"\r\n          name=\"recommandations\"\r\n          placeholder=\"Conseils, effets indésirables à surveiller, cas d'arrêt du traitement...\"\r\n        />\r\n\r\n        <Message>\r\n          <Divider horizontal fitted><Header as='h5'>Récapitulatif</Header></Divider>\r\n          {this.recapPrescription(this.prescriptionSaisie())}\r\n        </Message>\r\n\r\n        <Form.Group inline>\r\n          <Form.Button type='submit' primary>Valider</Form.Button>\r\n          <Form.Button onClick={this.props.reset}>Annuler</Form.Button>\r\n        </Form.Group>\r\n\r\n      </Form>\r\n    )\r\n  }\r\n\r\n  formulaireMedicament(numMedicament) {\r\n\r\n    return (\r\n\r\n      <React.Fragment>\r\n\r\n        <div style={{ padding: '1rem 0' }}><Label>{this.libellesMedicaments[numMedicament]}</Label></div>\r\n\r\n        <input\r\n          name={'medicament' + numMedicament}\r\n          type='hidden'\r\n          index={numMedicament}\r\n          value={this.libellesMedicaments[numMedicament]}\r\n        />\r\n\r\n        <Grid container spacing={1}>\r\n\r\n          {this.prescriptionChoisie.getProduits(numMedicament).map((produit, numProduit) =>\r\n            <Grid item xs={2}>\r\n              <Field component={Form.Input} label={numProduit === 0 ? 'dosage' : ''} name={'dosage' + numMedicament + numProduit} placeholder={produit.designation} required />\r\n            </Grid>\r\n          )}\r\n\r\n          <Grid item xs={4}>\r\n            <Field component={Form.Input} label=\"Quantité / prise\" name={'quantite' + numMedicament} placeholder=\"Nb comprimés\" required />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <Field component={formAdapter.renderSelect} label=\"Forme\" name={'forme' + numMedicament} placeholder=\"Comprimé ...\"\r\n              options={[\r\n                { key: \"forme1\", text: \"Comprimé\", value: \"comprimé(s)\" },\r\n                { key: \"forme2\", text: \"Gélule\", value: \"gélule(s)\" }\r\n              ]}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Field component={Form.Input} label=\"Fréquence\" name={'frequence' + numMedicament} placeholder=\"Nb fois par jour\" required />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Field component={Form.Input} label=\"Durée\" name={'duree' + numMedicament} placeholder=\"Nb de jours\" required />\r\n          </Grid>\r\n\r\n        </Grid>\r\n\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  prescriptionSaisie() {\r\n\r\n    const dosagesProduits = (numMedicament) => {\r\n      const produits = this.prescriptionChoisie.getProduits(numMedicament)\r\n      if (Array.isArray(produits)) {\r\n        const dosagesProduits = produits.map(\r\n          (produit, numProduit) => {\r\n            const dosage = this.props['dosage' + numMedicament + numProduit]\r\n            return { designation: produit.designation, dosage }\r\n          }\r\n        )\r\n        return dosagesProduits\r\n      }\r\n      return null\r\n    }\r\n\r\n    const autresChamps = ['quantite', 'forme', 'frequence', 'duree']\r\n\r\n    let prescpription = {\r\n      nbMedicaments: this.medicaments.length,\r\n      medicaments: [],\r\n      recommandations: this.props.recommandations\r\n    }\r\n\r\n    for (let numMedicament = 0; numMedicament < prescpription.nbMedicaments; numMedicament++) {\r\n      prescpription.medicaments[numMedicament] = {\r\n        libelle: this.libellesMedicaments[numMedicament], // concat(produits, ' + ' )\r\n        produits: dosagesProduits(numMedicament),  // Array of {produit, dosage}\r\n      }\r\n      autresChamps.forEach(champ => {\r\n        prescpription.medicaments[numMedicament][champ] = this.props[champ + numMedicament]\r\n      })\r\n    }\r\n\r\n    return prescpription\r\n  }\r\n\r\n}\r\n\r\nexport default PrescriptionForm;\r\n","import { connect } from 'react-redux'\r\nimport { reduxForm } from \"redux-form\";\r\nimport React, { Component, Fragment } from 'react'\r\n\r\nimport PrescriptionForm from \"./PrescriptionForm\";\r\nimport FicheDouleurComponent from './FicheDouleurComponent';\r\nimport { dataTypes, setPrescriptionSaisie } from '../redux/OrdonnanceActions';\r\nimport { goToRoute, routes } from '../config/URLs-conf';\r\n\r\nclass PrescriptionService extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.submitPrescription.bind(this)\r\n    }\r\n\r\n    submitPrescription = prescriptionSaisie => {\r\n        setPrescriptionSaisie(prescriptionSaisie)\r\n        const body = JSON.stringify(prescriptionSaisie)\r\n        console.log(body)\r\n        goToRoute(this.props)(routes.FORMULAIRE_ORDONNANCE)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <FicheDouleurComponent prescriptionChoisie={this.props.prescriptionChoisie} />\r\n                {\r\n                    this.props.prescriptionChoisie &&\r\n                    <PrescriptionForm\r\n                        onSubmit={this.submitPrescription}\r\n                        prescription={this.props.prescriptionChoisie}\r\n                        {...this.props.formValues}\r\n                        recapPrescription={recapitulerPrescription}\r\n                    />\r\n                }\r\n\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport const recapitulerPrescription = (prescription) => {\r\n    const recapDosage = medicament => (\r\n        Array.isArray(medicament.produits) ? (\r\n            medicament.produits\r\n                .filter(produit => produit.dosage)\r\n                .map(produit => produit.designation + ' ' + produit.dosage)\r\n                .join(' + ')\r\n        ) : null\r\n    )\r\n    if (prescription && Array.isArray(prescription.medicaments)) {\r\n        return (\r\n            prescription.medicaments.map(\r\n                (medicament, numMedicament) => (\r\n                    <div> {\r\n                        recapDosage(medicament)\r\n                        + (medicament.quantite && medicament.forme ? ', ' + medicament.quantite + ' ' + medicament.forme : '')\r\n                        + (medicament.frequence ? ', ' + medicament.frequence + ' fois par jour' : '')\r\n                        + (medicament.duree ? ' pendant ' + medicament.duree + ' jours' : '')\r\n                    } </div>\r\n                )\r\n            )\r\n        )\r\n    }\r\n    return null\r\n}\r\n\r\nPrescriptionService = reduxForm({\r\n    form: \"prescription\",\r\n})(PrescriptionService);\r\n\r\n\r\n/**\r\n * La fonction mapStateToProps renvoie un objet résultant du state. \r\n * L'objet renvoyé est passé en props du composant connecté\r\n */\r\nconst mapStateToProps = state => ({\r\n    prescriptionChoisie: state.ordonnance[dataTypes.PRESCRIPTION_CHOISIE],\r\n    formValues: state.form.prescription ? state.form.prescription.values : {},\r\n})\r\n\r\n/**\r\n * La méthode connect() relie le store au composant cible.\r\n * Elle prend en paramètre la fonction \"mapStateToProps\", laquelle prend elle-même en paramètre le state du store.\r\n */\r\nexport default connect(mapStateToProps)(PrescriptionService)\r\n","import React from \"react\";\r\nimport { Field } from \"redux-form\";\r\nimport { Form, Message } from \"semantic-ui-react\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nimport * as formAdapter from \"../redux/reduxFormAdapter\";\r\n\r\nexport default class OrdonnanceForm extends React.Component {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Form size='small' onSubmit={this.props.onSubmit}>\r\n\r\n        <Message info>Veuillez renseigner les informations du patient dans le formulaire ci-dessous</Message>\r\n\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={3}>\r\n            <Field component={Form.Input} label=\"Nom de famille\" name='nomPatient' placeholder=\"Nom obligatoire\" required />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Field component={Form.Input} label=\"Nom usuel\" name='nomUsuPatient' placeholder=\"Facultatif\" />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Field component={Form.Input} label=\"Prénom\" name='prenomPatient' placeholder=\"Prénom\" required />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Field component={Form.Input} label=\"Date naissance\" name='dateNaissance' placeholder=\"jj/mm/aaaa\" required />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <Field component={Form.Input} label=\"N° immatriculation\" name='insee' placeholder=\"n° sur 13 car\" required />\r\n          </Grid>\r\n          <Grid item xs={6}>       \r\n            <div className='field'><label>Sexe</label></div>\r\n            <Form.Group inline>\r\n              <Field\r\n                component={formAdapter.renderRadio}\r\n                label=\"Masculin\"\r\n                className='field'\r\n                name=\"sexe\"\r\n                radioValue='M'\r\n              />\r\n              <Field\r\n                component={formAdapter.renderRadio}\r\n                label=\"Féminin\"\r\n                className='field'\r\n                name=\"sexe\"\r\n                radioValue='F'\r\n              />\r\n            </Form.Group>\r\n\r\n          </Grid>\r\n\r\n        </Grid>\r\n        <p></p>\r\n        <Form.Group inline>\r\n          <Form.Button type='submit' primary>Editer l'ordonnance</Form.Button>\r\n          <Form.Button onClick={this.props.reset}>Annuler</Form.Button>\r\n        </Form.Group>\r\n\r\n      </Form>\r\n    )\r\n  }\r\n\r\n}","import React, { Component, Fragment } from 'react'\r\nimport { connect } from \"react-redux\"\r\nimport { reduxForm } from \"redux-form\";\r\nimport { Message, Divider, Header, Label } from 'semantic-ui-react'\r\n\r\nimport { dataTypes, setOrdonnanceEmise } from '../redux/OrdonnanceActions'\r\nimport { recapitulerPrescription } from './PrescriptionService'\r\nimport OrdonnanceForm from './OrdonnanceForm';\r\n\r\nclass OrdonnanceService extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.submitOrdonnance.bind(this)\r\n    }\r\n\r\n    submitOrdonnance = infosPatient => {\r\n        let ordonnance = {\r\n            infosPatient,\r\n            prescription : this.props.prescriptionSaisie\r\n        }\r\n        setOrdonnanceEmise(ordonnance)\r\n        console.log(JSON.stringify(ordonnance))\r\n    }\r\n\r\n    render() {\r\n        const prescription = this.props.prescriptionSaisie\r\n        return (\r\n            prescription ?\r\n                <Fragment>\r\n                    <OrdonnanceForm onSubmit={() => this.submitOrdonnance(this.props.infosPatient)} {...this.props} />\r\n                    <p></p>\r\n\r\n                    <Message>\r\n\r\n                        <Divider horizontal fitted><Header as='h5'>Votre ordonnance</Header></Divider>\r\n                        \r\n                        {this.props.infosPatient && (\r\n                            <Fragment>\r\n                                <Label>Patient</Label>\r\n                                <div style={{ margin: '20px 10px' }}>\r\n                                    {recapitulerInfosPatient(this.props.infosPatient)}\r\n                                </div>\r\n                            </Fragment>\r\n                        )}\r\n\r\n                        <Label>Prescription</Label>\r\n                        <div style={{ margin: '20px 10px' }}>\r\n                            {recapitulerPrescription(prescription)}\r\n                            {\r\n                                prescription.recommandations &&\r\n                                <p> <b> Recommandations </b>\r\n                                    <div className='infosBase'>{prescription.recommandations}</div>\r\n                                </p>\r\n                            }\r\n                        </div>\r\n\r\n                    </Message>\r\n                </Fragment>\r\n                :\r\n                <Message error> Erreur : Aucune prescription saisie !!! </Message>\r\n        )\r\n    }\r\n}\r\n\r\nexport const recapitulerInfosPatient = (infosPatient) => {\r\n    if (infosPatient) {\r\n        return (\r\n            <div> {\r\n                Object.keys(infosPatient).map(\r\n                    key => {\r\n                        switch (key) {\r\n                            case 'nomPatient': return infosPatient[key]\r\n                            case 'dateNaissance': return ' - né(e) le ' + infosPatient[key]\r\n                            case 'insee': return <p>n° immatriculation {infosPatient[key]}</p>\r\n                            case 'sexe': return ''\r\n                            default: return ' - ' + infosPatient[key]\r\n                        }\r\n                    }\r\n                )\r\n            } </div>\r\n        )\r\n\r\n    }\r\n    return null\r\n}\r\n\r\nOrdonnanceService = reduxForm({\r\n    form: \"infosPatient\",\r\n})(OrdonnanceService);\r\n\r\nconst mapStateToProps = state => ({\r\n    prescriptionSaisie: state.ordonnance[dataTypes.PRESCRIPTION_SAISIE],\r\n    infosPatient: state.form.infosPatient ? state.form.infosPatient.values : null,\r\n})\r\n\r\nexport default connect(mapStateToProps)(OrdonnanceService)\r\n","import { generatePath } from \"react-router\";\r\n\r\nimport ArborescenceService from \"../ordonnance/ArborescenceService\"\r\nimport FicheDouleurService from \"../ordonnance/FicheDouleurService\"\r\nimport PrescriptionService from \"../ordonnance/PrescriptionService\"\r\nimport OrdonnanceService from \"../ordonnance/OrdonnanceService\";\r\n\r\nexport const apiURLs = {\r\n    arborescenceDouleurs: '/douleurs/arborescence',\r\n    ficheDouleur: idDouleur => '/douleurs/' + idDouleur,\r\n    nouvelleOrdonnance: '/ordonnances/nouvelle',\r\n}\r\n\r\nconst basePath = '/clientApp'\r\n\r\nexport const routes = {\r\n    ARBORESCENCE: 'arborescence',\r\n    FICHE_DOULEUR: 'ficheDouleur',\r\n    FORMULAIRE_PRESCRIPTION: 'formulairePrescription',\r\n    FORMULAIRE_ORDONNANCE: 'formulaireOrdonnance',\r\n    HISTORIQUE: 'historique',\r\n    LIENS: 'liens',\r\n}\r\n\r\nexport const routesConfig = [\r\n    { key: routes.ARBORESCENCE, path: `${basePath}/douleurs`, component: ArborescenceService },\r\n    { key: routes.FICHE_DOULEUR, path: `${basePath}/douleurs/:idDouleur`, component: FicheDouleurService },\r\n    { key: routes.FORMULAIRE_PRESCRIPTION, path: `${basePath}/prescriptionForm`, component: PrescriptionService },\r\n    { key: routes.FORMULAIRE_ORDONNANCE, path: `${basePath}/ordonnanceForm`, component: OrdonnanceService },\r\n]\r\n\r\nexport const getRoutePath = (route, pathParams) => (\r\n    generatePath(routesConfig.filter(element => element.key === route)\r\n        .map(config => config.path).join(), pathParams)\r\n)\r\n\r\nexport const goToRoute = props => {\r\n    let { history } = props \r\n    if (!history) {\r\n        history = props\r\n    }\r\n    return (route, pathParams) => history.push(getRoutePath(route, pathParams))\r\n}","import { combineReducers } from \"redux\";\r\nimport ordonnanceReducer from \"./OrdonnanceActions\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\n\r\n/**\r\n * C'est ici qu'il faut référencer les différents reducers de l'appli Redux.\r\n * Ce sont des fonctions qui doivent être définies dans les composants *Actions.js \r\n * et qui ont pour responsabilité de calculer le nouvel état du store en fonction \r\n * des actions effectuées.\r\n */\r\nexport default combineReducers({\r\n   ordonnance: ordonnanceReducer,\r\n   form: formReducer,\r\n})","import { createStore } from \"redux\";\r\nimport reducers from \"./reducers\";\r\n\r\n// les reducers sont chargés de la mise à jour du store lorsque celui ci reçoit une action\r\nexport const store = createStore(reducers)\r\n\r\nexport default function dispatchData(type, content) {\r\n    store.dispatch({ type, content })\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport { slide as Menu } from 'react-burger-menu'\r\n\r\nimport { getRoutePath, routes } from \"../config/URLs-conf\";\r\nimport './MenuBar.css'\r\n\r\n\r\nexport default function MenuBar() {\r\n    return (\r\n        <Menu>\r\n            <a className=\"menu-item accueil\" href=\"/\">Accueil</a>\r\n            <a className=\"menu-item ordonnance\" href={getRoutePath(routes.ARBORESCENCE)}>Ordonnance</a>\r\n            <a className=\"menu-item histo\" href={getRoutePath(routes.HISTORIQUE)}>Historique</a>\r\n            <a className=\"menu-item lien\" href={getRoutePath(routes.LIENS)}>Liens</a>\r\n        </Menu>\r\n    )\r\n}","import React, { Component } from 'react'\r\n\r\n\r\nclass Accueil extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.onClick = this.onClick.bind(this)\r\n        this.state = {\r\n            actif: false,\r\n        }\r\n    }\r\n\r\n    onClick(e) {\r\n        if (this.state.actif) {\r\n            e.target.className = 'noborder'\r\n            this.setState({ actif: false })\r\n        } else {\r\n            e.target.className = 'ui accordion styled'\r\n            this.setState({ actif: true })\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className='noborder' onClick={this.onClick} >                \r\n                {this.props.message}<br/>                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Accueil\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nimport MainApp from './App'\r\n\r\nReactDOM.render( <MainApp />, document.getElementById('react-app'))\r\n","import React from 'react'\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { Header, Segment } from 'semantic-ui-react';\r\nimport { Divider } from '@material-ui/core';\r\n\r\nimport { store } from \"./redux/store\";\r\nimport { routesConfig } from \"./config/URLs-conf\";\r\nimport \"./App.css\";\r\n// import \"./assets/bootstrap-slate.css\";\r\nimport Menu from \"./components/MenuBar\";\r\nimport Accueil from \"./components/Accueil\";\r\nimport Test from './Test';\r\n\r\nexport default function App() {\r\n\r\n  const msgBienvenue = (\r\n    <div>\r\n      <h5>\r\n        <p>Bienvenue dans Pain Control Pro</p>\r\n        <p>L'application qu'il vous faut pour gérer la douleur de vos patients</p>\r\n        <p>Cliquez sur le menu en haut à gauche pour sélectionner votre choix</p>\r\n      </h5>\r\n    </div>\r\n  )\r\n\r\n  return (\r\n    // le Provider permet la connexion des composants enfants au store\r\n    <Provider store={store}>\r\n\r\n      {/** le Router transmets la prop history à tous les composants enfants */}\r\n      <Router>\r\n\r\n        <Menu />\r\n\r\n        <Header as=\"h2\" color=\"grey\" textAlign=\"center\" inverted dividing style={{\r\n          margin: 0, paddingTop: '20px', paddingBottom: '10px', position: 'fixed', top: 0, left: 0, \r\n          zIndex: 900, background: 'rgb(35, 55, 60)', minWidth: '100%'\r\n        }}>\r\n          <span> Pain Control Pro </span>\r\n        </Header>\r\n\r\n        <Segment className='center' style={{ top: '60px' }}>\r\n\r\n          <Route exact path='/' render={props => <Accueil {...props} message={msgBienvenue} />} />\r\n          \r\n          {routesConfig.map(\r\n            config => (<Route exact {...config} />)            \r\n          )}\r\n\r\n          <Divider/>\r\n          {/* \r\n           <Test className='infosBase'>\r\n\r\n          </Test>  */}\r\n\r\n        </Segment>\r\n\r\n      </Router>\r\n\r\n\r\n    </Provider>\r\n  )\r\n\r\n}"],"sourceRoot":""}