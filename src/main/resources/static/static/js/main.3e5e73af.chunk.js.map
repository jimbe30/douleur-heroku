{"version":3,"sources":["config/URLs-conf.js","ordonnance/OrdonnanceActions.js","redux/reducers.js","redux/store.js","components/MenuBar.js","components/Accueil.jsx","Test.js","components/TruncBox.js","ordonnance/ArborescenceComponent.js","ordonnance/ArborescenceService.js","ordonnance/FicheDouleurComponent.js","redux/reduxFormAdapter.js","ordonnance/PrescriptionObj.js","ordonnance/OrdonnanceForm.js","ordonnance/FicheDouleurService.js","index.jsx","App.jsx"],"names":["apiURLs","douleurs","frontPrefix","ordonnanceActions","GET_PRESCRIPTIONS","GET_ARBORESCENCE","_callee2","idDouleur","result","regenerator_default","a","wrap","_context2","prev","next","getResultFromUrl","urls","sent","dispatchAction","stop","_callee3","_context3","_ref","Object","asyncToGenerator","mark","_callee","url","_context","axios","get","then","response","data","abrupt","t0","_x2","apply","this","arguments","combineReducers","ordonnance","length","undefined","action","type","objectSpread","prescriptions","content","arborescence","form","formReducer","store","createStore","reducers","actionType","actionContent","dispatch","MenuBar","react_default","createElement","BurgerMenu","className","href","concat","Accueil","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onClick","bind","assertThisInitialized","state","actif","e","target","setState","message","Component","TruncBox","children","width","height","moreText","lessText","rest","objectWithoutProperties","style","truncated","previousSibling","Fragment","assign","Arborescence","nomenclatures","history","buttonStyle","float","maxWidth","marginTop","marginBottom","marginRight","Entree","_ref2","libelle","infosGenerales","retour","title","Button","push","components_TruncBox","Accordion","styled","panels","Branche","_ref3","nomenclaturesEnfants","Array","isArray","entreesAffichables","map","nomenclature","titre","id","_ref4","_getArborescence","getArborescence","Message","info","ArborescenceComponent_Arborescence","connect","appState","FicheDouleurComponent","prescriptionChoisie","clickOrdonnance","douleur","nomenclatureDouleur","infos","recommandations","nbPreco","messageInfo","warning","messageRecommandation","Divider_Divider","horizontal","fitted","Header","as","renderPrescription","prescription","medicamentsPreconises","preconisation","description","split","ligne","react","index","Label","renderSelect","field","Form","Select","label","name","input","onChange","value","options","placeholder","renderTextArea","TextArea","Prescription","nbMedicaments","getProduits","numMedicament","compatibilites","compatibilite","produit","getDesignationsProduits","produits","designation","OrdonnanceForm","medicaments","libellesMedicaments","medicament","join","_this2","size","onSubmit","ordonnanceSaisie","formulaireMedicament","Field","component","formAdapter","getRecapitulatif","Group","inline","primary","reset","padding","Grid","container","spacing","numProduit","item","xs","Input","required","key","text","_this3","designationProduit","dosageProduit","_this4","_this5","getRecapDosage","_this6","autresChamps","_loop","dosages","getDosages","forEach","champ","React","FicheDouleur","onClickOrdonnance","choixOrdonnance","console","log","submitOrdonnance","body","JSON","stringify","match","params","_x","_getPrescriptions","getPrescriptions","getRouteParams","ordonnance_OrdonnanceForm","formValues","reduxForm","values","ReactDOM","render","msgBienvenue","es","react_router_dom","MenuBar_MenuBar","color","textAlign","inverted","dividing","margin","paddingTop","paddingBottom","position","top","left","zIndex","background","minWidth","Segment","react_router","exact","path","components_Accueil","Divider","document","getElementById"],"mappings":"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","file":"static/js/main.3e5e73af.chunk.js","sourcesContent":["\r\nexport const apiURLs = {\r\n    douleurs: '/ordonnances/',   \r\n}\r\n\r\nexport const frontPrefix = '/clientApp'\r\n","import dispatchAction from \"../redux/store\";\r\nimport axios from \"axios\";\r\nimport { apiURLs as urls } from \"../config/URLs-conf\";\r\n\r\nexport const ordonnanceActions = {\r\n    GET_PRESCRIPTIONS: 'GET_PRESCRIPTIONS', \r\n    GET_ARBORESCENCE: 'GET_ARBORESCENCE',\r\n}\r\n\r\nexport async function getPrescriptions(idDouleur) {\r\n  const result = await getResultFromUrl(urls.douleurs + idDouleur)\r\n  dispatchAction(ordonnanceActions.GET_PRESCRIPTIONS, result);  \r\n}\r\n\r\nexport async function getArborescence() {\r\n    const result = await getResultFromUrl(urls.douleurs)\r\n    dispatchAction(ordonnanceActions.GET_ARBORESCENCE, result);\r\n}\r\n\r\nconst getResultFromUrl = async url => {\r\n  try {\r\n    let result\r\n    await axios.get(url).then(response => result = response.data)\r\n    return result\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Reducer pour le thème ordonnance\r\n * @param {*} ordonnance \r\n * @param {*} action \r\n */\r\nexport default function ordonnanceReducer(ordonnance = {}, action) {\r\n\r\n    switch(action.type) {\r\n        case ordonnanceActions.GET_PRESCRIPTIONS: {\r\n          return {...ordonnance, prescriptions: action.content}\r\n        }\r\n        case ordonnanceActions.GET_ARBORESCENCE: {\r\n           return {...ordonnance, arborescence: action.content}\r\n        }\r\n        default:\r\n            return ordonnance         \r\n    } \r\n}\r\n\r\n","import { combineReducers } from \"redux\";\r\nimport ordonnanceReducer from \"../ordonnance/OrdonnanceActions\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\n\r\n/**\r\n * C'est ici qu'il faut référencer les différents reducers de l'appli Redux.\r\n * Ce sont des fonctions qui doivent être définies dans les composants *Actions.js \r\n * et qui ont pour responsabilité de calculer le nouvel état du store en fonction \r\n * des actions effectuées.\r\n */\r\nexport default combineReducers({\r\n   ordonnance: ordonnanceReducer,\r\n   form: formReducer,\r\n})","import { createStore } from \"redux\";\r\nimport reducers from \"./reducers\";\r\n\r\n// les reducers sont chargés de la mise à jour du store lorsque celui ci reçoit une action\r\nexport const store = createStore(reducers)\r\n\r\nexport default function dispatchAction(actionType, actionContent) {\r\n    store.dispatch({\r\n        type: actionType,\r\n        content: actionContent\r\n    })\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport { slide as Menu } from 'react-burger-menu'\r\n\r\nimport { frontPrefix } from \"../config/URLs-conf\";\r\nimport './MenuBar.css'\r\n\r\n\r\nexport default function MenuBar() {\r\n    return (\r\n        <Menu>\r\n            <a className=\"menu-item accueil\" href=\"/\">Accueil</a>\r\n            <a className=\"menu-item ordonnance\" href={`${frontPrefix}/douleurs`}>Ordonnance</a>\r\n            <a className=\"menu-item histo\" href={`${frontPrefix}/historique`}>Historique</a>\r\n            <a className=\"menu-item lien\" href={`${frontPrefix}/liens`}>Liens</a>\r\n        </Menu>\r\n    )\r\n}","import React, { Component } from 'react'\r\n\r\n\r\nclass Accueil extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.onClick = this.onClick.bind(this)\r\n        this.state = {\r\n            actif: false,\r\n        }\r\n    }\r\n\r\n    onClick(e) {\r\n        if (this.state.actif) {\r\n            e.target.className = 'noborder'\r\n            this.setState({ actif: false })\r\n        } else {\r\n            e.target.className = 'ui accordion styled'\r\n            this.setState({ actif: true })\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className='noborder' onClick={this.onClick} >                \r\n                {this.props.message}<br/>                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Accueil\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { Grid, TextField } from '@material-ui/core';\r\nimport { Autocomplete } from '@material-ui/lab'\r\n\r\nfunction Test(props) {\r\n\r\n    const defaultProps = {\r\n        options: top100Films,\r\n        getOptionLabel: option => option.title,\r\n    };\r\n\r\n    const [value, setValue] = React.useState([]);\r\n\r\n    return (\r\n        <div >\r\n\r\n            <p>Choix : {\r\n                (Array.isArray(value) && value.map(item => <p>{item.id}</p>)) ||\r\n                (value && value.id ? value.id : (value ? value : ''))\r\n            } </p>\r\n\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={3}>\r\n                    <Autocomplete\r\n                        {...defaultProps}\r\n                        id=\"include-input-in-list\"\r\n                        freeSolo\r\n                        renderInput={params => (\r\n                            <TextField {...params} label=\"includeInputInList\" fullWidth />\r\n                        )}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <Autocomplete\r\n                        id=\"controlled-demo\"\r\n                        options={[{ id: '400 mg' }, { id: '500 mg' },]}\r\n                        getOptionLabel={option => option.id}\r\n                        // disableOpenOnFocus\r\n                        clearOnEscape\r\n                        freeSolo\r\n                        // multiple\r\n                        value={value}\r\n                        onChange={(event, newValue) => { setValue(newValue); }}\r\n                        renderInput={params => (\r\n                            <TextField {...params} label=\"dosage\" fullWidth />\r\n                        )}\r\n                    />\r\n                </Grid>\r\n\r\n            </Grid>\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films = [\r\n    { title: 'The Shawshank Redemption', year: 1994 },\r\n    { title: 'The Godfather', year: 1972 },\r\n    { title: 'The Godfather: Part II', year: 1974 },\r\n    { title: 'The Dark Knight', year: 2008 },\r\n    { title: '12 Angry Men', year: 1957 },\r\n    { title: \"Schindler's List\", year: 1993 },\r\n    { title: 'Pulp Fiction', year: 1994 },\r\n    { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n    { title: 'Life Is Beautiful', year: 1997 },\r\n    { title: 'The Usual Suspects', year: 1995 },\r\n    { title: 'Léon: The Professional', year: 1994 },\r\n    { title: 'Spirited Away', year: 2001 },\r\n    { title: 'Saving Private Ryan', year: 1998 },\r\n    { title: 'Once Upon a Time in the West', year: 1968 },\r\n    { title: 'American History X', year: 1998 },\r\n    { title: 'Interstellar', year: 2014 },\r\n    { title: 'Casablanca', year: 1942 },\r\n    { title: 'City Lights', year: 1931 },\r\n    { title: 'Psycho', year: 1960 },\r\n    { title: 'The Green Mile', year: 1999 },\r\n    { title: 'The Intouchables', year: 2011 },\r\n    { title: 'Modern Times', year: 1936 },\r\n    { title: 'Raiders of the Lost Ark', year: 1981 },\r\n    { title: 'Rear Window', year: 1954 },\r\n    { title: 'The Pianist', year: 2002 },\r\n    { title: 'The Departed', year: 2006 },\r\n    { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n    { title: 'Back to the Future', year: 1985 },\r\n    { title: 'Paths of Glory', year: 1957 },\r\n    { title: 'Django Unchained', year: 2012 },\r\n    { title: 'The Shining', year: 1980 },\r\n    { title: 'WALL·E', year: 2008 },\r\n    { title: 'American Beauty', year: 1999 },\r\n    { title: 'The Dark Knight Rises', year: 2012 },\r\n    { title: 'Princess Mononoke', year: 1997 },\r\n    { title: 'Aliens', year: 1986 },\r\n    { title: 'Oldboy', year: 2003 },\r\n    { title: 'Once Upon a Time in America', year: 1984 },\r\n    { title: 'Witness for the Prosecution', year: 1957 },\r\n    { title: 'Das Boot', year: 1981 },\r\n    { title: 'Citizen Kane', year: 1941 },\r\n    { title: 'North by Northwest', year: 1959 },\r\n    { title: 'Vertigo', year: 1958 },\r\n    { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\r\n    { title: 'Reservoir Dogs', year: 1992 },\r\n    { title: 'Braveheart', year: 1995 },\r\n    { title: 'M', year: 1931 },\r\n    { title: 'Requiem for a Dream', year: 2000 },\r\n];\r\n\r\nexport default Test","import React from 'react'\r\n\r\nfunction TruncBox(props) {\r\n\r\n    const {className, children, width, height, moreText, lessText, ...rest} = props\r\n\r\n    const style = \r\n        <style> {`\r\n            .truncated {\r\n                max-height: ${height ? height + ';':'2rem;'}\r\n                max-width: ${width ? width + ';':'100%;'}\r\n                width: ${width ? width + ';':'100%;'}\r\n                overflow: hidden;\r\n                text-overflow: ellipsis;\r\n            } \r\n            .expand, .trunc {\r\n                width: fit-content;\r\n                margin-left: auto;\r\n                margin-right: auto;\r\n            }\r\n            .expand::after, .trunc::after {\r\n                cursor: pointer;\r\n                color: #718293;\r\n                font-style: italic;\r\n            }\r\n            .expand::after {\r\n                content: '${moreText ? moreText : '\\\\0025BC'}'; \r\n                font-size: ${!moreText ? '1rem' : '.5rem'};\r\n            }         \r\n            .trunc::after {\r\n                content: '${lessText ? lessText : '\\\\0025B2'}';\r\n                font-size: ${!lessText ? '1rem' : '.5rem'};\r\n            }\r\n        `}\r\n        </style>\r\n\r\n    let truncated = true\r\n\r\n    const onClick = e => {\r\n        if (truncated) {\r\n            e.target.className = 'trunc'\r\n            e.target.previousSibling.className = className ? className: ''\r\n            truncated = false\r\n        } else {\r\n            e.target.className = 'expand'\r\n            e.target.previousSibling.className = `${className ? className + ' ' : ''}truncated`\r\n            truncated = true\r\n        }\r\n    }\r\n\r\n    const render = function () {\r\n        return (\r\n            <React.Fragment>\r\n                {style}\r\n                <div className={`${className ? className + ' ' : ''}truncated`} {...rest}>\r\n                    {children}                    \r\n                </div>\r\n                <div onClick={onClick} className='expand'></div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    return render()\r\n}\r\n\r\nexport default TruncBox","import React from 'react'\r\nimport { Accordion, Button } from 'semantic-ui-react'\r\nimport \"./Arborescence.css\";\r\nimport TruncBox from '../components/TruncBox';\r\nimport { frontPrefix } from '../config/URLs-conf'\r\n\r\nexport default function Arborescence({ nomenclatures, history }) {\r\n\r\n    const buttonStyle = { float: 'right', maxWidth: '100%', marginTop: '-40px', marginBottom: '5px', marginRight: '2%' }\r\n\r\n    const Entree = function ({ libelle, infosGenerales, idDouleur }) {\r\n        const buildContent = function (data) {\r\n            if (data) {\r\n                return (\r\n                    <React.Fragment>\r\n                        <Button style={buttonStyle} onClick={() => history.push(`${frontPrefix}/douleurs/${idDouleur}`)}>\r\n                            Faire l'ordonnance\r\n                        </Button>\r\n                        <TruncBox height='6rem' moreText='▼ ( voir plus ... )' lessText='▲ ( réduire ... )'>\r\n                            <pre className='infosBase'>{data}</pre>\r\n                        </TruncBox>\r\n                    </React.Fragment>\r\n                )\r\n            }\r\n            return \"\";\r\n        }\r\n        const content = buildContent(infosGenerales)\r\n        const retour = [{\r\n            title: libelle,\r\n            content: { content }\r\n        }];\r\n        return (<Accordion styled panels={retour} />)\r\n    }\r\n\r\n    const Branche = function ({ libelle, nomenclaturesEnfants }) {\r\n        const retour = [{\r\n            title: libelle,\r\n            content: {}\r\n        }];\r\n        if (nomenclaturesEnfants && Array.isArray(nomenclaturesEnfants)) {\r\n            let entreesAffichables = nomenclaturesEnfants.map(nomenclature => {\r\n                let titre = nomenclature.libelle\r\n                let infosGenerales = nomenclature.infosGenerales;\r\n                let idDouleur = nomenclature.id;\r\n                if (nomenclature.nomenclaturesEnfants && nomenclature.nomenclaturesEnfants.length > 0) {\r\n                    return <Branche libelle={titre} nomenclaturesEnfants={nomenclature.nomenclaturesEnfants} />;\r\n                }\r\n                else {\r\n                    return <Entree libelle={titre} infosGenerales={infosGenerales} idDouleur={idDouleur} />;\r\n                }\r\n            });\r\n            let content = <div>{entreesAffichables}</div>;\r\n            retour[0].content = { content };\r\n        }\r\n        /**\r\n         * FIX : Extraire la function Branche dans une classe avec gestion d'état actif/inactif \r\n         * en fonction du click (handler méthode)\r\n         * pour modifier l'attribut className (mettre une bordure si actif, pas de bordure si inactif)\r\n         */\r\n        return <Accordion styled panels={retour} />;\r\n    }\r\n\r\n    const Arbre = function ({ nomenclatures }) {\r\n        return (\r\n            <div>{\r\n                Array.isArray(nomenclatures) && nomenclatures.map(\r\n                    nomenclature => {\r\n                        return <Branche libelle={nomenclature.libelle} nomenclaturesEnfants={nomenclature.nomenclaturesEnfants} />;\r\n                    }\r\n                )\r\n            }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Arbre nomenclatures={nomenclatures} />\r\n    );\r\n}\r\n","/**\r\n * Ici on prends en compte l'état applicatif.\r\n * La méthode connect() relie le store au composant cible \r\n */\r\nimport { connect } from 'react-redux'\r\nimport { getArborescence } from \"./OrdonnanceActions\";\r\nimport ArborescenceComponent from \"./ArborescenceComponent\";\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Header, Message } from 'semantic-ui-react';\r\n\r\nclass Arborescence extends Component {\r\n\r\n    propTypes = {\r\n        nomenclatures: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    };\r\n\r\n\r\n    componentDidMount() {\r\n        getArborescence()\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Message info>Choisissez le type de douleur concernée dans l'arborescence ci-dessous</Message>\r\n                <ArborescenceComponent {...this.props} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n/**\r\n * La fonction mapStateToProps renvoie un objet résultant du state. \r\n * L'objet renvoyé est passé en props du composant connecté\r\n */\r\nconst mapStateToProps = appState => ({\r\n    nomenclatures: appState.ordonnance.arborescence\r\n})\r\n/**\r\n * La méthode connect() relie le store au composant cible.\r\n * Elle prend en paramètres \r\n * - la fonction \"mapStateToProps\" à laquelle le state du store est passé en paramètre.\r\n */\r\nexport default connect(mapStateToProps)(Arborescence)","import React, { Fragment } from 'react'\r\nimport { Message, Label, Divider, Header } from 'semantic-ui-react'\r\n\r\nexport default function FicheDouleurComponent(props) {\r\n\r\n  const { prescriptions, prescriptionChoisie, clickOrdonnance } = props\r\n\r\n  /**\r\n   * Si une prescription a été choisie on n'affiche que celle ci avec un message approprié\r\n   * Sinon on affiche la liste des prescriptions proposées avec possibilité d'en choisir une par clic\r\n   */\r\n\r\n  let douleur = () => {\r\n    let nomenclatureDouleur = null\r\n    if (prescriptionChoisie) {\r\n      nomenclatureDouleur = prescriptionChoisie.nomenclatureDouleur\r\n    } else if (prescriptions && prescriptions.length > 0) {\r\n      nomenclatureDouleur = prescriptions[0].nomenclatureDouleur\r\n    }\r\n    if (nomenclatureDouleur) {\r\n      return {\r\n        libelle: nomenclatureDouleur.libelle,\r\n        infos: nomenclatureDouleur.infosGenerales,\r\n        recommandations: nomenclatureDouleur.recommandations,\r\n      }\r\n    }\r\n    return {}\r\n  }\r\n  douleur = douleur()\r\n\r\n  let nbPreco = prescriptions && prescriptions.length > 0 ? prescriptions.length : 0\r\n\r\n\r\n  let messageInfo = () => {\r\n    if (prescriptionChoisie) {\r\n      return (\r\n        <Message info>Vous avez choisi l'ordonnance suivante</Message>\r\n      )\r\n    }\r\n    return (\r\n      nbPreco === 0 ?\r\n        <Message warning>Aucune ordonnance n'est encore proposée pour cette douleur</Message> :\r\n        <Message info>\r\n          {` ${nbPreco} ordonnance${nbPreco > 1 ? 's vous sont proposées' : ' vous est proposée'} `}\r\n          <br />Cliquez sur l'ordonnance de votre choix\r\n        </Message>\r\n    )\r\n  }\r\n  messageInfo = messageInfo()\r\n\r\n\r\n  let messageRecommandation = (\r\n    !prescriptionChoisie && douleur.recommandations && douleur.recommandations.length > 0 ?\r\n      <Message warning className='infosBase'>\r\n        <Divider horizontal fitted><Header as='h4'>Remarques</Header></Divider>\r\n        {douleur.recommandations}\r\n      </Message> : ''\r\n  )\r\n\r\n  const renderListePrescriptions = () => {\r\n\r\n    if (prescriptionChoisie) {\r\n      return (\r\n        <Fragment>\r\n          {renderPrescription(prescriptionChoisie)}\r\n          <Divider />\r\n        </Fragment>\r\n      )\r\n    }\r\n    else if (nbPreco > 0) {\r\n      return prescriptions.map(\r\n        (prescription, index) => (\r\n          <Fragment>\r\n            <Label as='a' onClick={() => clickOrdonnance(index)}>\r\n              Ordonnance {index + 1}\r\n            </Label>\r\n            {renderPrescription(prescription)}\r\n            <Divider />\r\n          </Fragment>\r\n        )\r\n      )\r\n    }\r\n  }\r\n\r\n\r\n\r\n  const renderPrescription = (prescription) => {\r\n    const formatTexte = description => {\r\n      let lignes = description.split(' ; ')\r\n      return lignes.map(\r\n        ligne => (ligne + '\\r\\n')\r\n      )\r\n    }\r\n    if (prescription.medicamentsPreconises.length > 0) {\r\n      return (\r\n        <div className='infosBase'> {\r\n          prescription.medicamentsPreconises.map(\r\n            preconisation => <p>{formatTexte(preconisation.description)}</p>\r\n          )\r\n        }</div>)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>{douleur.libelle}</h3>\r\n      {messageInfo}         \r\n      {renderListePrescriptions()}\r\n      {messageRecommandation}   \r\n    </div>\r\n  )\r\n}\r\n\r\n","import React from \"react\";\r\nimport { Form } from \"semantic-ui-react\";\r\n\r\nexport const renderCheckbox = field => (\r\n  <Form.Checkbox\r\n    checked={!!field.input.value}\r\n    name={field.input.name}\r\n    label={field.label}\r\n    onChange={(e, { checked }) => field.input.onChange(checked)}\r\n  />\r\n);\r\n\r\nexport const renderRadio = field => (\r\n  <Form.Radio\r\n    checked={field.input.value === field.radioValue}\r\n    label={field.label}\r\n    name={field.input.name}\r\n    onChange={(e, { checked }) => field.input.onChange(field.radioValue)}\r\n  />\r\n);\r\n\r\nexport const renderSelect = field => (\r\n  <Form.Select\r\n    label={field.label}\r\n    name={field.input.name}\r\n    onChange={(e, { value }) => field.input.onChange(value)}\r\n    options={field.options}\r\n    placeholder={field.placeholder}\r\n    value={field.input.value}\r\n  />\r\n);\r\n\r\nexport const renderTextArea = field => (\r\n  <Form.TextArea\r\n    {...field.input}\r\n    label={field.label}\r\n    placeholder={field.placeholder}\r\n  />\r\n);","export default function Prescription(ordonnance) {\r\n\r\n  this.medicamentsPreconises = ordonnance ? ordonnance.medicamentsPreconises : []\r\n\r\n  this.nbMedicaments = this.medicamentsPreconises.length\r\n\r\n  this.getProduits = function(numMedicament) {\r\n    if (this.medicamentsPreconises[numMedicament] && this.medicamentsPreconises[numMedicament].compatibilites) {\r\n      return this.medicamentsPreconises[numMedicament].compatibilites.map(compatibilite => compatibilite.produit)\r\n    }\r\n    return null\r\n  }\r\n\r\n  this.getDesignationsProduits = function(numMedicament) {\r\n    const produits = this.getProduits(numMedicament)\r\n    if (produits) {\r\n      return produits.map(produit => produit.designation)\r\n    }\r\n    return null\r\n  }\r\n\r\n\r\n}","import React from \"react\";\r\nimport { Field } from \"redux-form\";\r\nimport { Form, Message, Header, Divider, Label } from \"semantic-ui-react\";\r\nimport * as formAdapter from \"../redux/reduxFormAdapter\"\r\nimport Prescription from \"./PrescriptionObj\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nclass OrdonnanceForm extends React.Component {\r\n\r\n  // On reçoit l'ordonnance en props. C'est un objet de la forme suivante :\r\n  // ordonnance\r\n  // \t.medicamentsPreconises[]\r\n  // \t\t.description\r\n  // \t\t.dureeMin\r\n  // \t\t.dureeMax\r\n  // \t\t.idDouleur\r\n  // \t\t.numOrdonnance\r\n  // \t\t.numMedicament\r\n  // \t\t.compatibilites[]\r\n  // \t\t\t.produit\r\n  // \t\t\t\t.code\r\n  // \t\t\t\t.designation\r\n  // \t\t\t\t.id\r\n  // \t\t\t\t.indesirable\r\n  // \t\t\t\t.indication\r\n  // \t\t\t.dosages\r\n  // \t\t\t.formes\r\n\r\n  constructor(props) {\r\n\r\n    super(props)\r\n    this.prescriptionChoisie = new Prescription(props.ordonnance)\r\n    this.medicaments = this.prescriptionChoisie.medicamentsPreconises\r\n    this.libellesMedicaments = this.medicaments.map(\r\n      (medicament, numMedicament) => this.prescriptionChoisie.getDesignationsProduits(numMedicament).join(' + ')\r\n    )\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Form size='small' onSubmit={() => this.props.onSubmit(this.ordonnanceSaisie())}>\r\n\r\n        <Message info>Veuillez renseigner la posologie dans le formulaire ci-dessous</Message>  {\r\n          this.prescriptionChoisie && this.prescriptionChoisie.medicamentsPreconises.map(\r\n            (medicament, numMedicament) => this.formulaireMedicament(numMedicament)\r\n          )\r\n        }\r\n\r\n        <Field\r\n          component={formAdapter.renderTextArea}\r\n          label=\"Recommandations\"\r\n          name=\"recommandations\"\r\n          placeholder=\"Conseils, effets indésirables à surveiller, cas d'arrêt du traitement...\"\r\n        />\r\n\r\n        <Message>\r\n          <Divider horizontal fitted><Header as='h5'>Récapitulatif</Header></Divider>\r\n          {this.getRecapitulatif()}\r\n        </Message>\r\n\r\n        <Form.Group inline>\r\n          <Form.Button type='submit' primary>Valider</Form.Button>\r\n          <Form.Button onClick={this.props.reset}>Annuler</Form.Button>\r\n        </Form.Group>\r\n\r\n      </Form>\r\n    )\r\n  }\r\n\r\n  formulaireMedicament(numMedicament) {\r\n\r\n    return (\r\n\r\n      <React.Fragment>\r\n\r\n        <div style={{ padding: '1rem 0' }}><Label>{this.libellesMedicaments[numMedicament]}</Label></div>\r\n\r\n        <input\r\n          name={'medicament' + numMedicament}\r\n          type='hidden'\r\n          index={numMedicament}\r\n          value={this.libellesMedicaments[numMedicament]}\r\n        />\r\n\r\n        <Grid container spacing={1}>\r\n\r\n          {this.prescriptionChoisie.getProduits(numMedicament).map((produit, numProduit) =>\r\n            <Grid item xs={2}>\r\n              <Field component={Form.Input} label={numProduit === 0 ? 'dosage' : ''} name={'dosage' + numMedicament + numProduit} placeholder={produit.designation} required />\r\n            </Grid>\r\n          )}\r\n\r\n          <Grid item xs={4}>\r\n            <Field component={Form.Input} label=\"Quantité / prise\" name={'quantite' + numMedicament} placeholder=\"Nb comprimés\" required />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <Field component={formAdapter.renderSelect} label=\"Forme\" name={'forme' + numMedicament} placeholder=\"Comprimé ...\"\r\n              options={[\r\n                { key: \"forme1\", text: \"Comprimé\", value: \"comprimé(s)\" },\r\n                { key: \"forme2\", text: \"Gélule\", value: \"gélule(s)\" }\r\n              ]}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Field component={Form.Input} label=\"Fréquence\" name={'frequence' + numMedicament} placeholder=\"Nb fois par jour\" required />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Field component={Form.Input} label=\"Durée\" name={'duree' + numMedicament} placeholder=\"Nb de jours\" required />\r\n          </Grid>\r\n\r\n        </Grid>\r\n\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  getRecapDosage(numMedicament) {\r\n    const produits = this.prescriptionChoisie.getProduits(numMedicament)\r\n    if (Array.isArray(produits)) {\r\n      const dosagesProduit = produits.map(\r\n        (produit, numProduit) => {\r\n          const designationProduit = produit.designation\r\n          const dosageProduit = this.props['dosage' + numMedicament + numProduit]\r\n          return (dosageProduit ? designationProduit + ' ' + dosageProduit : '')\r\n        }\r\n      )\r\n      return dosagesProduit.join(' + ')\r\n    }\r\n    return null\r\n  }\r\n\r\n  getDosages(numMedicament) {\r\n    const produits = this.prescriptionChoisie.getProduits(numMedicament)\r\n    if (Array.isArray(produits)) {\r\n      const dosagesProduit = produits.map(\r\n        (produit, numProduit) => {\r\n          return this.props['dosage' + numMedicament + numProduit]\r\n        }\r\n      )\r\n      return dosagesProduit\r\n    }\r\n    return null\r\n  }\r\n\r\n\r\n  getRecapitulatif() {\r\n    return (\r\n      this.medicaments.map(\r\n        (medicament, numMedicament) => (\r\n          <div> {\r\n            this.getRecapDosage(numMedicament)\r\n            + (this.props['quantite' + numMedicament] && this.props['forme' + numMedicament] ?\r\n              ', ' + this.props['quantite' + numMedicament] + ' ' + this.props['forme' + numMedicament] : '')\r\n            + (this.props['frequence' + numMedicament] ? ', ' + this.props['frequence' + numMedicament] + ' fois par jour' : '')\r\n            + (this.props['duree' + numMedicament] ? ' pendant ' + this.props['duree' + numMedicament] + ' jours' : '')\r\n          } </div>\r\n        )\r\n      )\r\n    )\r\n  }\r\n\r\n\r\n  ordonnanceSaisie() {\r\n\r\n    const autresChamps = ['quantite', 'forme', 'frequence', 'duree']\r\n\r\n    let ordonnance = {\r\n      nbMedicaments: this.medicaments.length,\r\n      medicaments: [],\r\n      recommandations: this.props.recommandations\r\n    }\r\n\r\n    for (let numMedicament = 0; numMedicament < ordonnance.nbMedicaments; numMedicament++) {\r\n      ordonnance.medicaments[numMedicament] = {\r\n        medicament: this.libellesMedicaments[numMedicament],\r\n        dosages: this.getDosages(numMedicament),\r\n      }\r\n      autresChamps.forEach(champ => {\r\n        ordonnance.medicaments[numMedicament][champ] = this.props[champ + numMedicament]\r\n      })\r\n    }\r\n    return ordonnance\r\n  }\r\n\r\n}\r\n\r\nexport default OrdonnanceForm;\r\n","/**\r\n * Ici on prends en compte l'état applicatif.\r\n * La méthode connect() relie le store au composant cible \r\n */\r\nimport { connect } from 'react-redux'\r\nimport { reduxForm } from \"redux-form\";\r\nimport { getPrescriptions } from \"./OrdonnanceActions\";\r\nimport FicheDouleurComponent from \"./FicheDouleurComponent\";\r\nimport React, { Component, Fragment } from 'react'\r\nimport OrdonnanceForm from \"./OrdonnanceForm\";\r\n\r\n\r\n\r\nclass FicheDouleur extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            choixOrdonnance: null,\r\n            prescriptionChoisie: null\r\n        }\r\n        this.onClickOrdonnance.bind(this)\r\n    }\r\n\r\n\r\n    getRouteParams() {\r\n        if (this.props.match) {\r\n            return this.props.match.params\r\n        }\r\n        return {}\r\n    }\r\n\r\n    componentDidMount() {\r\n        let { idDouleur } = this.getRouteParams()\r\n        getPrescriptions(idDouleur)\r\n    }\r\n\r\n    onClickOrdonnance = (index) => {\r\n        this.setState({\r\n            choixOrdonnance: index,\r\n            prescriptionChoisie: this.props.prescriptions[index]\r\n        })\r\n        console.log('Choix de l\\'ordonnance n° ' + (index + 1))\r\n    }\r\n\r\n    submitOrdonnance = form => {\r\n        const body = JSON.stringify(form)\r\n        console.log(body)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <FicheDouleurComponent clickOrdonnance={this.onClickOrdonnance}\r\n                    prescriptionChoisie={this.state.prescriptionChoisie} prescriptions={this.props.prescriptions} />\r\n                {\r\n                    this.state.prescriptionChoisie &&\r\n                    <OrdonnanceForm\r\n                        onSubmit={this.submitOrdonnance}\r\n                        ordonnance={this.state.prescriptionChoisie}\r\n                        {...this.props.formValues}\r\n                    />\r\n                }\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nFicheDouleur = reduxForm({\r\n    form: \"ordonnance\",\r\n})(FicheDouleur);\r\n\r\n\r\n/**\r\n * La fonction mapStateToProps renvoie un objet résultant du state. \r\n * L'objet renvoyé est passé en props du composant connecté\r\n */\r\nconst mapStateToProps = appState => ({\r\n    prescriptions: appState.ordonnance.prescriptions,\r\n    formValues: appState.form.ordonnance ? appState.form.ordonnance.values : {},\r\n})\r\n\r\n/**\r\n * La méthode connect() relie le store au composant cible.\r\n * Elle prend en paramètre la fonction \"mapStateToProps\", laquelle prend elle-même en paramètre le state du store.\r\n */\r\nexport default connect(mapStateToProps)(FicheDouleur)\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nimport MainApp from './App'\r\n\r\nReactDOM.render( <MainApp />, document.getElementById('react-app'))\r\n","import React from 'react'\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { Header, Segment } from 'semantic-ui-react';\r\nimport { Divider } from '@material-ui/core';\r\n\r\n\r\nimport { store } from \"./redux/store\";\r\nimport { frontPrefix } from \"./config/URLs-conf\";\r\nimport \"./App.css\";\r\n// import \"./assets/bootstrap-slate.css\";\r\nimport Menu from \"./components/MenuBar\";\r\nimport Accueil from \"./components/Accueil\";\r\nimport Test from './Test';\r\nimport Arborescence from './ordonnance/ArborescenceService';\r\nimport FicheDouleur from './ordonnance/FicheDouleurService';\r\n\r\n\r\nexport default function App() {\r\n\r\n  const msgBienvenue = (\r\n    <div>\r\n      <h5>\r\n        <p>Bienvenue dans Pain Control Pro</p>\r\n        <p>L'application qu'il vous faut pour gérer la douleur de vos patients</p>\r\n        <p>Cliquez sur le menu en haut à gauche pour sélectionner votre choix</p>\r\n      </h5>\r\n    </div>\r\n  )\r\n\r\n  return (\r\n    // le Provider permet la connexion des composants enfants au store\r\n    <Provider store={store}>\r\n\r\n      {/** le Router transmets la prop history à tous les composants enfants */}\r\n      <Router>\r\n\r\n        <Menu />\r\n\r\n        <Header as=\"h2\" color=\"grey\" textAlign=\"center\" inverted dividing style={{\r\n          margin: 0, paddingTop: '20px', paddingBottom: '10px', position: 'fixed', top: 0, left: 0, \r\n          zIndex: 900, background: 'rgb(35, 55, 60)', minWidth: '100%'\r\n        }}>\r\n          <span> Pain Control Pro </span>\r\n        </Header>\r\n\r\n        <Segment className='center' style={{ top: '60px' }}>\r\n\r\n          <Route exact path='/' render={props => <Accueil {...props} message={msgBienvenue} />} />\r\n          <Route exact path={`${frontPrefix}/douleurs`} component={Arborescence} />\r\n          <Route exact path={`${frontPrefix}/douleurs/:idDouleur`} component={FicheDouleur} />\r\n\r\n          <Divider></Divider>\r\n          {/* \r\n           <Test className='infosBase'>\r\n\r\n          </Test>  */}\r\n\r\n        </Segment>\r\n\r\n      </Router>\r\n\r\n\r\n    </Provider>\r\n  )\r\n\r\n}"],"sourceRoot":""}