{"version":3,"sources":["services/apiService.js","redux/FormActions.js","components/TruncBox.js","hoc/ActiveItemHandler.js","ordonnance/ArborescenceComponent.js","components/LoadComponent.js","ordonnance/ArborescenceService.js","ordonnance/OrdonnanceActions.js","ordonnance/FicheDouleurComponent.js","ordonnance/FicheDouleurService.js","redux/reduxFormAdapter.js","ordonnance/PrescriptionObj.js","ordonnance/PrescriptionForm.js","hoc/FormHandler.js","ordonnance/PrescriptionService.js","utils-components/FormInput.js","ordonnance/OrdonnanceForm.js","ordonnance/OrdonnanceService.js","ordonnance/OrdonnanceConfirm.js","services/routeService.js","redux/store.js","components/MenuBar.js","components/Accueil.jsx","Test.js","index.jsx","App.jsx"],"names":["apiURLs","arborescenceDouleurs","ficheDouleur","idDouleur","nouvelleOrdonnance","ordonnanceEmise","idOrdonnance","backendURL","process","textMimeTypes","returnTypes","getResultFromUrl","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","url","config","result","wrap","_context","prev","next","axios","get","then","response","getResultFromResponse","t0","getResultFromError","abrupt","stop","_x","_x2","apply","this","arguments","postObjectToUrl","_ref2","_callee2","object","_context2","post","_x3","_x4","_x5","error","console","log","JSON","stringify","data","message","type","contentType","_ref3","_callee3","textResult","obj","_context3","headers","toLowerCase","startsWith","find","text","parse","_x6","formNames","TEST_FORM","PRESCRIPTION_FORM","INFOS_PATIENT_FORM","setFormValues","formName","formValues","dispatchData","resetFormErrors","stateForm","assign","getState","newState","fields","keys","Array","isArray","filter","field","forEach","objectSpread","defineProperty","setFormErrors","errors","includes","replace","TruncBox","props","className","children","width","height","moreText","lessText","rest","objectWithoutProperties","style","react_default","createElement","concat","truncated","onClick","e","target","previousSibling","Fragment","ActiveItemHandler","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleItemClick","index","currentActive","state","activeIndex","setState","bind","assertThisInitialized","_this2","_this$props","render","componentList","otherProps","map","component","React","Component","Arborescence","nomenclatures","ActiveItemHandler_ActiveItemHandler","Branche","key","onTitleClick","event","isActive","libelle","nomenclaturesEnfants","accordion","title","content","_ref4","length","Feuille","onChoose","infosGenerales","id","_ref5","handleClickDouleur","buttonStyle","float","maxWidth","marginTop","marginBottom","marginRight","Button","primary","size","components_TruncBox","_ref6","Accordion","styled","Title","active","Icon","name","Content","LoadComponent","errorMessage","loadedObject","loader","Loader","top","errorList","Message","goToRoute","routes","FICHE_DOULEUR","_setArborescence","setArborescence","components_LoadComponent","info","ArborescenceComponent_Arborescence","connect","appState","ordonnance","dataTypes","ARBORESCENCE","FicheDouleurComponent","prescriptions","prescriptionChoisie","clickOrdonnance","douleur","nomenclatureDouleur","infos","recommandations","nbPreco","messageInfo","warning","messageRecommandation","Divider","horizontal","fitted","Header","as","renderPrescription","prescription","formatTexte","description","split","ligne","medicamentsPreconises","undefined","Grid","container","justify","direction","alignItems","spacing","item","preconisation","react","FicheDouleur","clickPrescription","store","precedente","PRESCRIPTION_CHOISIE","setPrescriptionChoisie","FORMULAIRE_PRESCRIPTION","_setPreconisations","setPreconisations","getRouteParams","match","params","PRESCRIPTIONS","renderRadio","Form","Radio","checked","input","value","radioValue","label","onChange","renderSelect","Select","options","placeholder","renderTextArea","TextArea","Prescription","ordonnancePreconisee","nbMedicaments","getProduits","numMedicament","compatibilites","compatibilite","produit","getDesignationsProduits","produits","designation","PrescriptionForm","recapPrescription","medicaments","libellesMedicaments","medicament","join","onSubmit","prescriptionSaisie","formulaireMedicament","Field","formAdapter","Group","inline","reset","padding","Label","numProduit","xs","Input","required","_this3","dosagesProduits","dosage","autresChamps","prescpription","_loop","champ","FormHandler","others","WrappedComponent","handleForm","_React$Component","inherits","createClass","prevProps","savedValues","currentValues","appForms","form","values","initialValues","reduxForm","FORM_NAME","PrescriptionService","submitPrescription","PRESCRIPTION_SAISIE","FORMULAIRE_ORDONNANCE","FormHandler_FormHandler","recapitulerPrescription","recapDosage","quantite","forme","frequence","duree","FormInput","openPopup","closePopup","clickInput","indexDisplayError","onMouseOver","onMouseOut","Popup","open","trigger","mouseLeaveDelay","hoverable","on","OrdonnanceForm","FormInput_FormInput","OrdonnanceService","submitOrdonnance","infosPatient","_setOrdonnanceEmise","setOrdonnanceEmise","history","preventDefault","libelleDouleur","OrdonnanceForm_OrdonnanceForm","margin","recapitulerInfosPatient","ORDONNANCE_EMISE","fileURL","href","rel","icon","labelPosition","CONFIRMATION_ORDONNANCE","HISTORIQUE","LIENS","routesConfig","path","ArborescenceService","FicheDouleurService","OrdonnanceConfirm","getRoutePath","route","pathParams","generatePath","element","push","INFOS_TEST","urls","sent","_callee4","_context4","getOrdonnanceEmise","_getOrdonnanceEmise","_callee5","pdfOrdonnance","_context5","responseType","Blob","URL","createObjectURL","window","navigator","msSaveOrOpenBlob","reducers","combineReducers","action","formReducer","createStore","__REDUX_DEVTOOLS_EXTENSION__","namespace","dispatch","MenuBar","BurgerMenu","Accueil","Test","tableau","nom","ReactDOM","msgBienvenue","es","react_router_dom","MenuBar_MenuBar","color","textAlign","inverted","dividing","paddingTop","paddingBottom","position","left","zIndex","background","minWidth","Segment","overflow","react_router","exact","components_Accueil","Test_Test","document","getElementById"],"mappings":"8WAEaA,EAAU,CACtBC,qBAAsB,yBACtBC,aAAc,SAAAC,GAAS,MAAI,aAAeA,GAC1CC,mBAAoB,wBACpBC,gBAAiB,SAAAC,GAAY,MAAI,uBAAyBA,IAG9CC,EAAaC,yCAEpBC,EAAgB,CACrB,yBAA0B,mBAAoB,kBAC9C,wBAAyB,yBAA0B,oBAGvCC,EACJ,SADIA,EAEN,OAFMA,EAGN,OAGMC,EAAgB,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAOC,EAAKC,GAAZ,IAAAC,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAC3BJ,EAAS,GADkBE,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGxBC,IAAMC,IAAIR,EAAKC,GAAQQ,KAAK,SAAAC,GACjCR,EAASS,EAAsBD,KAJF,OAAAN,EAAAE,KAAA,eAAAF,EAAAC,KAAA,EAAAD,EAAAQ,GAAAR,EAAA,SAO9BF,EAASW,EAAkBT,EAAAQ,IAPG,cAAAR,EAAAU,OAAA,SASxBZ,GATwB,yBAAAE,EAAAW,SAAAhB,EAAA,iBAAH,gBAAAiB,EAAAC,GAAA,OAAAxB,EAAAyB,MAAAC,KAAAC,YAAA,GAYhBC,EAAe,eAAAC,EAAA5B,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAyB,EAAOC,EAAQxB,EAAKC,GAApB,IAAAC,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAsB,GAAA,cAAAA,EAAApB,KAAAoB,EAAAnB,MAAA,cAC1BJ,EAAS,GADiBuB,EAAApB,KAAA,EAAAoB,EAAAnB,KAAA,EAGvBC,IAAMmB,KAAK1B,EAAKwB,EAAQvB,GAAQQ,KAAK,SAAAC,GAC1CR,EAASS,EAAsBD,KAJH,OAAAe,EAAAnB,KAAA,eAAAmB,EAAApB,KAAA,EAAAoB,EAAAb,GAAAa,EAAA,SAO7BvB,EAASW,EAAkBY,EAAAb,IAPE,cAAAa,EAAAX,OAAA,SASvBZ,GATuB,yBAAAuB,EAAAV,SAAAQ,EAAA,iBAAH,gBAAAI,EAAAC,EAAAC,GAAA,OAAAP,EAAAJ,MAAAC,KAAAC,YAAA,GAYtBP,EAAqB,SAAAiB,GAO1B,OANAC,QAAQC,IAAI,UAAYC,KAAKC,UAAUJ,IACxB,CACdK,KAAM,CAAEL,MAAOA,EAAMM,SACrBC,KAAM9C,EACN+C,YAAa,qBAKT3B,EAAqB,eAAA4B,EAAA7C,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAA0C,EAAM9B,GAAN,IAAAR,EAAAoC,EAAAG,EAAAC,EAAA,OAAA9C,EAAAC,EAAAM,KAAA,SAAAwC,GAAA,cAAAA,EAAAtC,KAAAsC,EAAArC,MAAA,YACzBJ,EAASQ,GACFyB,KAFkB,CAAAQ,EAAArC,KAAA,YAGtBgC,EAAcpC,EAAOiC,KAAKE,KAAOnC,EAAOiC,KAAKE,KAAOnC,EAAO0C,QAAQ,gBACzE1C,EAAOoC,YAAcA,EACrBpC,EAAOmC,KAAO9C,GACV+C,IAAgBA,EAAYO,cAAcC,WAAW,UACrDxD,EAAcyD,KAAK,SAAAV,GAAI,OAAIC,EAAYO,cAAcC,WAAWT,KAPxC,CAAAM,EAAArC,KAAA,aAQvBJ,EAAOiC,KAAKa,KARW,CAAAL,EAAArC,KAAA,gBAAAqC,EAAArC,KAAA,EAUpBJ,EAAOiC,KAAKa,OAAOvC,KAAK,SAAAuC,GAAI,OAAIP,EAAaO,IAVzB,OAW1B,IACON,EAAMT,KAAKgB,MAAMR,GACvBvC,EAAOiC,KAAOO,EACb,MAAOZ,GACRC,QAAQC,IAAI,UAAYF,GACxB5B,EAAOiC,KAAOM,EACdvC,EAAOmC,KAAO9C,EAjBW,QAAAoD,EAAArC,KAAA,iBAqB3BJ,EAAOmC,KAAO9C,EArBa,eAAAoD,EAAA7B,OAAA,SAwBtBZ,GAxBsB,yBAAAyC,EAAA5B,SAAAyB,MAAH,gBAAAU,GAAA,OAAAX,EAAArB,MAAAC,KAAAC,YAAA,GCtDd+B,EAAY,CACxBC,UAAW,WACVC,kBAAmB,mBACnBC,mBAAoB,gBAMf,SAASC,EAAcC,EAAUC,GACtCC,GAAaF,EAAUC,GAGlB,SAASE,EAAgBH,GAC9B,IAAII,EAAYlE,OAAOmE,OAAO,GAAIC,GAAS,YAAYN,IACnDO,EAAW,GACTC,EAAStE,OAAOuE,KAAKL,GACvBM,MAAMC,QAAQH,IAChBA,EAAOI,OAAO,SAAAC,GAAK,OAAKA,EAAMvB,WAAW,YAAWwB,QAClD,SAAAD,GACEN,EAAQrE,OAAA6E,EAAA,EAAA7E,CAAA,GAAOqE,EAAPrE,OAAA8E,EAAA,EAAA9E,CAAA,GAAkB2E,EAAST,EAAUS,OAInDX,GAAaF,EAAUO,GAIlB,SAASU,EAAcjB,EAAUkB,GACtC,IAAId,EAAYlE,OAAOmE,OAAO,GAAIC,GAAS,YAAYN,IACjDQ,EAAStE,OAAOuE,KAAKS,GACvBR,MAAMC,QAAQH,IAChBA,EAAOI,OACL,SAAAC,GAAK,OAAIA,EAAMvB,WAAWU,EAAW,OAASa,EAAMM,SAAS,OAC7DL,QACA,SAAAD,GACET,EAASlE,OAAA6E,EAAA,EAAA7E,CAAA,GAAOkE,EAAPlE,OAAA8E,EAAA,EAAA9E,CAAA,GAAmB,SAAW2E,EAAMO,QAAQpB,EAAW,IAAK,IAAOkB,EAAOL,OAIzFX,GAAaF,EAAUI,gGCuBViB,MA/Df,SAAkBC,GAAO,IAEdC,EAAmED,EAAnEC,UAAWC,EAAwDF,EAAxDE,SAAUC,EAA8CH,EAA9CG,MAAOC,EAAuCJ,EAAvCI,OAAQC,EAA+BL,EAA/BK,SAAUC,EAAqBN,EAArBM,SAAaC,EAF7C3F,OAAA4F,EAAA,EAAA5F,CAEqDoF,EAFrD,iEAIfS,EACFC,EAAA3F,EAAA4F,cAAA,4EAAAC,OAEsBR,EAASA,EAAS,IAAI,QAF5C,iCAAAQ,OAGqBT,EAAQA,EAAQ,IAAI,QAHzC,6BAAAS,OAIiBT,EAAQA,EAAQ,IAAI,QAJrC,2dAAAS,OAmBoBP,GAAsB,WAnB1C,oCAAAO,OAoBsBP,EAAoB,QAAT,OApBjC,sFAAAO,OAuBoBN,GAAsB,WAvB1C,mCAAAM,OAwBsBN,EAAoB,QAAT,OAxBjC,+BA6BAO,GAAY,EAEVC,EAAU,SAAAC,GACRF,GACAE,EAAEC,OAAOf,UAAY,QACrBc,EAAEC,OAAOC,gBAAgBhB,UAAYA,GAAuB,GAC5DY,GAAY,IAEZE,EAAEC,OAAOf,UAAY,SACrBc,EAAEC,OAAOC,gBAAgBhB,UAAzB,GAAAW,OAAwCX,EAAYA,EAAY,IAAM,GAAtE,aACAY,GAAY,IAgBpB,OAVQH,EAAA3F,EAAA4F,cAACD,EAAA3F,EAAMmG,SAAP,KACKT,EACDC,EAAA3F,EAAA4F,cAAA,MAAA/F,OAAAmE,OAAA,CAAKkB,UAAS,GAAAW,OAAKX,EAAYA,EAAY,IAAM,GAAnC,cAAsDM,GAC/DL,GAELQ,EAAA3F,EAAA4F,cAAA,OAAKG,QAASA,EAASb,UAAU,aCvD5BkB,cAEpB,SAAAA,EAAYnB,GAAO,IAAAoB,EAAA,OAAAxG,OAAAyG,EAAA,EAAAzG,CAAAyB,KAAA8E,IAClBC,EAAAxG,OAAA0G,EAAA,EAAA1G,CAAAyB,KAAAzB,OAAA2G,EAAA,EAAA3G,CAAAuG,GAAAK,KAAAnF,KAAM2D,KAOPyB,gBAAkB,SAACC,GAClB,IAAIC,EAAgBP,EAAKQ,MAAMC,YAE9BF,EADGA,IAAkBD,GACJ,EAEDA,EAEjBN,EAAKU,SAAS,CAAED,YAAaF,KAb7BP,EAAKK,gBAAkBL,EAAKK,gBAAgBM,KAArBnH,OAAAoH,EAAA,EAAApH,CAAAwG,IACvBA,EAAKQ,MAAQ,CACZC,aAAc,GAJGT,wEAkBV,IAAAa,EAAA5F,KAAA6F,EACyC7F,KAAK2D,MAA9CmC,EADAD,EACAC,OAAQC,EADRF,EACQE,cAAkBC,EAD1BzH,OAAA4F,EAAA,EAAA5F,CAAAsH,EAAA,4BAER,OAAI9C,MAAMC,QAAQ+C,GACVA,EAAcE,IAAI,SAACC,EAAWb,GACpC,OAAOS,EAAOvH,OAAA6E,EAAA,EAAA7E,CAAA,CAAE6G,gBAAiBQ,EAAKR,iBAAoBQ,EAAKL,MAAlD,CAAyDW,YAAWb,QAAOW,kBAGlFF,EAAOvH,OAAA6E,EAAA,EAAA7E,CAAA,CAAE6G,gBAAiBpF,KAAKoF,iBAAoBpF,KAAKuF,MAAlD,CAAyDW,UAAWH,EAAeV,MAAO,EAAGW,uBA3B9DG,IAAMC,WCKtC,SAASC,EAAT/H,GAAwD,IAAhCgI,EAAgChI,EAAhCgI,cAAkBN,EAAczH,OAAA4F,EAAA,EAAA5F,CAAAD,EAAA,mBAOtE,OAAO+F,EAAA3F,EAAA4F,cAACiC,EAADhI,OAAAmE,OAAA,CAAmBoD,OAN1B,SAAA3F,GAAuF,IAA9D+F,EAA8D/F,EAA9D+F,UAAWb,EAAmDlF,EAAnDkF,MAAOD,EAA4CjF,EAA5CiF,gBAAiBI,EAA2BrF,EAA3BqF,YAAaQ,EAAc7F,EAAd6F,WACxE,OACC3B,EAAA3F,EAAA4F,cAACkC,EAADjI,OAAAmE,OAAA,CAAS+D,IAAKpB,EAAOqB,aAAc,SAACC,GAAD,OAAWvB,EAAgBC,IAAQuB,SAAUvB,IAAUG,EACzFqB,QAASX,EAAUW,QAASC,qBAAsBZ,EAAUY,sBAA0Bd,KAGxCD,cAAeO,GAAmBN,IAGpF,SAASQ,EAATpF,GAA4F,IAAzEyF,EAAyEzF,EAAzEyF,QAASC,EAAgE1F,EAAhE0F,qBAAsBF,EAA0CxF,EAA1CwF,SAAUF,EAAgCtF,EAAhCsF,aAAiBV,EAAezH,OAAA4F,EAAA,EAAA5F,CAAA6C,EAAA,8DAkB3F,OAAO2F,EAAU,CAAEC,MAAOH,EAASI,QADnB5C,EAAA3F,EAAA4F,cAACiC,EAADhI,OAAAmE,OAAA,CAAmBoD,OAfnC,SAAAoB,GAAkG,IAA9DhB,EAA8DgB,EAA9DhB,UAAWb,EAAmD6B,EAAnD7B,MAAOD,EAA4C8B,EAA5C9B,gBAAiBI,EAA2B0B,EAA3B1B,YAAaQ,EAAckB,EAAdlB,WACnF,OAAIE,EAAUY,sBAAwBZ,EAAUY,qBAAqBK,OAAS,EAG5E9C,EAAA3F,EAAA4F,cAACkC,EAADjI,OAAAmE,OAAA,CAAS+D,IAAKpB,EAAOqB,aAAc,SAACC,GAAD,OAAWvB,EAAgBC,IAAQuB,SAAUvB,IAAUG,EACzFqB,QAASX,EAAUW,QAASC,qBAAsBZ,EAAUY,sBAA0Bd,IAKvF3B,EAAA3F,EAAA4F,cAAC8C,EAAD7I,OAAAmE,OAAA,CAAS+D,IAAKpB,EAAOgC,SAAU,SAACV,GAAD,OAAWvB,EAAgBC,IAAQuB,SAAUvB,IAAUG,EACrFqB,QAASX,EAAUW,QAASS,eAAgBpB,EAAUoB,eAAgBzJ,UAAWqI,EAAUqB,IAAQvB,KAIlCD,cAAee,GAA0Bd,IAClEY,WAAUF,iBAIvD,SAASU,EAATI,GAAkG,IAE3ExG,EAFH6F,EAA8EW,EAA9EX,QAASS,EAAqEE,EAArEF,eAAgBzJ,EAAqD2J,EAArD3J,UAAW4J,EAA0CD,EAA1CC,mBAAoBJ,EAAsBG,EAAtBH,SAAUT,EAAYY,EAAZZ,SAC/Ec,EAAc,CAAEC,MAAO,QAASC,SAAU,OAAQC,UAAW,QAASC,aAAc,MAAOC,YAAa,MAiB9G,OAAOhB,EAAU,CAAEC,MAAOH,EAASI,SAhBbjG,EAeOsG,GAZ1BjD,EAAA3F,EAAA4F,cAACD,EAAA3F,EAAMmG,SAAP,KACCR,EAAA3F,EAAA4F,cAAC0D,EAAA,EAAD,CAAQC,SAAO,EAACC,KAAK,OAAO9D,MAAOsD,EAAajD,QAAS,kBAAMgD,EAAmB5J,KAAlF,sBAGAwG,EAAA3F,EAAA4F,cAAC6D,EAAD,CAAUpE,OAAO,OAAOC,SAAS,2BAAsBC,SAAS,6BAC/DI,EAAA3F,EAAA4F,cAAA,OAAKV,UAAU,aAAa5C,KAKzB,GAGoC4F,WAAUF,aAAcW,IAIrE,SAASN,EAATqB,GAA+D,IAA1CpB,EAA0CoB,EAA1CpB,MAAOC,EAAmCmB,EAAnCnB,QAASL,EAA0BwB,EAA1BxB,SAAUF,EAAgB0B,EAAhB1B,aAC9C,OACCrC,EAAA3F,EAAA4F,cAAC+D,EAAA,EAAD,CAAWC,QAAM,EAAC1E,UAAYgD,EAAwB,GAAb,YACxCvC,EAAA3F,EAAA4F,cAAC+D,EAAA,EAAUE,MAAX,CAAiBC,OAAQ5B,EAAUvB,MAAO,EAAGZ,QAASiC,GACrDrC,EAAA3F,EAAA4F,cAACmE,EAAA,EAAD,CAAMC,KAAK,aACV1B,GAEF3C,EAAA3F,EAAA4F,cAAC+D,EAAA,EAAUM,QAAX,CAAmBH,OAAQ5B,GAAWK,0BCxB1B2B,EAxCO,SAAUjF,GAAO,IAKvBkF,EAHNC,EAA4CnF,EAA5CmF,aAAchD,EAA8BnC,EAA9BmC,OAAQjC,EAAsBF,EAAtBE,SAAaK,EAFN3F,OAAA4F,EAAA,EAAA5F,CAEeoF,EAFf,sCAI/BoF,EAAS1E,EAAA3F,EAAA4F,cAAC0E,EAAA,EAAD,CAAQR,QAAM,EAACpE,MAAO,CAAE6E,IAAK,QAA7B,8CAET1F,EAAS,SAAA2F,GACb,GAAInG,MAAMC,QAAQkG,GAChB,OAAO7E,EAAA3F,EAAA4F,cAAC6E,EAAA,EAAD5K,OAAAmE,OAAA,CAAS/B,OAAK,GAAKuD,GACxBgF,EAAUjD,IACR,SAACtF,EAAO0E,GACN,IAAIoB,EAAMpB,EAAOpE,EAAUN,EAO3B,OANIA,EAAM8F,MACRA,EAAM9F,EAAM8F,KAEV9F,EAAMM,UACRA,GAAWN,EAAM8F,IAAM9F,EAAM8F,IAAM,KAAOpB,EAAQ,MAAQ1E,EAAMM,SAE3DoD,EAAA3F,EAAA4F,cAAA,OAAKmC,IAAKA,GAAMxF,OAOjC,OAAK6H,EAEMA,EAAanI,OAtBVkI,EAuBCC,EAAanI,MAvBE4C,EAAO,CAACsF,KAwB3BC,EAAavF,OACfA,EAAOuF,EAAavF,QAClBuC,GAEAjC,GAGFQ,EAAA3F,EAAA4F,cAAA,OAAKV,UAAU,UAASS,EAAA3F,EAAA4F,cAAA,kBAVxByE,GCVL1C,eAEF,SAAAA,EAAY1C,GAAO,IAAAoB,EAAA,OAAAxG,OAAAyG,EAAA,EAAAzG,CAAAyB,KAAAqG,IACftB,EAAAxG,OAAA0G,EAAA,EAAA1G,CAAAyB,KAAAzB,OAAA2G,EAAA,EAAA3G,CAAA8H,GAAAlB,KAAAnF,KAAM2D,KAQV8D,mBAAqB,SAAC5J,GAClBuL,GAAUrE,EAAKpB,MAAfyF,CAAsBC,GAAOC,cAAe,CAACzL,eAR7CkH,EAAK0C,mBAAmB/B,KAAxBnH,OAAAoH,EAAA,EAAApH,CAAAwG,IAFeA,oFCJhB,WAAPwE,GAAAxJ,MAAAC,KAAAC,WDUQuJ,oCAQA,OAAOnF,EAAA3F,EAAA4F,cAACmF,EAAD,CAAeX,aAAc9I,KAAK2D,MAAM2C,eAC3CjC,EAAA3F,EAAA4F,cAAA,WACID,EAAA3F,EAAA4F,cAAC6E,EAAA,EAAD,CAASO,MAAI,GAAb,6EACArF,EAAA3F,EAAA4F,cAACqF,EAADpL,OAAAmE,OAAA,GAA2B1C,KAAK2D,MAAhC,CAAuC8D,mBAAoBzH,KAAKyH,+BAnBrDrB,aA6BZwD,eAjCS,SAAAC,GAAQ,MAAK,CACjCvD,cAAeuD,EAASC,WAAWC,GAAUC,gBAgClCJ,CAAyBvD,wBEzCzB,SAAS4D,GAAsBtG,GAAO,IAE3CuG,EAAwDvG,EAAxDuG,cAAeC,EAAyCxG,EAAzCwG,oBAAqBC,EAAoBzG,EAApByG,gBAExCC,EAAU,WACZ,IAAIC,EAAsB,KAM1B,OALIH,EACFG,EAAsBH,EAAoBG,oBACjCJ,GAAiBA,EAAc/C,OAAS,IACjDmD,EAAsBJ,EAAc,GAAGI,qBAErCA,EACK,CACLzD,QAASyD,EAAoBzD,QAC7B0D,MAAOD,EAAoBhD,eAC3BkD,gBAAiBF,EAAoBE,iBAGlC,IAETH,EAAUA,IAEV,IAAII,EAAUP,GAAiBA,EAAc/C,OAAS,EAAI+C,EAAc/C,OAAS,EAE7EuD,EAAc,WAChB,OAAIP,EAEA9F,EAAA3F,EAAA4F,cAAC6E,EAAA,EAAD,CAASO,MAAI,GAAb,0CAIU,IAAZe,EACEpG,EAAA3F,EAAA4F,cAAC6E,EAAA,EAAD,CAASwB,SAAO,GAAhB,iEACAtG,EAAA3F,EAAA4F,cAAC6E,EAAA,EAAD,CAASO,MAAI,GAAb,IAAAnF,OACOkG,EADP,eAAAlG,OAC4BkG,EAAU,EAAI,2BAA0B,wBADpE,KAEEpG,EAAA3F,EAAA4F,cAAA,WAFF,yEAMNoG,EAAcA,IAEd,IAAIE,GACDT,GAAuBE,EAAQG,iBAAmBH,EAAQG,gBAAgBrD,OAAS,EAClF9C,EAAA3F,EAAA4F,cAAC6E,EAAA,EAAD,CAASwB,SAAO,EAAC/G,UAAU,aACzBS,EAAA3F,EAAA4F,cAACuG,GAAA,EAAD,CAASC,YAAU,EAACC,QAAM,GAAC1G,EAAA3F,EAAA4F,cAAC0G,EAAA,EAAD,CAAQC,GAAG,MAAX,cAC1BZ,EAAQG,iBACE,GAuBXU,EAAqB,SAACC,EAAc9F,GACxC,IAAM+F,EAAc,SAAAC,GAElB,OADaA,EAAYC,MAAM,OACjBrF,IACZ,SAAAsF,GAAK,OAAKA,EAAQ,UAGtB,GAAIJ,EAAaK,sBAAsBrE,OAAS,EAC9C,YAAcsE,IAAVpG,EAGAhB,EAAA3F,EAAA4F,cAAA,OAAKV,UAAU,aACbS,EAAA3F,EAAA4F,cAACoH,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,aAAaC,UAAU,MAAMC,WAAW,SAASC,QAAS,GAChF1H,EAAA3F,EAAA4F,cAACoH,GAAA,EAAD,CAAMM,MAAI,GACR3H,EAAA3F,EAAA4F,cAAC0D,EAAA,EAAD,CAAQE,KAAK,OAAOD,SAAO,EAACxD,QAAS,kBAAM2F,EAAgB/E,KAA3D,cACcA,EAAQ,IAGxBhB,EAAA3F,EAAA4F,cAACoH,GAAA,EAAD,CAAMM,MAAI,GAAV,MACEb,EAAaK,sBAAsBvF,IACjC,SAAAgG,GAAa,OAAI5H,EAAA3F,EAAA4F,cAAA,SAAI8G,EAAYa,EAAcZ,mBAOvDhH,EAAA3F,EAAA4F,cAAA,OAAKV,UAAU,aAAf,MACEuH,EAAaK,sBAAsBvF,IACjC,SAAAgG,GAAa,OAAI5H,EAAA3F,EAAA4F,cAAA,SAAI8G,EAAYa,EAAcZ,kBAO3D,OACEhH,EAAA3F,EAAA4F,cAAA,WACED,EAAA3F,EAAA4F,cAAA,UAAK+F,EAAQxD,SACZ6D,EA1DCP,EAEA9F,EAAA3F,EAAA4F,cAAC4H,EAAA,SAAD,KACGhB,EAAmBf,GACpB9F,EAAA3F,EAAA4F,cAACuG,GAAA,EAAD,OAGKJ,EAAU,EACZP,EAAcjE,IACnB,SAACkF,EAAc9F,GAAf,OACEhB,EAAA3F,EAAA4F,cAAC4H,EAAA,SAAD,KACGhB,EAAmBC,EAAc9F,GAClChB,EAAA3F,EAAA4F,cAACuG,GAAA,EAAD,cALD,EAqDJD,GC9GP,IAIMuB,eAEF,SAAAA,EAAYxI,GAAO,IAAAoB,EAAA,OAAAxG,OAAAyG,EAAA,EAAAzG,CAAAyB,KAAAmM,IACfpH,EAAAxG,OAAA0G,EAAA,EAAA1G,CAAAyB,KAAAzB,OAAA2G,EAAA,EAAA3G,CAAA4N,GAAAhH,KAAAnF,KAAM2D,KAgBVyI,kBAAoB,SAAC/G,IFHlB,SAAgC8F,GACtC,IAAI5F,EAAQ8G,GAAM1J,WAAWmH,WACzBwC,EAAa/G,GAASA,EAAMwE,GAAUwC,sBAAwBhH,EAAMwE,GAAUwC,sBAAwB,GACtGzL,KAAKC,UAAUuL,KAAgBxL,KAAKC,UAAUoK,IACjD/I,EAAcJ,EAAUE,kBAAmB,MAE5CK,GAAawH,GAAUwC,qBAAsBpB,GEFtCqB,CAAuBzH,EAAKpB,MAAMuG,cAAc7E,IAChD+D,GAAUrE,EAAKpB,MAAfyF,CAAsBC,GAAOoD,0BAjB7B1H,EAAKqH,kBAAkB1G,KAAvBnH,OAAAoH,EAAA,EAAApH,CAAAwG,IAFeA,oFFShB,SAAPjF,GAAA4M,GAAA3M,MAAAC,KAAAC,WEFQ0M,CADoB3M,KAAK4M,iBAAnB/O,oDAKN,OAAImC,KAAK2D,MAAMkJ,MACJ7M,KAAK2D,MAAMkJ,MAAMC,OAErB,oCASP,OACIzI,EAAA3F,EAAA4F,cAACmF,EAAD,CAAeX,aAAc9I,KAAK2D,MAAMuG,eACpC7F,EAAA3F,EAAA4F,cAAC2F,GAAD,CAAuBG,gBAAiBpK,KAAKoM,kBAAmBlC,cAAelK,KAAK2D,MAAMuG,wBA3B/E9D,aAoCZwD,eAxCS,SAAAC,GAAQ,MAAK,CACjCK,cAAeL,EAASC,WAAWC,GAAUgD,iBAuClCnD,CAAyBuC,kCCpC3Ba,GAAc,SAAA9J,GAAK,OAC9BmB,EAAA3F,EAAA4F,cAAC2I,GAAA,EAAKC,MAAN,CACEC,QAASjK,EAAMkK,MAAMC,QAAUnK,EAAMoK,WACrCC,MAAOrK,EAAMqK,MACb7E,KAAMxF,EAAMkK,MAAM1E,KAClB8E,SAAU,SAAC9I,EAADvE,KAAMgN,QAAN,OAAoBjK,EAAMkK,MAAMI,SAAStK,EAAMoK,gBAIhDG,GAAe,SAAAvK,GAAK,OAC/BmB,EAAA3F,EAAA4F,cAAC2I,GAAA,EAAKS,OAAN,CACEH,MAAOrK,EAAMqK,MACb7E,KAAMxF,EAAMkK,MAAM1E,KAClB8E,SAAU,SAAC9I,EAADtD,GAAA,IAAMiM,EAANjM,EAAMiM,MAAN,OAAkBnK,EAAMkK,MAAMI,SAASH,IACjDM,QAASzK,EAAMyK,QACfC,YAAa1K,EAAM0K,YACnBP,MAAOnK,EAAMkK,MAAMC,SAIVQ,GAAiB,SAAA3K,GAAK,OACjCmB,EAAA3F,EAAA4F,cAAC2I,GAAA,EAAKa,SAANvP,OAAAmE,OAAA,GACMQ,EAAMkK,MADZ,CAEEG,MAAOrK,EAAMqK,MACbK,YAAa1K,EAAM0K,gBCpCR,SAASG,GAAaC,GAoBnChO,KAAKwL,sBAAwBwC,EAAuBA,EAAqBxC,sBAAwB,GAEjGxL,KAAKiO,cAAgBjO,KAAKwL,sBAAsBrE,OAEhDnH,KAAKkO,YAAc,SAASC,GAC1B,OAAInO,KAAKwL,sBAAsB2C,IAAkBnO,KAAKwL,sBAAsB2C,GAAeC,eAClFpO,KAAKwL,sBAAsB2C,GAAeC,eAAenI,IAAI,SAAAoI,GAAa,OAAIA,EAAcC,UAE9F,MAGTtO,KAAKuO,wBAA0B,SAASJ,GACtC,IAAMK,EAAWxO,KAAKkO,YAAYC,GAClC,OAAIK,EACKA,EAASvI,IAAI,SAAAqI,GAAO,OAAIA,EAAQG,cAElC,UCyGIC,eAnIb,SAAAA,EAAY/K,GAAO,IAAAoB,EAAA,OAAAxG,OAAAyG,EAAA,EAAAzG,CAAAyB,KAAA0O,IAEjB3J,EAAAxG,OAAA0G,EAAA,EAAA1G,CAAAyB,KAAAzB,OAAA2G,EAAA,EAAA3G,CAAAmQ,GAAAvJ,KAAAnF,KAAM2D,KACDwG,oBAAsB,IAAI4D,GAAapK,EAAMwH,cAClDpG,EAAK4J,kBAAoBhL,EAAMgL,kBAC/B5J,EAAK6J,YAAc7J,EAAKoF,oBAAoBqB,sBAC5CzG,EAAK8J,oBAAsB9J,EAAK6J,YAAY3I,IAC1C,SAAC6I,EAAYX,GAAb,OAA+BpJ,EAAKoF,oBAAoBoE,wBAAwBJ,GAAeY,KAAK,SAPrFhK,wEAWV,IAAAa,EAAA5F,KAEP,OACEqE,EAAA3F,EAAA4F,cAAC2I,GAAA,EAAD,CAAM/E,KAAK,QAAQ8G,SAAU,kBAAMpJ,EAAKjC,MAAMqL,SAASpJ,EAAKqJ,wBAE1D5K,EAAA3F,EAAA4F,cAAC6E,EAAA,EAAD,CAASO,MAAI,GAAb,kEAGE1J,KAAKmK,qBAAuBnK,KAAKmK,oBAAoBqB,sBAAsBvF,IACzE,SAAC6I,EAAYX,GAAb,OAA+BvI,EAAKsJ,qBAAqBf,KAI7D9J,EAAA3F,EAAA4F,cAAC6K,GAAA,EAAD,CACEjJ,UAAWkJ,GACX7B,MAAM,kBACN7E,KAAK,kBACLkF,YAAY,sFAGdvJ,EAAA3F,EAAA4F,cAAC6E,EAAA,EAAD,KACE9E,EAAA3F,EAAA4F,cAACuG,GAAA,EAAD,CAASC,YAAU,EAACC,QAAM,GAAC1G,EAAA3F,EAAA4F,cAAC0G,EAAA,EAAD,CAAQC,GAAG,MAAX,qBAC1BjL,KAAK2O,kBAAkB3O,KAAKiP,uBAG/B5K,EAAA3F,EAAA4F,cAAC2I,GAAA,EAAKoC,MAAN,CAAYC,QAAM,GAChBjL,EAAA3F,EAAA4F,cAAC2I,GAAA,EAAKjF,OAAN,CAAa9G,KAAK,SAAS+G,SAAO,GAAlC,WACA5D,EAAA3F,EAAA4F,cAAC2I,GAAA,EAAKjF,OAAN,CAAavD,QAASzE,KAAK2D,MAAM4L,OAAjC,0DAOapB,GAEnB,OAEE9J,EAAA3F,EAAA4F,cAACD,EAAA3F,EAAMmG,SAAP,KAEER,EAAA3F,EAAA4F,cAAA,OAAKF,MAAO,CAAEoL,QAAS,WAAYnL,EAAA3F,EAAA4F,cAACmL,GAAA,EAAD,KAAQzP,KAAK6O,oBAAoBV,KAEpE9J,EAAA3F,EAAA4F,cAAA,SACEoE,KAAM,aAAeyF,EACrBjN,KAAK,SACLmE,MAAO8I,EACPd,MAAOrN,KAAK6O,oBAAoBV,KAGlC9J,EAAA3F,EAAA4F,cAACoH,GAAA,EAAD,CAAMC,WAAS,EAACI,QAAS,GAEtB/L,KAAKmK,oBAAoB+D,YAAYC,GAAelI,IAAI,SAACqI,EAASoB,GAAV,OACvDrL,EAAA3F,EAAA4F,cAACoH,GAAA,EAAD,CAAMM,MAAI,EAAC2D,GAAI,GACbtL,EAAA3F,EAAA4F,cAAC6K,GAAA,EAAD,CAAOjJ,UAAW+G,KAAK2C,MAAOrC,MAAsB,IAAfmC,EAAmB,SAAW,GAAIhH,KAAM,SAAWyF,EAAgBuB,EAAY9B,YAAaU,EAAQG,YAAaoB,UAAQ,OAIlKxL,EAAA3F,EAAA4F,cAACoH,GAAA,EAAD,CAAMM,MAAI,EAAC2D,GAAI,GACbtL,EAAA3F,EAAA4F,cAAC6K,GAAA,EAAD,CAAOjJ,UAAW+G,KAAK2C,MAAOrC,MAAM,sBAAmB7E,KAAM,WAAayF,EAAeP,YAAY,kBAAeiC,UAAQ,KAE9HxL,EAAA3F,EAAA4F,cAACoH,GAAA,EAAD,CAAMM,MAAI,EAAC2D,GAAI,GACbtL,EAAA3F,EAAA4F,cAAC6K,GAAA,EAAD,CAAOjJ,UAAWkJ,GAA0B7B,MAAM,QAAQ7E,KAAM,QAAUyF,EAAeP,YAAY,kBACnGD,QAAS,CACP,CAAElH,IAAK,SAAU5E,KAAM,cAAYwL,MAAO,kBAC1C,CAAE5G,IAAK,SAAU5E,KAAM,YAAUwL,MAAO,oBAI9ChJ,EAAA3F,EAAA4F,cAACoH,GAAA,EAAD,CAAMM,MAAI,EAAC2D,GAAI,GACbtL,EAAA3F,EAAA4F,cAAC6K,GAAA,EAAD,CAAOjJ,UAAW+G,KAAK2C,MAAOrC,MAAM,eAAY7E,KAAM,YAAcyF,EAAeP,YAAY,mBAAmBiC,UAAQ,KAE5HxL,EAAA3F,EAAA4F,cAACoH,GAAA,EAAD,CAAMM,MAAI,EAAC2D,GAAI,GACbtL,EAAA3F,EAAA4F,cAAC6K,GAAA,EAAD,CAAOjJ,UAAW+G,KAAK2C,MAAOrC,MAAM,WAAQ7E,KAAM,QAAUyF,EAAeP,YAAY,cAAciC,UAAQ,oDAiCrH,IAxBmB,IAAAC,EAAA9P,KAEb+P,EAAkB,SAAC5B,GACvB,IAAMK,EAAWsB,EAAK3F,oBAAoB+D,YAAYC,GACtD,OAAIpL,MAAMC,QAAQwL,GACQA,EAASvI,IAC/B,SAACqI,EAASoB,GACR,IAAMM,EAASF,EAAKnM,MAAM,SAAWwK,EAAgBuB,GACrD,MAAO,CAAEjB,YAAaH,EAAQG,YAAauB,YAK1C,MAGHC,EAAe,CAAC,WAAY,QAAS,YAAa,SAEpDC,EAAgB,CAClBjC,cAAejO,KAAK4O,YAAYzH,OAChCyH,YAAa,GACbpE,gBAAiBxK,KAAK2D,MAAM6G,iBArBX2F,EAAA,SAwBVhC,GACP+B,EAActB,YAAYT,GAAiB,CACzCtH,QAASiJ,EAAKjB,oBAAoBV,GAClCK,SAAUuB,EAAgB5B,IAE5B8B,EAAa9M,QAAQ,SAAAiN,GACnBF,EAActB,YAAYT,GAAeiC,GAASN,EAAKnM,MAAMyM,EAAQjC,MANhEA,EAAgB,EAAGA,EAAgB+B,EAAcjC,cAAeE,IAAiBgC,EAAjFhC,GAUT,OAAO+B,SAjIoB/J,IAAMC,qBCFtB,SAASiK,GAAT/R,GAA0E,IAAnD4H,EAAmD5H,EAAnD4H,UAAW7D,EAAwC/D,EAAxC+D,SAAUkN,EAA8BjR,EAA9BiR,MAAO1L,EAAuBvF,EAAvBuF,SAAayM,EAAU/R,OAAA4F,EAAA,EAAA5F,CAAAD,EAAA,6CAEpFiS,EAAmBrK,GAAwBrC,EAE/C,OADA0M,EAAmBC,GAAWD,EAAkBlO,EAAUkN,GACnDlL,EAAA3F,EAAA4F,cAACiM,EAADhS,OAAAmE,OAAA,GAAsBL,EAAciO,GAApC,IAA8CzM,EAA9C,KAGD,SAAS2M,GAAWD,EAAkBlO,EAAUkN,GAEtD,IAgBMc,EAlBuD,SAAAI,GAAA,SAAAJ,IAAA,OAAA9R,OAAAyG,EAAA,EAAAzG,CAAAyB,KAAAqQ,GAAA9R,OAAA0G,EAAA,EAAA1G,CAAAyB,KAAAzB,OAAA2G,EAAA,EAAA3G,CAAA8R,GAAAtQ,MAAAC,KAAAC,YAAA,OAAA1B,OAAAmS,EAAA,EAAAnS,CAAA8R,EAAAI,GAAAlS,OAAAoS,EAAA,EAAApS,CAAA8R,EAAA,EAAA5J,IAAA,oBAAA4G,MAAA,WAqBvDkC,IAAmB,IAAVA,GACZnN,EAAcC,EAAU,QAtBkC,CAAAoE,IAAA,qBAAA4G,MAAA,SA0BzCuD,GACdrB,IAAmB,IAAVA,EACZnN,EAAcC,EAAU,MACdvB,KAAKC,UAAU6P,EAAUvO,MAAevB,KAAKC,UAAUf,KAAK2D,MAAMtB,KAC5ED,EAAcC,EAAUrC,KAAK2D,MAAMtB,MA9BuB,CAAAoE,IAAA,SAAA4G,MAAA,WAmC3D,OAAOhJ,EAAA3F,EAAA4F,cAACiM,EAAqBvQ,KAAK2D,WAnCyB0M,EAAA,CAkBnClK,IAAMC,WAqBhC,OAAOwD,YArCiB,SAAArE,GACvB,IAAIsL,EAAc,GACdC,EAAgB,GAOpB,OANKvB,IAAmB,IAAVA,IACbsB,EAActL,EAAMwL,UAAY1O,EAAWkD,EAAMwL,SAAS1O,GAAY,IAEnEkD,EAAMyL,KAAK3O,KACdyO,EAAgBvL,EAAMyL,KAAK3O,GAAU4O,QAE/B1S,OAAA6E,EAAA,EAAA7E,QAAA8E,EAAA,EAAA9E,CAAA,CACN2S,cAAeL,GACdxO,EAFF9D,OAAA6E,EAAA,EAAA7E,CAAA,GAEiBsS,EAAgBC,IAC7BA,IAyBElH,CAAyBuH,aAAU,CAAEH,KAAM3O,GAAlB8O,CAA8Bd,ICxC/D,IAAMe,GAAYpP,EAAUE,kBAMtBmP,eAEL,SAAAA,EAAY1N,GAAO,IAAAoB,EAAA,OAAAxG,OAAAyG,EAAA,EAAAzG,CAAAyB,KAAAqR,IAClBtM,EAAAxG,OAAA0G,EAAA,EAAA1G,CAAAyB,KAAAzB,OAAA2G,EAAA,EAAA3G,CAAA8S,GAAAlM,KAAAnF,KAAM2D,KAIP2N,mBAAqB,SAAArC,GPaf,IAA+B9D,IOVd8D,EPWvB1M,GAAawH,GAAUwH,oBAAqBpG,GOV3C/B,GAAUrE,EAAKpB,MAAfyF,CAAsBC,GAAOmI,wBAP7BzM,EAAKuM,mBAAmB5L,KAAxBnH,OAAAoH,EAAA,EAAApH,CAAAwG,IAFkBA,wEAalB,OACCV,EAAA3F,EAAA4F,cAAC4H,EAAA,SAAD,KACC7H,EAAA3F,EAAA4F,cAAC2F,GAAD,CAAuBE,oBAAqBnK,KAAK2D,MAAMwG,sBAEtDnK,KAAK2D,MAAMwG,qBACX9F,EAAA3F,EAAA4F,cAACmN,GAAD,CAAavL,UAAWwI,GACvBrM,SAAU+O,GACVpC,SAAUhP,KAAKsR,mBACfnG,aAAcnL,KAAK2D,MAAMwG,oBAEzBwE,kBAAmB+C,aAzBStL,aAiCrBsL,GAA0B,SAACvG,GASvC,OAAIA,GAAgBpI,MAAMC,QAAQmI,EAAayD,aAE7CzD,EAAayD,YAAY3I,IACxB,SAAC6I,EAAYX,GAAb,OACC9J,EAAA3F,EAAA4F,cAAA,eAZgB,SAAAwK,GAAU,OAC7B/L,MAAMC,QAAQ8L,EAAWN,UACxBM,EAAWN,SACTvL,OAAO,SAAAqL,GAAO,OAAIA,EAAQ0B,SAC1B/J,IAAI,SAAAqI,GAAO,OAAIA,EAAQG,YAAc,IAAMH,EAAQ0B,SACnDjB,KAAK,OACJ,KAOA4C,CAAY7C,IACTA,EAAW8C,UAAY9C,EAAW+C,MAAQ,KAAO/C,EAAW8C,SAAW,IAAM9C,EAAW+C,MAAQ,KAChG/C,EAAWgD,UAAY,KAAOhD,EAAWgD,UAAY,iBAAmB,KACxEhD,EAAWiD,MAAQ,YAAcjD,EAAWiD,MAAQ,SAAW,IAJnE,OAUG,MAGOnI,eA/DS,SAAArE,GAAK,MAAK,CACjC4E,oBAAqB5E,EAAMuE,WAAWC,GAAUwC,wBA8DlC3C,CAAyByH,cCxEnBW,eAGpB,SAAAA,EAAYrO,GAAO,IAAAoB,EAAA,OAAAxG,OAAAyG,EAAA,EAAAzG,CAAAyB,KAAAgS,IAClBjN,EAAAxG,OAAA0G,EAAA,EAAA1G,CAAAyB,KAAAzB,OAAA2G,EAAA,EAAA3G,CAAAyT,GAAA7M,KAAAnF,KAAM2D,KACDsO,UAAYlN,EAAKkN,UAAUvM,KAAfnH,OAAAoH,EAAA,EAAApH,CAAAwG,IACjBA,EAAKmN,WAAanN,EAAKmN,WAAWxM,KAAhBnH,OAAAoH,EAAA,EAAApH,CAAAwG,IAClBA,EAAKoN,WAAapN,EAAKoN,WAAWzM,KAAhBnH,OAAAoH,EAAA,EAAApH,CAAAwG,IAClBA,EAAKQ,MAAQ,CACZ0M,WAAW,EACXG,kBAAmB,GAPFrN,oFAYd/E,KAAK2D,MAAMqN,OACdhR,KAAKW,MAAQX,KAAK2D,MAAMqN,KAAK,SAAWhR,KAAK2D,MAAM+E,4CAKhD1I,KAAKW,OACRX,KAAKyF,SAAS,CAAE2M,kBAAmBpS,KAAKuF,MAAM6M,kBAAoB,wCAKnEpS,KAAKyF,SAAS,CAAEwM,WAAW,yCAIvBjS,KAAKuF,MAAM6M,kBAAoB,GAClCpS,KAAKyF,SAAS,CAAEwM,WAAW,qCAIpB,IAEJ7E,EAFIxH,EAAA5F,KA0BR,OAtBAoN,EACC/I,EAAA3F,EAAA4F,cAAA,WACCD,EAAA3F,EAAA4F,cAAC6K,GAAA,EAAD5Q,OAAAmE,OAAA,CAAOwD,UAAW+G,KAAK2C,MACtBjP,WAAsB8K,IAAfzL,KAAKW,MACZ+H,KAAM1I,KAAK2D,MAAM+E,KACjB2J,YAAa,kBAAMzM,EAAKqM,aACxBK,WAAY,kBAAM1M,EAAKsM,cACvBzN,QAAS,kBAAMmB,EAAKuM,eAChBnS,KAAK2D,SAKR3D,KAAKW,QACRyM,EACC/I,EAAA3F,EAAA4F,cAACiO,GAAA,EAAD,CAAOC,KAAMxS,KAAKuF,MAAM0M,UAAWQ,QAASrF,EAAOlF,KAAK,OAAOwK,gBAAiB,IAAMC,WAAS,EAACC,GAAG,SAClGvO,EAAA3F,EAAA4F,cAACiO,GAAA,EAAM5J,QAAP,KACCtE,EAAA3F,EAAA4F,cAAA,OAAKV,UAAU,SAAS5D,KAAKW,UAK1ByM,SA9D8BjH,IAAMC,WCKxByM,oLAEV,IAAA9N,EAAA/E,KAEHgR,EAAOhR,KAAK2D,MAAM3B,EAAUG,oBAEhC,OACEkC,EAAA3F,EAAA4F,cAAC2I,GAAA,EAAD,CAAM/E,KAAK,QAAQ8G,SAAU,SAACrI,GAAD,OAAW5B,EAAKpB,MAAMqL,SAASgC,EAAMrK,KAChEtC,EAAA3F,EAAA4F,cAAC6E,EAAA,EAAD,CAASO,MAAI,GAAb,iFACArF,EAAA3F,EAAA4F,cAACoH,GAAA,EAAD,CAAMC,WAAS,EAACI,QAAS,GACvB1H,EAAA3F,EAAA4F,cAACoH,GAAA,EAAD,CAAMM,MAAI,EAAC2D,GAAI,GACbtL,EAAA3F,EAAA4F,cAACwO,GAAD,CAAW9B,KAAMA,EAAMzD,MAAM,iBAAiB7E,KAAK,aAAakF,YAAY,kBAAkBiC,UAAQ,KAExGxL,EAAA3F,EAAA4F,cAACoH,GAAA,EAAD,CAAMM,MAAI,EAAC2D,GAAI,GACbtL,EAAA3F,EAAA4F,cAACwO,GAAD,CAAW9B,KAAMA,EAAMzD,MAAM,YAAY7E,KAAK,gBAAgBkF,YAAY,gBAE5EvJ,EAAA3F,EAAA4F,cAACoH,GAAA,EAAD,CAAMM,MAAI,EAAC2D,GAAI,GACbtL,EAAA3F,EAAA4F,cAACwO,GAAD,CAAW9B,KAAMA,EAAMzD,MAAM,YAAS7E,KAAK,gBAAgBkF,YAAY,YAASiC,UAAQ,KAE1FxL,EAAA3F,EAAA4F,cAACoH,GAAA,EAAD,CAAMM,MAAI,EAAC2D,GAAI,GACnBtL,EAAA3F,EAAA4F,cAACwO,GAAD,CAAW9B,KAAMA,EAAMtI,KAAK,gBAAgBkF,YAAY,aAAaL,MAAM,iBAAiBsC,UAAQ,KAEhGxL,EAAA3F,EAAA4F,cAACoH,GAAA,EAAD,CAAMM,MAAI,EAAC2D,GAAI,GACbtL,EAAA3F,EAAA4F,cAACwO,GAAD,CAAW9B,KAAMA,EAAMzD,MAAM,wBAAqB7E,KAAK,QAAQkF,YAAY,mBAAgBiC,UAAQ,KAErGxL,EAAA3F,EAAA4F,cAACoH,GAAA,EAAD,CAAMM,MAAI,EAAC2D,GAAI,GACbtL,EAAA3F,EAAA4F,cAAA,OAAKV,UAAU,SAAQS,EAAA3F,EAAA4F,cAAA,sBACvBD,EAAA3F,EAAA4F,cAAC2I,GAAA,EAAKoC,MAAN,CAAYC,QAAM,GAChBjL,EAAA3F,EAAA4F,cAAC6K,GAAA,EAAD,CACEjJ,UAAWkJ,GACX7B,MAAM,WACN3J,UAAU,QACV8E,KAAK,OACL4E,WAAW,MAEbjJ,EAAA3F,EAAA4F,cAAC6K,GAAA,EAAD,CACEjJ,UAAWkJ,GACX7B,MAAM,aACN3J,UAAU,QACV8E,KAAK,OACL4E,WAAW,SAKnBjJ,EAAA3F,EAAA4F,cAAA,UACAD,EAAA3F,EAAA4F,cAAC2I,GAAA,EAAKoC,MAAN,CAAYC,QAAM,GAChBjL,EAAA3F,EAAA4F,cAAC2I,GAAA,EAAKjF,OAAN,CAAa9G,KAAK,SAAS+G,SAAO,GAAlC,gCACA5D,EAAA3F,EAAA4F,cAAC2I,GAAA,EAAKjF,OAAN,CAAa9G,KAAK,SAAlB,oBAhDkCiF,IAAMC,WCC5CgL,GAAYpP,EAAUG,mBAYtB4Q,eAEL,SAAAA,EAAYpP,GAAO,IAAAoB,EAAA,OAAAxG,OAAAyG,EAAA,EAAAzG,CAAAyB,KAAA+S,IAClBhO,EAAAxG,OAAA0G,EAAA,EAAA1G,CAAAyB,KAAAzB,OAAA2G,EAAA,EAAA3G,CAAAwU,GAAA5N,KAAAnF,KAAM2D,KAIPqP,iBAAmB,SAACC,EAActM,IVY5B,SAAPnG,EAAAC,GAAAyS,GAAAnT,MAAAC,KAAAC,WUPEkT,CAJiB,CAChBF,eACA9H,aAAcpG,EAAKpB,MAAMsL,oBAEKlK,EAAKpB,MAAMyP,SAC1CzM,EAAM0M,kBATNtO,EAAKiO,iBAAiBtN,KAAtBnH,OAAAoH,EAAA,EAAApH,CAAAwG,IAFkBA,wEAelB,IAAMoG,EAAenL,KAAK2D,MAAMsL,mBAC1BgE,EAAejT,KAAK2D,MAAMyN,IAChC,OACCjG,EACC9G,EAAA3F,EAAA4F,cAAC4H,EAAA,SAAD,KACC7H,EAAA3F,EAAA4F,cAAA,UAAKtE,KAAK2D,MAAM2P,gBAChBjP,EAAA3F,EAAA4F,cAACiP,GAADhV,OAAAmE,OAAA,CAAgBsM,SAAUhP,KAAKgT,kBAAsBhT,KAAK2D,QAC1DU,EAAA3F,EAAA4F,cAAA,UAEAD,EAAA3F,EAAA4F,cAAC6E,EAAA,EAAD,KAEC9E,EAAA3F,EAAA4F,cAACuG,GAAA,EAAD,CAASC,YAAU,EAACC,QAAM,GAAC1G,EAAA3F,EAAA4F,cAAC0G,EAAA,EAAD,CAAQC,GAAG,MAAX,qBAE1BgI,GACA5O,EAAA3F,EAAA4F,cAAC4H,EAAA,SAAD,KACC7H,EAAA3F,EAAA4F,cAACmL,GAAA,EAAD,gBACApL,EAAA3F,EAAA4F,cAAA,OAAKF,MAAO,CAAEoP,OAAQ,cACpBC,GAAwBR,KAK5B5O,EAAA3F,EAAA4F,cAACmL,GAAA,EAAD,qBACApL,EAAA3F,EAAA4F,cAAA,OAAKF,MAAO,CAAEoP,OAAQ,cACpB9B,GAAwBvG,GAExBA,EAAaX,iBACbnG,EAAA3F,EAAA4F,cAAA,aAAID,EAAA3F,EAAA4F,cAAA,8BACHD,EAAA3F,EAAA4F,cAAA,OAAKV,UAAU,aAAauH,EAAaX,qBAQ9CnG,EAAA3F,EAAA4F,cAAC6E,EAAA,EAAD,CAASxI,OAAK,GAAd,oDArD4ByF,aA0DnBqN,GAA0B,SAACR,GACvC,OAAIA,EAEF5O,EAAA3F,EAAA4F,cAAA,eACC/F,OAAOuE,KAAKmQ,GAAchN,IACzB,SAAAQ,GACC,OAAQA,GACP,IAAK,aAAc,OAAOwM,EAAaxM,GACvC,IAAK,gBAAiB,MAAO,kBAAiBwM,EAAaxM,GAC3D,IAAK,QAAS,OAAOpC,EAAA3F,EAAA4F,cAAA,kCAAuB2O,EAAaxM,IACzD,IAAK,gBACL,IAAK,gBAAiB,MAAO,MAAQwM,EAAaxM,GAClD,QAAS,MAAO,MATpB,KAiBK,MAGOmD,eA3FS,SAAArE,GAIvB,MAAO,CACN0J,mBAJ0B1J,EAAMuE,WAAWC,GAAUwH,qBAIjC+B,eAHE/N,EAAMuE,WAAWC,GAAUwC,sBACjDhH,EAAMuE,WAAWC,GAAUwC,sBAAsBjC,oBAAoBzD,QAAU,KAwFlE+C,CAAyB4G,GAAWuC,GAAmB3B,KClEvDxH,mBA/Bf,SAAyBrE,GACxB,MAAO,CACNuE,WAAYvE,EAAMuE,WAAWC,GAAU2J,oBA6B1B9J,CAzBf,SAAAtL,GAAsD,IAAzBwL,EAAyBxL,EAAzBwL,WAC5B,OADqDvL,OAAA4F,EAAA,EAAA5F,CAAAD,EAAA,gBAEpD+F,EAAA3F,EAAA4F,cAACmF,EAAD,CAAeX,aAAcgB,GAC3BA,GAAcA,EAAW6J,QACzBtP,EAAA3F,EAAA4F,cAAC6E,EAAA,EAAD,CAASO,MAAI,GACZrF,EAAA3F,EAAA4F,cAAA,8DACAD,EAAA3F,EAAA4F,cAAA,2GACAD,EAAA3F,EAAA4F,cAAA,KAAGiD,GAAG,OAAOP,MAAM,sBAAmB4M,KAAM9J,EAAW6J,QAAShP,OAAO,SAASkP,IAAI,uBACnFxP,EAAA3F,EAAA4F,cAAC0D,EAAA,EAAD,CAAQC,SAAO,EAAC6L,MAAI,EAACC,cAAc,OAAO7L,KAAK,SAC9C7D,EAAA3F,EAAA4F,cAACmE,EAAA,EAAD,CAAMC,KAAK,iBADZ,yBAOFrE,EAAA3F,EAAA4F,cAAC6E,EAAA,EAAD,CAASxI,OAAK,GAAd,oHCjBS0I,GAAS,CAClBW,aAAc,eACdV,cAAe,eACfmD,wBAAyB,yBACzB+E,sBAAuB,uBACzBwC,wBAAyB,yBACvBC,WAAY,aACZC,MAAO,SAGEC,GAAe,CACxB,CAAE1N,IAAK4C,GAAOW,aAAcoK,KAAI,GAAA7P,OAbnB,aAamB,aAA0B2B,UAAWmO,IACrE,CAAE5N,IAAK4C,GAAOC,cAAe8K,KAAI,GAAA7P,OAdpB,aAcoB,wBAAqC2B,UAAWoO,IACjF,CAAE7N,IAAK4C,GAAOoD,wBAAyB2H,KAAI,GAAA7P,OAf9B,aAe8B,qBAAkC2B,UAAWmL,IACxF,CAAE5K,IAAK4C,GAAOmI,sBAAuB4C,KAAI,GAAA7P,OAhB5B,aAgB4B,mBAAgC2B,UAAW6M,IACtF,CAAEtM,IAAK4C,GAAO2K,wBAAyBI,KAAI,GAAA7P,OAjB5B,aAiB4B,sBAAmC2B,UAAWqO,KAG9EC,GAAe,SAACC,EAAOC,GAAR,OACxBC,YAAaR,GAAalR,OAAO,SAAA2R,GAAO,OAAIA,EAAQnO,MAAQgO,IACvDxO,IAAI,SAAAnH,GAAM,OAAIA,EAAOsV,OAAMrF,OAAQ2F,IAG/BtL,GAAY,SAAAzF,GAAS,IACxByP,EAAYzP,EAAZyP,QAIN,OAHKA,IACDA,EAAUzP,GAEP,SAAC8Q,EAAOC,GAAR,OAAuBtB,EAAQyB,KAAKL,GAAaC,EAAOC,MZjCtD3K,GAAY,CACxB+K,WAAY,aACZ9K,aAAc,eACd+C,cAAe,gBACfR,qBAAsB,uBACtBgF,oBAAqB,sBACrBmC,iBAAkB,iEAOZ,SAAAtT,IAAA,IAAArB,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAsB,GAAA,cAAAA,EAAApB,KAAAoB,EAAAnB,MAAA,cAAAmB,EAAAnB,KAAA,EACed,EAAiB0W,EAAKpX,sBADrC,OACAoB,EADAuB,EAAA0U,KAENzS,GAAawH,GAAUC,aAAcjL,EAAOiC,MAFtC,wBAAAV,EAAAV,SAAAQ,0EAKA,SAAAiB,EAAiCxD,GAAjC,IAAAkB,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAwC,GAAA,cAAAA,EAAAtC,KAAAsC,EAAArC,MAAA,cAAAqC,EAAArC,KAAA,EACed,EAAiB0W,EAAKnX,aAAaC,IADlD,OACAkB,EADAyC,EAAAwT,KAENzS,GAAawH,GAAUgD,cAAehO,EAAOiC,MAFvC,wBAAAQ,EAAA5B,SAAAyB,0EAkBA,SAAA4T,EAAkCnL,EAAYsJ,GAA9C,IAAArU,EAAAwC,EAAAvD,EAAA,OAAAS,EAAAC,EAAAM,KAAA,SAAAkW,GAAA,cAAAA,EAAAhW,KAAAgW,EAAA/V,MAAA,cAENqD,EAAgBR,EAAUG,oBAFpB+S,EAAA/V,KAAA,EAGae,EAAgB4J,EAAYiL,EAAKjX,oBAH9C,YAGFiB,EAHEmW,EAAAF,MAIKhU,KAJL,CAAAkU,EAAA/V,KAAA,cAKCoC,EAAMxC,EAAOiC,MACXuC,OANH,CAAA2R,EAAA/V,KAAA,SAOJyB,QAAQC,IAAIC,KAAKC,UAAUQ,IAC3B+B,EAActB,EAAUG,mBAAoBZ,EAAIgC,QAChD6F,GAAUgK,EAAVhK,CAAmBC,GAAOmI,uBATtB0D,EAAA/V,KAAA,wBAWEnB,EAAee,EAAOiC,KAXxBkU,EAAAhW,KAAA,GAAAgW,EAAA/V,KAAA,GAawBgW,GAAmBnX,GAb3C,QAaH8L,EAAW6J,QAbRuB,EAAAF,KAcH5L,GAAUgK,EAAVhK,CAAmBC,GAAO2K,yBAC1BpT,QAAQC,IAAI,gDAfTqU,EAAA/V,KAAA,iBAAA+V,EAAAhW,KAAA,GAAAgW,EAAAzV,GAAAyV,EAAA,UAiBHtU,QAAQD,MAARuU,EAAAzV,IAjBG,QAAAyV,EAAA/V,KAAA,iBAqBLyB,QAAQD,MAAM,+DArBT,QAuBN4B,GAAawH,GAAU2J,iBAAkB5J,GAvBnC,yBAAAoL,EAAAtV,SAAAqV,EAAA,0CA0BA,SAAeE,GAAtBzU,GAAA,OAAA0U,GAAArV,MAAAC,KAAAC,wDAAO,SAAAoV,EAAkCrX,GAAlC,IAAA2V,EAAA2B,EAAA,OAAA7W,EAAAC,EAAAM,KAAA,SAAAuW,GAAA,cAAAA,EAAArW,KAAAqW,EAAApW,MAAA,cAAAoW,EAAArW,KAAA,EAAAqW,EAAApW,KAAA,EAGqBd,EAAiB0W,EAAKhX,gBAAgBC,GAAe,CAAEwX,aAAc,SAH1F,OAGDF,EAHCC,EAAAP,KAILM,EAAgB,IAAIG,KAAK,CAACH,EAActU,MAAO,CAAEE,KAAM,oBACvDyS,EAAU+B,IAAIC,gBAAgBL,GAC1BM,OAAOC,WAAaD,OAAOC,UAAUC,iBACxCF,OAAOC,UAAUC,iBAAiBR,EAAetX,GAEjD4X,OAAOpD,KAAKmB,GAEbA,GAAW1V,GAA0B,IAAM8W,EAAKhX,gBAAgBC,GAX3DuX,EAAApW,KAAA,uBAAAoW,EAAArW,KAAA,GAAAqW,EAAA9V,GAAA8V,EAAA,SAaL3U,QAAQD,MAAR4U,EAAA9V,IAbK8V,EAAA9V,GAAA,eAAA8V,EAAA5V,OAAA,SAgBCgU,GAhBD,yBAAA4B,EAAA3V,SAAAyV,EAAA,yCaxDP,IAAMU,GAAWC,YAAgB,CAC9BlM,WbmFY,WAAoD,IAAzBA,EAAyB7J,UAAAkH,OAAA,QAAAsE,IAAAxL,UAAA,GAAAA,UAAA,GAAZ,GAAIgW,EAAQhW,UAAAkH,OAAA,EAAAlH,UAAA,QAAAwL,EAElE,OAAI1B,GAAUkM,EAAO/U,MACb3C,OAAA6E,EAAA,EAAA7E,CAAA,GAAKuL,EAAZvL,OAAA8E,EAAA,EAAA9E,CAAA,GAAyBwL,GAAUkM,EAAO/U,MAAQ+U,EAAOhP,UAC/CgP,EAAO/U,KACV3C,OAAA6E,EAAA,EAAA7E,CAAA,GAAKuL,EAAZvL,OAAA8E,EAAA,EAAA9E,CAAA,GAAyB0X,EAAO/U,KAAO+U,EAAOhP,UAExC6C,GazFLkH,KAAMkF,IACNnF,SnBmCY,WAA6C,IAAvBA,EAAuB9Q,UAAAkH,OAAA,QAAAsE,IAAAxL,UAAA,GAAAA,UAAA,GAAZ,GAAIgW,EAAQhW,UAAAkH,OAAA,EAAAlH,UAAA,QAAAwL,EAC1D,OAAIwK,EAAO/U,KACF3C,OAAA6E,EAAA,EAAA7E,CAAA,GAAIwS,EAAXxS,OAAA8E,EAAA,EAAA9E,CAAA,GAAsB0X,EAAO/U,KAAQ+U,EAAOhP,UAEvC8J,KmBnCI1E,GAAQ8J,YAAYJ,GAAUH,OAAOQ,8BAAgCR,OAAOQ,gCAElF,SAASzT,GAAS0T,GACrB,OAAOhK,GAAM1J,WAAW0T,GAGb,SAAS9T,GAAarB,EAAM+F,GACvCoF,GAAMiK,SAAS,CAAEpV,OAAM+F,wCClBZ,SAASsP,KACpB,OACIlS,EAAA3F,EAAA4F,cAACkS,GAAA,MAAD,KACInS,EAAA3F,EAAA4F,cAAA,KAAGV,UAAU,oBAAoBgQ,KAAK,KAAtC,WACAvP,EAAA3F,EAAA4F,cAAA,KAAGV,UAAU,uBAAuBgQ,KAAMY,GAAanL,GAAOW,eAA9D,cACA3F,EAAA3F,EAAA4F,cAAA,KAAGV,UAAU,kBAAkBgQ,KAAMY,GAAanL,GAAO4K,aAAzD,cACA5P,EAAA3F,EAAA4F,cAAA,KAAGV,UAAU,iBAAiBgQ,KAAMY,GAAanL,GAAO6K,QAAxD,UCTZ,IAWeuC,GAXC,SAAU9S,GAEtB,OACIU,EAAA3F,EAAA4F,cAAC6E,EAAA,EAAD,CAASO,MAAI,GACR/F,EAAM1C,QAAQoD,EAAA3F,EAAA4F,cAAA,aCJNoS,8MAEpBC,QAAU,CACT,CAAEC,IAAK,OACP,CAAEA,IAAK,OACP,CAAEA,IAAK,aACP,CAAEA,IAAK,kFAMP,MAAO,UAZyBzQ,IAAMC,WCExCyQ,IAAS/Q,OAAQzB,EAAA3F,EAAA4F,cCOF,WAEb,IAAMwS,EACJzS,EAAA3F,EAAA4F,cAAA,WACID,EAAA3F,EAAA4F,cAAA,4CACAD,EAAA3F,EAAA4F,cAAA,mFACAD,EAAA3F,EAAA4F,cAAA,oFAIN,OAEED,EAAA3F,EAAA4F,cAACyS,EAAA,EAAD,CAAU1K,MAAOA,IAGfhI,EAAA3F,EAAA4F,cAAC0S,EAAA,EAAD,KAEE3S,EAAA3F,EAAA4F,cAAC2S,GAAD,MAEA5S,EAAA3F,EAAA4F,cAAC0G,EAAA,EAAD,CAAQC,GAAG,KAAKiM,MAAM,OAAOC,UAAU,SAASC,UAAQ,EAACC,UAAQ,EAACjT,MAAO,CACvEoP,OAAQ,EAAG8D,WAAY,SAAUC,cAAe,SAAUC,SAAU,QAASvO,IAAK,EAAGwO,KAAM,EAC3FC,OAAQ,IAAKC,WAAY,eAAgBC,SAAU,SAEnDvT,EAAA3F,EAAA4F,cAAA,mCAGFD,EAAA3F,EAAA4F,cAACuT,EAAA,EAAD,CAASjU,UAAU,SAASQ,MAAO,CAAE6E,IAAK,OAAQlF,OAAQ,QAAS+T,SAAU,SAE3EzT,EAAA3F,EAAA4F,cAACyT,EAAA,EAAD,CAAOC,OAAK,EAAC5D,KAAK,IAAItO,OAAQ,SAAAnC,GAAK,OAAIU,EAAA3F,EAAA4F,cAAC2T,GAAD1Z,OAAAmE,OAAA,GAAaiB,EAAb,CAAoB1C,QAAS6V,QAEnE3C,GAAalO,IACZ,SAAAnH,GAAM,OAAKuF,EAAA3F,EAAA4F,cAACyT,EAAA,EAADxZ,OAAAmE,OAAA,CAAOsV,OAAK,GAAKlZ,MAI7BuF,EAAA3F,EAAA4F,cAAC4T,GAAD,CAAMtU,UAAU,kBD1CV,MAAauU,SAASC,eAAe","file":"static/js/main.1d0cf9e0.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const apiURLs = {\r\n\tarborescenceDouleurs: '/douleurs/arborescence',\r\n\tficheDouleur: idDouleur => '/douleurs/' + idDouleur,\r\n\tnouvelleOrdonnance: '/ordonnances/nouvelle',\r\n\tordonnanceEmise: idOrdonnance => '/ordonnances/emises/' + idOrdonnance,\r\n}\r\n\r\nexport const backendURL = process.env.REACT_APP_BACKEND_URL\r\n\r\nconst textMimeTypes = [\r\n\t\"application/javascript\", \"application/json\", \"application/xml\",\r\n\t'application/xhtml+xml', 'application/typescript', 'application/x-sh',\r\n]\r\n\r\nexport const returnTypes = {\r\n\tOBJECT: 'object',\r\n\tTEXT: 'text',\r\n\tBLOB: 'blob',\r\n}\r\n\r\nexport const getResultFromUrl = async (url, config) => {\r\n\tlet result = {}\r\n\ttry {\r\n\t\tawait axios.get(url, config).then(response => {\r\n\t\t\tresult = getResultFromResponse(response)\r\n\t\t})\r\n\t} catch (error) {\r\n\t\tresult = getResultFromError(error)\r\n\t}\r\n\treturn result\r\n}\r\n\r\nexport const postObjectToUrl = async (object, url, config) => {\r\n\tlet result = {}\r\n\ttry {\r\n\t\tawait axios.post(url, object, config).then(response => {\r\n\t\t\tresult = getResultFromResponse(response)\r\n\t\t})\r\n\t} catch (error) {\r\n\t\tresult = getResultFromError(error)\r\n\t}\r\n\treturn result\r\n}\r\n\r\nconst getResultFromError = error => {\r\n\tconsole.log(\"error: \" + JSON.stringify(error))\r\n\tconst result = {\r\n\t\tdata: { error: error.message },\r\n\t\ttype: returnTypes.OBJECT,\r\n\t\tcontentType: 'application/json'\r\n\t}\r\n\treturn result;\r\n}\r\n\r\nconst getResultFromResponse = async response => {\r\n\tlet result = response\r\n\tif (result.data) {\r\n\t\tconst contentType = result.data.type ? result.data.type : result.headers[\"content-type\"]\r\n\t\tresult.contentType = contentType\r\n\t\tresult.type = returnTypes.OBJECT\r\n\t\tif (contentType && (contentType.toLowerCase().startsWith('text')\r\n\t\t\t|| textMimeTypes.find(type => contentType.toLowerCase().startsWith(type)))) {\r\n\t\t\tif (result.data.text) {\r\n\t\t\t\tlet textResult\r\n\t\t\t\tawait result.data.text().then(text => textResult = text)\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst obj = JSON.parse(textResult)\r\n\t\t\t\t\tresult.data = obj\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tconsole.log(\"error: \" + error)\r\n\t\t\t\t\tresult.data = textResult\r\n\t\t\t\t\tresult.type = returnTypes.TEXT\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tresult.type = returnTypes.BLOB\r\n\t\t}\r\n\t}\r\n\treturn result\r\n}","import dispatchData, { getState } from \"./store\";\r\n\r\nexport const formNames = {\r\n\tTEST_FORM: 'testForm',\r\n  PRESCRIPTION_FORM: 'prescriptionForm',\r\n  INFOS_PATIENT_FORM: 'infosPatient',\r\n}\r\n\r\n/**\r\n * action pour dispatcher les valeurs de formulaires\r\n */\r\nexport function setFormValues(formName, formValues) {\r\n  dispatchData(formName, formValues);\r\n}\r\n\r\nexport function resetFormErrors(formName) {\r\n  let stateForm = Object.assign({}, getState('appForms')[formName])\r\n  let newState = {}\r\n  const fields = Object.keys(stateForm)\r\n  if (Array.isArray(fields)) {\r\n    fields.filter(field => !field.startsWith('error.')).forEach(\r\n      field => {\r\n        newState = {...newState, [field] : stateForm[field]}\r\n      }\r\n    )\r\n  }\r\n  dispatchData(formName, newState);\r\n\r\n}\r\n\r\nexport function setFormErrors(formName, errors) {\r\n  let stateForm = Object.assign({}, getState('appForms')[formName])\r\n  const fields = Object.keys(errors)\r\n  if (Array.isArray(fields)) {\r\n    fields.filter(\r\n      field => field.startsWith(formName + \".\") || !field.includes('.')\r\n    ).forEach(\r\n      field => {\r\n        stateForm = {...stateForm, ['error.' + field.replace(formName + '.', '')] : errors[field]}\r\n      }\r\n    )\r\n  }\r\n  dispatchData(formName, stateForm);\r\n\r\n}\r\n\r\n/**\r\n * Reducer pour stocker les contenus des formulaires\r\n */\r\nexport default function formsReducer(appForms = {}, action) {\r\n  if (action.type) {\r\n    return {...appForms, [action.type] : action.content}\r\n  }\r\n  return appForms\r\n}\r\n\r\n","import React from 'react'\r\n\r\nfunction TruncBox(props) {\r\n\r\n    const {className, children, width, height, moreText, lessText, ...rest} = props\r\n\r\n    const style = \r\n        <style> {`\r\n            .truncated {\r\n                max-height: ${height ? height + ';':'2rem;'}\r\n                max-width: ${width ? width + ';':'100%;'}\r\n                width: ${width ? width + ';':'100%;'}\r\n                overflow: hidden;\r\n                text-overflow: ellipsis;\r\n            } \r\n            .expand, .trunc {\r\n                width: fit-content;\r\n                margin-left: auto;\r\n                margin-right: auto;\r\n            }\r\n            .expand::after, .trunc::after {\r\n                cursor: pointer;\r\n                color: #718293;\r\n                font-style: italic;\r\n            }\r\n            .expand::after {\r\n                content: '${moreText ? moreText : '\\\\0025BC'}'; \r\n                font-size: ${!moreText ? '1rem' : '.5rem'};\r\n            }         \r\n            .trunc::after {\r\n                content: '${lessText ? lessText : '\\\\0025B2'}';\r\n                font-size: ${!lessText ? '1rem' : '.5rem'};\r\n            }\r\n        `}\r\n        </style>\r\n\r\n    let truncated = true\r\n\r\n    const onClick = e => {\r\n        if (truncated) {\r\n            e.target.className = 'trunc'\r\n            e.target.previousSibling.className = className ? className: ''\r\n            truncated = false\r\n        } else {\r\n            e.target.className = 'expand'\r\n            e.target.previousSibling.className = `${className ? className + ' ' : ''}truncated`\r\n            truncated = true\r\n        }\r\n    }\r\n\r\n    const render = function () {\r\n        return (\r\n            <React.Fragment>\r\n                {style}\r\n                <div className={`${className ? className + ' ' : ''}truncated`} {...rest}>\r\n                    {children}                    \r\n                </div>\r\n                <div onClick={onClick} className='expand'></div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    return render()\r\n}\r\n\r\nexport default TruncBox","import React from 'react'\r\n\r\nexport default class ActiveItemHandler extends React.Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.handleItemClick = this.handleItemClick.bind(this)\r\n\t\tthis.state = {\r\n\t\t\tactiveIndex: -1\r\n\t\t}\r\n\t}\r\n\r\n\thandleItemClick = (index) => {\r\n\t\tlet currentActive = this.state.activeIndex\r\n\t\tif (currentActive === index) {\r\n\t\t\tcurrentActive = -1\r\n\t\t} else {\r\n\t\t\tcurrentActive = index\r\n\t\t}\r\n\t\tthis.setState({ activeIndex: currentActive })\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { render, componentList, ...otherProps } = this.props\r\n\t\tif (Array.isArray(componentList)) {\r\n\t\t\treturn componentList.map((component, index) => {\r\n\t\t\t\treturn render({ handleItemClick: this.handleItemClick, ...this.state, component, index, otherProps })\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\treturn render({ handleItemClick: this.handleItemClick, ...this.state, component: componentList, index: 0, otherProps })\r\n\t\t}\r\n\t}\r\n}","import React from 'react'\r\nimport { Accordion, Button, Icon } from 'semantic-ui-react'\r\nimport \"./Arborescence.css\";\r\nimport TruncBox from '../components/TruncBox';\r\nimport ActiveItemHandler from '../hoc/ActiveItemHandler';\r\n\r\n\r\nexport default function Arborescence({ nomenclatures, ...otherProps }) {\r\n\tfunction renderBranche({ component, index, handleItemClick, activeIndex, otherProps }) {\r\n\t\treturn (\r\n\t\t\t<Branche key={index} onTitleClick={(event) => handleItemClick(index)} isActive={index === activeIndex}\r\n\t\t\t\tlibelle={component.libelle}\tnomenclaturesEnfants={component.nomenclaturesEnfants}\t{...otherProps} />\r\n\t\t)\r\n\t}\r\n\treturn <ActiveItemHandler render={renderBranche} componentList={nomenclatures} {...otherProps} />\r\n}\r\n\r\nfunction Branche({ libelle, nomenclaturesEnfants, isActive, onTitleClick, ...otherProps })  {\r\n\t// Fonction de rendu de chaque nomenclature enfant :\r\n\tfunction renderNomenclatureEnfant({ component, index, handleItemClick, activeIndex, otherProps }) {\r\n\t\tif (component.nomenclaturesEnfants && component.nomenclaturesEnfants.length > 0) {\r\n\t\t\t// l'enfant a des enfants : on construit la branche de niveau inférieur\r\n\t\t\treturn (\r\n\t\t\t\t<Branche key={index} onTitleClick={(event) => handleItemClick(index)} isActive={index === activeIndex}\r\n\t\t\t\t\tlibelle={component.libelle} nomenclaturesEnfants={component.nomenclaturesEnfants} {...otherProps} />\r\n\t\t\t)\r\n\t\t} else {\r\n\t\t\t// l'enfant n'a pas d'enfant: on construit la feuille correspondante\r\n\t\t\treturn (\r\n\t\t\t\t<Feuille key={index} onChoose={(event) => handleItemClick(index)} isActive={index === activeIndex}\r\n\t\t\t\t\tlibelle={component.libelle} infosGenerales={component.infosGenerales} idDouleur={component.id} {...otherProps} />\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\tconst content = <ActiveItemHandler render={renderNomenclatureEnfant} componentList={nomenclaturesEnfants} {...otherProps} />\r\n\treturn accordion({ title: libelle, content, isActive, onTitleClick })\r\n}\r\n\r\n\r\nfunction Feuille ({ libelle, infosGenerales, idDouleur, handleClickDouleur, onChoose, isActive }) {\r\n\tconst buttonStyle = { float: 'right', maxWidth: '100%', marginTop: '-30px', marginBottom: '3px', marginRight: '2%' }\r\n\tfunction buildContent(data) {\r\n\t\tif (data) {\r\n\t\t\treturn (\r\n\t\t\t\t<React.Fragment>\r\n\t\t\t\t\t<Button primary size='tiny' style={buttonStyle} onClick={() => handleClickDouleur(idDouleur)}>\r\n\t\t\t\t\t\tFaire l'ordonnance\r\n          </Button>\r\n\t\t\t\t\t<TruncBox height='6rem' moreText='▼ ( voir plus ... )' lessText='▲ ( réduire ... )'>\r\n\t\t\t\t\t\t<pre className='infosBase'>{data}</pre>\r\n\t\t\t\t\t</TruncBox>\r\n\t\t\t\t</React.Fragment>\r\n\t\t\t)\r\n\t\t}\r\n\t\treturn '';\r\n\t}\r\n\tconst content = buildContent(infosGenerales)\r\n\treturn accordion({ title: libelle, content, isActive, onTitleClick: onChoose })\r\n}\r\n\r\n\r\nfunction accordion({ title, content, isActive, onTitleClick }) {\r\n\treturn (\r\n\t\t<Accordion styled className={!isActive ? 'noborder' : ''}>\r\n\t\t\t<Accordion.Title active={isActive} index={0} onClick={onTitleClick} >\r\n\t\t\t\t<Icon name='dropdown' />\r\n\t\t\t\t{title}\r\n\t\t\t</Accordion.Title>\r\n\t\t\t<Accordion.Content active={isActive}>{content}</Accordion.Content>\r\n\t\t</Accordion>\r\n\t)\r\n}\r\n\r\n","import React from 'react'\r\nimport { Loader, Message } from 'semantic-ui-react'\r\n\r\n\r\nconst LoadComponent = function (props) {\r\n\r\n  const { loadedObject, render, children, ...rest } = props\r\n\r\n  const loader = <Loader active style={{ top: '30%' }}>Chargement en cours ... veuillez patienter</Loader>\r\n  const error = errorMessage => errors([errorMessage])\r\n  const errors = errorList => {\r\n    if (Array.isArray(errorList)) {\r\n      return <Message error {...rest}>{\r\n        errorList.map(\r\n          (error, index) => {\r\n            let key = index, message = error\r\n            if (error.key) {\r\n              key = error.key\r\n            }\r\n            if (error.message) {\r\n              message = (error.key ? error.key + ': ' : index + '. ') + error.message\r\n            }\r\n            return <div key={key}>{message}</div>\r\n          }\r\n        )}\r\n      </Message>\r\n    }\r\n  }\r\n\r\n  if (!loadedObject) {\r\n    return loader\r\n  } else if (loadedObject.error) {\r\n    return error(loadedObject.error)\r\n  } else if (loadedObject.errors) {\r\n    return errors(loadedObject.errors)\r\n  } else if (render) {\r\n    return render\r\n  } else if (children) {\r\n    return children\r\n  } else {\r\n    return <div className='center'><h1>???</h1></div>\r\n  }\r\n}\r\n\r\nexport default LoadComponent","/**\r\n * Ici on prends en compte l'état applicatif.\r\n * La méthode connect() relie le store au composant cible \r\n */\r\nimport { connect } from 'react-redux'\r\nimport { setArborescence, dataTypes } from \"./OrdonnanceActions\";\r\nimport ArborescenceComponent from \"./ArborescenceComponent\";\r\nimport React, { Component } from 'react'\r\nimport { Message } from 'semantic-ui-react';\r\nimport { routes, goToRoute } from '../services/routeService';\r\nimport LoadComponent from '../components/LoadComponent';\r\n\r\n/**\r\n * La fonction mapStateToProps renvoie un objet résultant du state. \r\n * L'objet renvoyé est passé en props du composant connecté\r\n */\r\nconst mapStateToProps = appState => ({\r\n    nomenclatures: appState.ordonnance[dataTypes.ARBORESCENCE]\r\n})\r\n\r\nclass Arborescence extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.handleClickDouleur.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        setArborescence()\r\n    }\r\n\r\n    handleClickDouleur = (idDouleur) => {\r\n        goToRoute(this.props)(routes.FICHE_DOULEUR, {idDouleur})\r\n    }\r\n\r\n    render() {\r\n        return <LoadComponent loadedObject={this.props.nomenclatures}>\r\n            <div>\r\n                <Message info>Choisissez le type de douleur concernée dans l'arborescence ci-dessous</Message>\r\n                <ArborescenceComponent {...this.props} handleClickDouleur={this.handleClickDouleur}/>\r\n            </div>\r\n        </LoadComponent>        \r\n    }\r\n}\r\n/**\r\n * La méthode connect() relie le store au composant cible.\r\n * Elle prend en paramètres \r\n * - la fonction \"mapStateToProps\" à laquelle le state du store est passé en paramètre.\r\n */\r\nexport default connect(mapStateToProps)(Arborescence)","import dispatchData, { store } from \"../redux/store\";\r\nimport { apiURLs as urls, getResultFromUrl, postObjectToUrl, backendURL } from \"../services/apiService\";\r\nimport { setFormValues, formNames, setFormErrors, resetFormErrors } from \"../redux/FormActions\";\r\nimport { goToRoute, routes } from \"../services/routeService\";\r\n\r\nexport const dataTypes = {\r\n\tINFOS_TEST: 'INFOS_TEST',\r\n\tARBORESCENCE: 'ARBORESCENCE',\r\n\tPRESCRIPTIONS: 'PRESCRIPTIONS',\r\n\tPRESCRIPTION_CHOISIE: 'PRESCRIPTION_CHOISIE',\r\n\tPRESCRIPTION_SAISIE: 'PRESCRIPTION_SAISIE',\r\n\tORDONNANCE_EMISE: 'ORDONNANCE_EMISE'\r\n}\r\n\r\nexport async function setInfosTest(infos) {\r\n\tdispatchData(dataTypes.INFOS_TEST, infos);\r\n}\r\n\r\nexport async function setArborescence() {\r\n\tconst result = await getResultFromUrl(urls.arborescenceDouleurs)\r\n\tdispatchData(dataTypes.ARBORESCENCE, result.data);\r\n}\r\n\r\nexport async function setPreconisations(idDouleur) {\r\n\tconst result = await getResultFromUrl(urls.ficheDouleur(idDouleur))\r\n\tdispatchData(dataTypes.PRESCRIPTIONS, result.data);\r\n}\r\n\r\nexport function setPrescriptionChoisie(prescription) {\r\n\tlet state = store.getState().ordonnance\r\n\tlet precedente = state && state[dataTypes.PRESCRIPTION_CHOISIE] ? state[dataTypes.PRESCRIPTION_CHOISIE] : {}\r\n\tif (JSON.stringify(precedente) !== JSON.stringify(prescription)) {\r\n\t\tsetFormValues(formNames.PRESCRIPTION_FORM, null)\r\n\t}\r\n\tdispatchData(dataTypes.PRESCRIPTION_CHOISIE, prescription);\r\n}\r\n\r\nexport function setPrescriptionSaisie(prescription) {\r\n\tdispatchData(dataTypes.PRESCRIPTION_SAISIE, prescription);\r\n}\r\n\r\nexport async function setOrdonnanceEmise(ordonnance, history) {\r\n\r\n\tresetFormErrors(formNames.INFOS_PATIENT_FORM)\r\n\tlet result = await postObjectToUrl(ordonnance, urls.nouvelleOrdonnance)\r\n\tif (result.data) {\r\n\t\tconst obj = result.data\r\n\t\tif (obj.errors) {\r\n\t\t\tconsole.log(JSON.stringify(obj))\r\n\t\t\tsetFormErrors(formNames.INFOS_PATIENT_FORM, obj.errors)\r\n\t\t\tgoToRoute(history)(routes.FORMULAIRE_ORDONNANCE)\r\n\t\t} else {\r\n\t\t\tconst idOrdonnance = result.data\r\n\t\t\ttry {\r\n\t\t\t\tordonnance.fileURL = await getOrdonnanceEmise(idOrdonnance)\r\n\t\t\t\tgoToRoute(history)(routes.CONFIRMATION_ORDONNANCE)\r\n\t\t\t\tconsole.log('L\\'ordonnance a bien été enregistrée')\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error(error)\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\tconsole.error('L\\'ordonnance n\\'a pas pu être correctement enregistrée')\r\n\t}\r\n\tdispatchData(dataTypes.ORDONNANCE_EMISE, ordonnance)\r\n}\r\n\r\nexport async function getOrdonnanceEmise(idOrdonnance) {\r\n\tlet fileURL\r\n\ttry {\r\n\t\tlet pdfOrdonnance = await getResultFromUrl(urls.ordonnanceEmise(idOrdonnance), { responseType: 'blob' })\r\n\t\tpdfOrdonnance = new Blob([pdfOrdonnance.data], { type: 'application/pdf' })\r\n\t\tfileURL = URL.createObjectURL(pdfOrdonnance)\r\n\t\tif (window.navigator && window.navigator.msSaveOrOpenBlob) {\r\n\t\t\twindow.navigator.msSaveOrOpenBlob(pdfOrdonnance, idOrdonnance);\t\t\t\r\n\t\t} else {\r\n\t\t\twindow.open(fileURL)\r\n\t\t}\r\n\t\tfileURL = (backendURL ? backendURL : '') + urls.ordonnanceEmise(idOrdonnance)\r\n\t} catch (error) {\r\n\t\tconsole.error(error)\r\n\t\tthrow error\r\n\t}\r\n\treturn fileURL\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Reducer pour le thème ordonnance\r\n * @param {*} ordonnance \r\n * @param {*} action \r\n */\r\nexport default function ordonnanceReducer(ordonnance = {}, action) {\r\n\r\n\tif (dataTypes[action.type]) {\r\n\t\treturn { ...ordonnance, [dataTypes[action.type]]: action.content }\r\n\t} else if (action.type) {\r\n\t\treturn { ...ordonnance, [action.type]: action.content }\r\n\t}\r\n\treturn ordonnance\r\n\r\n}\r\n\r\n","import React, { Fragment } from 'react'\r\nimport { Message, Divider, Header, Button} from 'semantic-ui-react'\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\n/**\r\n * Si une prescription a été choisie on n'affiche que celle ci avec un message approprié\r\n * Sinon on affiche la liste des prescriptions proposées avec possibilité d'en choisir une par clic\r\n */\r\nexport default function FicheDouleurComponent(props) {\r\n\r\n  const { prescriptions, prescriptionChoisie, clickOrdonnance } = props\r\n\r\n  let douleur = () => {\r\n    let nomenclatureDouleur = null\r\n    if (prescriptionChoisie) {\r\n      nomenclatureDouleur = prescriptionChoisie.nomenclatureDouleur\r\n    } else if (prescriptions && prescriptions.length > 0) {\r\n      nomenclatureDouleur = prescriptions[0].nomenclatureDouleur\r\n    }\r\n    if (nomenclatureDouleur) {\r\n      return {\r\n        libelle: nomenclatureDouleur.libelle,\r\n        infos: nomenclatureDouleur.infosGenerales,\r\n        recommandations: nomenclatureDouleur.recommandations,\r\n      }\r\n    }\r\n    return {}\r\n  }\r\n  douleur = douleur()\r\n\r\n  let nbPreco = prescriptions && prescriptions.length > 0 ? prescriptions.length : 0\r\n\r\n  let messageInfo = () => {\r\n    if (prescriptionChoisie) {\r\n      return (\r\n        <Message info>Vous avez choisi l'ordonnance suivante</Message>\r\n      )\r\n    }\r\n    return (\r\n      nbPreco === 0 ?\r\n        <Message warning>Aucune ordonnance n'est encore proposée pour cette douleur</Message> :\r\n        <Message info>\r\n          {` ${nbPreco} ordonnance${nbPreco > 1 ? 's vous sont proposées' : ' vous est proposée'} `}\r\n          <br />Cliquez sur le bouton correspondant à l'ordonnance de votre choix\r\n        </Message>\r\n    )\r\n  }\r\n  messageInfo = messageInfo()\r\n\r\n  let messageRecommandation = (\r\n    !prescriptionChoisie && douleur.recommandations && douleur.recommandations.length > 0 ?\r\n      <Message warning className='infosBase'>\r\n        <Divider horizontal fitted><Header as='h4'>Remarques</Header></Divider>\r\n        {douleur.recommandations}\r\n      </Message> : ''\r\n  )\r\n\r\n  const renderListePrescriptions = () => {\r\n    if (prescriptionChoisie) {\r\n      return (\r\n        <Fragment>\r\n          {renderPrescription(prescriptionChoisie)}\r\n          <Divider />\r\n        </Fragment>\r\n      )\r\n    } else if (nbPreco > 0) {\r\n      return prescriptions.map(\r\n        (prescription, index) => (\r\n          <Fragment>\r\n            {renderPrescription(prescription, index)}\r\n            <Divider />\r\n          </Fragment>\r\n        )\r\n      )\r\n    }\r\n  }\r\n\r\n  const renderPrescription = (prescription, index) => {\r\n    const formatTexte = description => {\r\n      let lignes = description.split(' ; ')\r\n      return lignes.map(\r\n        ligne => (ligne + '\\r\\n')\r\n      )\r\n    }\r\n    if (prescription.medicamentsPreconises.length > 0) {\r\n      if (index !== undefined) {\r\n        // const gridStyle = {width: 'auto', padding: '0.2rem 0.5rem'}\r\n        return (\r\n          <div className='infosBase'>\r\n            <Grid container justify='flex-start' direction='row' alignItems='center' spacing={2} >\r\n              <Grid item>\r\n                <Button size='tiny' primary onClick={() => clickOrdonnance(index)}>\r\n                  Ordonnance {index + 1}\r\n                </Button>\r\n              </Grid>\r\n              <Grid item>   {\r\n                prescription.medicamentsPreconises.map(\r\n                  preconisation => <p>{formatTexte(preconisation.description)}</p>)}\r\n              </Grid>\r\n            </Grid>\r\n          </div>\r\n        )\r\n      } else {\r\n        return (\r\n          <div className='infosBase'>   {\r\n            prescription.medicamentsPreconises.map(\r\n              preconisation => <p>{formatTexte(preconisation.description)}</p>)}\r\n          </div>\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>{douleur.libelle}</h3>\r\n      {messageInfo}\r\n      {renderListePrescriptions()}\r\n      {messageRecommandation}\r\n    </div>  )\r\n\r\n}","import { connect } from 'react-redux'\r\nimport React, { Component } from 'react'\r\n\r\nimport { setPreconisations, setPrescriptionChoisie, dataTypes } from \"./OrdonnanceActions\";\r\nimport FicheDouleurComponent from \"./FicheDouleurComponent\";\r\nimport { goToRoute, routes } from '../services/routeService';\r\nimport LoadComponent from '../components/LoadComponent';\r\n\r\nconst mapStateToProps = appState => ({\r\n    prescriptions: appState.ordonnance[dataTypes.PRESCRIPTIONS],\r\n})\r\n\r\nclass FicheDouleur extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.clickPrescription.bind(this)\r\n    }    \r\n\r\n    componentDidMount() {\r\n        let { idDouleur } = this.getRouteParams()\r\n        setPreconisations(idDouleur)\r\n    }\r\n\r\n    getRouteParams() {\r\n        if (this.props.match) {\r\n            return this.props.match.params\r\n        }\r\n        return {}\r\n    }\r\n\r\n    clickPrescription = (index) => {\r\n        setPrescriptionChoisie(this.props.prescriptions[index])\r\n        goToRoute(this.props)(routes.FORMULAIRE_PRESCRIPTION)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <LoadComponent loadedObject={this.props.prescriptions}>\r\n                <FicheDouleurComponent clickOrdonnance={this.clickPrescription} prescriptions={this.props.prescriptions} />               \r\n            </LoadComponent>\r\n        )\r\n    }\r\n}\r\n/**\r\n * La méthode connect() relie le store au composant cible.\r\n * Elle prend en paramètre la fonction \"mapStateToProps\", laquelle prend elle-même en paramètre le state du store.\r\n */\r\nexport default connect(mapStateToProps)(FicheDouleur)\r\n","import React from \"react\";\r\nimport { Form } from \"semantic-ui-react\";\r\n\r\nexport const renderCheckbox = field => (\r\n  <Form.Checkbox\r\n    checked={!!field.input.value}\r\n    name={field.input.name}\r\n    label={field.label}\r\n    onChange={(e, { checked }) => field.input.onChange(checked)}\r\n  />\r\n);\r\n\r\nexport const renderRadio = field => (\r\n  <Form.Radio\r\n    checked={field.input.value === field.radioValue}\r\n    label={field.label}\r\n    name={field.input.name}\r\n    onChange={(e, { checked }) => field.input.onChange(field.radioValue)}\r\n  />\r\n);\r\n\r\nexport const renderSelect = field => (\r\n  <Form.Select\r\n    label={field.label}\r\n    name={field.input.name}\r\n    onChange={(e, { value }) => field.input.onChange(value)}\r\n    options={field.options}\r\n    placeholder={field.placeholder}\r\n    value={field.input.value}\r\n  />\r\n);\r\n\r\nexport const renderTextArea = field => (\r\n  <Form.TextArea\r\n    {...field.input}\r\n    label={field.label}\r\n    placeholder={field.placeholder}\r\n  />\r\n);","export default function Prescription(ordonnancePreconisee) {\r\n\r\n  // L'ordonnance préconisée est reçue du backend et est un objet de la forme suivante :\r\n  // \t.medicamentsPreconises[]\r\n  // \t\t.description\r\n  // \t\t.dureeMin\r\n  // \t\t.dureeMax\r\n  // \t\t.idDouleur\r\n  // \t\t.numOrdonnance\r\n  // \t\t.numMedicament\r\n  // \t\t.compatibilites[]\r\n  // \t\t\t.produit\r\n  // \t\t\t\t.code\r\n  // \t\t\t\t.designation\r\n  // \t\t\t\t.id\r\n  // \t\t\t\t.indesirable\r\n  // \t\t\t\t.indication\r\n  // \t\t\t.dosages\r\n  // \t\t\t.formes\r\n\r\n  this.medicamentsPreconises = ordonnancePreconisee ? ordonnancePreconisee.medicamentsPreconises : []\r\n\r\n  this.nbMedicaments = this.medicamentsPreconises.length\r\n\r\n  this.getProduits = function(numMedicament) {\r\n    if (this.medicamentsPreconises[numMedicament] && this.medicamentsPreconises[numMedicament].compatibilites) {\r\n      return this.medicamentsPreconises[numMedicament].compatibilites.map(compatibilite => compatibilite.produit)\r\n    }\r\n    return null\r\n  }\r\n\r\n  this.getDesignationsProduits = function(numMedicament) {\r\n    const produits = this.getProduits(numMedicament)\r\n    if (produits) {\r\n      return produits.map(produit => produit.designation)\r\n    }\r\n    return null\r\n  }\r\n\r\n\r\n}","import React from \"react\";\r\nimport { Field } from \"redux-form\";\r\nimport { Form, Message, Header, Divider, Label } from \"semantic-ui-react\";\r\nimport * as formAdapter from \"../redux/reduxFormAdapter\"\r\nimport Prescription from \"./PrescriptionObj\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nclass PrescriptionForm extends React.Component {\r\n\r\n  // On reçoit la prescription préconisée en props. Cet objet est utilisé pour construire la Prescription\r\n  constructor(props) {\r\n\r\n    super(props)\r\n    this.prescriptionChoisie = new Prescription(props.prescription)\r\n    this.recapPrescription = props.recapPrescription\r\n    this.medicaments = this.prescriptionChoisie.medicamentsPreconises\r\n    this.libellesMedicaments = this.medicaments.map(\r\n      (medicament, numMedicament) => this.prescriptionChoisie.getDesignationsProduits(numMedicament).join(' + ')\r\n    )\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Form size='small' onSubmit={() => this.props.onSubmit(this.prescriptionSaisie())}>\r\n\r\n        <Message info>Veuillez renseigner la posologie dans le formulaire ci-dessous</Message>\r\n\r\n        {\r\n          this.prescriptionChoisie && this.prescriptionChoisie.medicamentsPreconises.map(\r\n            (medicament, numMedicament) => this.formulaireMedicament(numMedicament)\r\n          )\r\n        }\r\n\r\n        <Field\r\n          component={formAdapter.renderTextArea}\r\n          label=\"Recommandations\"\r\n          name=\"recommandations\"\r\n          placeholder=\"Conseils, effets indésirables à surveiller, cas d'arrêt du traitement...\"\r\n        />\r\n\r\n        <Message>\r\n          <Divider horizontal fitted><Header as='h5'>Récapitulatif</Header></Divider>\r\n          {this.recapPrescription(this.prescriptionSaisie())}\r\n        </Message>\r\n\r\n        <Form.Group inline>\r\n          <Form.Button type='submit' primary>Valider</Form.Button>\r\n          <Form.Button onClick={this.props.reset}>Annuler</Form.Button>\r\n        </Form.Group>\r\n\r\n      </Form>\r\n    )\r\n  }\r\n\r\n  formulaireMedicament(numMedicament) {\r\n\r\n    return (\r\n\r\n      <React.Fragment>\r\n\r\n        <div style={{ padding: '1rem 0' }}><Label>{this.libellesMedicaments[numMedicament]}</Label></div>\r\n\r\n        <input\r\n          name={'medicament' + numMedicament}\r\n          type='hidden'\r\n          index={numMedicament}\r\n          value={this.libellesMedicaments[numMedicament]}\r\n        />\r\n\r\n        <Grid container spacing={1}>\r\n\r\n          {this.prescriptionChoisie.getProduits(numMedicament).map((produit, numProduit) =>\r\n            <Grid item xs={2}>\r\n              <Field component={Form.Input} label={numProduit === 0 ? 'dosage' : ''} name={'dosage' + numMedicament + numProduit} placeholder={produit.designation} required />\r\n            </Grid>\r\n          )}\r\n\r\n          <Grid item xs={4}>\r\n            <Field component={Form.Input} label=\"Quantité / prise\" name={'quantite' + numMedicament} placeholder=\"Nb comprimés\" required />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <Field component={formAdapter.renderSelect} label=\"Forme\" name={'forme' + numMedicament} placeholder=\"Comprimé ...\"\r\n              options={[\r\n                { key: \"forme1\", text: \"Comprimé\", value: \"comprimé(s)\" },\r\n                { key: \"forme2\", text: \"Gélule\", value: \"gélule(s)\" }\r\n              ]}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Field component={Form.Input} label=\"Fréquence\" name={'frequence' + numMedicament} placeholder=\"Nb fois par jour\" required />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Field component={Form.Input} label=\"Durée\" name={'duree' + numMedicament} placeholder=\"Nb de jours\" required />\r\n          </Grid>\r\n\r\n        </Grid>\r\n\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  prescriptionSaisie() {\r\n\r\n    const dosagesProduits = (numMedicament) => {\r\n      const produits = this.prescriptionChoisie.getProduits(numMedicament)\r\n      if (Array.isArray(produits)) {\r\n        const dosagesProduits = produits.map(\r\n          (produit, numProduit) => {\r\n            const dosage = this.props['dosage' + numMedicament + numProduit]\r\n            return { designation: produit.designation, dosage }\r\n          }\r\n        )\r\n        return dosagesProduits\r\n      }\r\n      return null\r\n    }\r\n\r\n    const autresChamps = ['quantite', 'forme', 'frequence', 'duree']\r\n\r\n    let prescpription = {\r\n      nbMedicaments: this.medicaments.length,\r\n      medicaments: [],\r\n      recommandations: this.props.recommandations\r\n    }\r\n\r\n    for (let numMedicament = 0; numMedicament < prescpription.nbMedicaments; numMedicament++) {\r\n      prescpription.medicaments[numMedicament] = {\r\n        libelle: this.libellesMedicaments[numMedicament], // concat(produits, ' + ' )\r\n        produits: dosagesProduits(numMedicament),  // Array of {produit, dosage}\r\n      }\r\n      autresChamps.forEach(champ => {\r\n        prescpription.medicaments[numMedicament][champ] = this.props[champ + numMedicament]\r\n      })\r\n    }\r\n\r\n    return prescpription\r\n  }\r\n\r\n}\r\n\r\nexport default PrescriptionForm;\r\n","import React from 'react'\r\nimport { connect } from \"react-redux\"\r\nimport { reduxForm } from \"redux-form\";\r\nimport { setFormValues } from '../redux/FormActions';\r\n\r\nexport default function FormHandler({ component, formName, reset, children, ...others }) {\r\n\r\n\tlet WrappedComponent = component ? component : children;\r\n\tWrappedComponent = handleForm(WrappedComponent, formName, reset);\r\n\treturn <WrappedComponent {...formName} {...others}> {children} </WrappedComponent>;\r\n}\r\n\r\nexport function handleForm(WrappedComponent, formName, reset) {\r\n\r\n\tconst mapStateToProps = state => {\r\n\t\tlet savedValues = {}\r\n\t\tlet currentValues = {}\r\n\t\tif (!reset || reset !== true) {\r\n\t\t\tsavedValues = state.appForms && formName ? state.appForms[formName] : {}\r\n\t\t}\r\n\t\tif (state.form[formName]) {\r\n\t\t\tcurrentValues = state.form[formName].values\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tinitialValues: savedValues,\r\n\t\t\t[formName]: {...savedValues, ...currentValues},\r\n\t\t\t...currentValues\r\n\t\t}\r\n\t}\r\n\r\n\tclass FormHandler extends React.Component {\r\n\r\n\t\tcomponentDidMount() {\r\n\t\t\tif (reset && reset === true) {\r\n\t\t\t\tsetFormValues(formName, null)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcomponentDidUpdate(prevProps) {\r\n\t\t\tif (reset && reset === true) {\r\n\t\t\t\tsetFormValues(formName, null)\r\n\t\t\t} else if (JSON.stringify(prevProps[formName]) !== JSON.stringify(this.props[formName])) {\r\n\t\t\t\tsetFormValues(formName, this.props[formName])\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\trender() {\r\n\t\t\treturn <WrappedComponent {...this.props} />\r\n\t\t}\r\n\t}\r\n\r\n\treturn connect(mapStateToProps)(reduxForm({ form: formName })(FormHandler))\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import { connect } from 'react-redux'\r\nimport React, { Component, Fragment } from 'react'\r\n\r\nimport PrescriptionForm from \"./PrescriptionForm\";\r\nimport FicheDouleurComponent from './FicheDouleurComponent';\r\nimport { dataTypes, setPrescriptionSaisie } from './OrdonnanceActions';\r\nimport { goToRoute, routes } from '../services/routeService';\r\nimport { formNames } from '../redux/FormActions';\r\nimport FormHandler from '../hoc/FormHandler';\r\n\r\n\r\nconst FORM_NAME = formNames.PRESCRIPTION_FORM\r\n\r\nconst mapStateToProps = state => ({\r\n\tprescriptionChoisie: state.ordonnance[dataTypes.PRESCRIPTION_CHOISIE],\r\n})\r\n\r\nclass PrescriptionService extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.submitPrescription.bind(this)\r\n\t}\r\n\r\n\tsubmitPrescription = prescriptionSaisie => {\r\n\t\t// sauvegarde les valeurs saisies pour les réinjecter en initialValues\r\n\t\t// lorsqu'on revient sur le formulaire\r\n\t\tsetPrescriptionSaisie(prescriptionSaisie)\r\n\t\tgoToRoute(this.props)(routes.FORMULAIRE_ORDONNANCE)\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Fragment>\r\n\t\t\t\t<FicheDouleurComponent prescriptionChoisie={this.props.prescriptionChoisie} />\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.props.prescriptionChoisie &&\r\n\t\t\t\t\t<FormHandler component={PrescriptionForm}\r\n\t\t\t\t\t\tformName={FORM_NAME}\r\n\t\t\t\t\t\tonSubmit={this.submitPrescription}\r\n\t\t\t\t\t\tprescription={this.props.prescriptionChoisie}\r\n\t\t\t\t\t\t// {...this.props[FORM_NAME]}\r\n\t\t\t\t\t\trecapPrescription={recapitulerPrescription}\r\n\t\t\t\t\t/>\r\n\t\t\t\t}\r\n\t\t\t</Fragment>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport const recapitulerPrescription = (prescription) => {\r\n\tconst recapDosage = medicament => (\r\n\t\tArray.isArray(medicament.produits) ? (\r\n\t\t\tmedicament.produits\r\n\t\t\t\t.filter(produit => produit.dosage)\r\n\t\t\t\t.map(produit => produit.designation + ' ' + produit.dosage)\r\n\t\t\t\t.join(' + ')\r\n\t\t) : null\r\n\t)\r\n\tif (prescription && Array.isArray(prescription.medicaments)) {\r\n\t\treturn (\r\n\t\t\tprescription.medicaments.map(\r\n\t\t\t\t(medicament, numMedicament) => (\r\n\t\t\t\t\t<div> {\r\n\t\t\t\t\t\trecapDosage(medicament)\r\n\t\t\t\t\t\t+ (medicament.quantite && medicament.forme ? ', ' + medicament.quantite + ' ' + medicament.forme : '')\r\n\t\t\t\t\t\t+ (medicament.frequence ? ', ' + medicament.frequence + ' fois par jour' : '')\r\n\t\t\t\t\t\t+ (medicament.duree ? ' pendant ' + medicament.duree + ' jours' : '')\r\n\t\t\t\t\t} </div>\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t)\r\n\t}\r\n\treturn null\r\n}\r\n\r\nexport default connect(mapStateToProps)(PrescriptionService)\r\n","import React from 'react'\r\nimport { Field } from 'redux-form';\r\nimport { Form, Popup } from 'semantic-ui-react';\r\n\r\nexport default class FormInput extends React.Component {\r\n\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.openPopup = this.openPopup.bind(this);\r\n\t\tthis.closePopup = this.closePopup.bind(this);\r\n\t\tthis.clickInput = this.clickInput.bind(this);\r\n\t\tthis.state = {\r\n\t\t\topenPopup: true,\r\n\t\t\tindexDisplayError: 0,\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidUpdate() {\r\n\t\tif (this.props.form) {\r\n\t\t\tthis.error = this.props.form['error.' + this.props.name];\r\n\t\t}\r\n\t}\r\n\r\n\tclickInput() {\r\n\t\tif (this.error) {\r\n\t\t\tthis.setState({ indexDisplayError: this.state.indexDisplayError + 1 });\r\n\t\t}\r\n\t}\r\n\r\n\topenPopup() {\r\n\t\tthis.setState({ openPopup: true });\r\n\t}\r\n\r\n\tclosePopup() {\r\n\t\tif (this.state.indexDisplayError > 0) {\r\n\t\t\tthis.setState({ openPopup: false });\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\tlet input;\r\n\r\n\t\tinput = (\r\n\t\t\t<div>\r\n\t\t\t\t<Field component={Form.Input}\r\n\t\t\t\t\terror={this.error !== undefined}\r\n\t\t\t\t\tname={this.props.name}\r\n\t\t\t\t\tonMouseOver={() => this.openPopup()}\r\n\t\t\t\t\tonMouseOut={() => this.closePopup()}\r\n\t\t\t\t\tonClick={() => this.clickInput()}\r\n\t\t\t\t\t{...this.props}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\r\n\t\tif (this.error) {\r\n\t\t\tinput =\r\n\t\t\t\t<Popup open={this.state.openPopup} trigger={input} size='tiny' mouseLeaveDelay={1000} hoverable on='hover'>\r\n\t\t\t\t\t<Popup.Content>\r\n\t\t\t\t\t\t<div className='error'>{this.error}</div>\r\n\t\t\t\t\t</Popup.Content>\r\n\t\t\t\t</Popup>\r\n\t\t}\r\n\r\n\t\treturn input;\r\n\t}\r\n}\r\n","import React from \"react\";\r\nimport { Field } from \"redux-form\";\r\nimport { Form, Message } from \"semantic-ui-react\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nimport * as formAdapter from \"../redux/reduxFormAdapter\";\r\nimport FormInput from \"../utils-components/FormInput\";\r\nimport { formNames } from \"../redux/FormActions\";\r\n\r\nexport default class OrdonnanceForm extends React.Component {\t\r\n\r\n  render() {\r\n\r\n\t\tconst form = this.props[formNames.INFOS_PATIENT_FORM];\r\n\r\n    return (\r\n      <Form size='small' onSubmit={(event) => this.props.onSubmit(form, event)}>\r\n        <Message info>Veuillez renseigner les informations du patient dans le formulaire ci-dessous</Message>\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={3}>\r\n            <FormInput form={form} label=\"Nom de famille\" name='nomPatient' placeholder=\"Nom obligatoire\" required />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <FormInput form={form} label=\"Nom usuel\" name='nomUsuPatient' placeholder=\"Facultatif\" />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <FormInput form={form} label=\"Prénom\" name='prenomPatient' placeholder=\"Prénom\" required />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n\t\t\t\t\t\t<FormInput form={form} name='dateNaissance' placeholder=\"jj/mm/aaaa\" label=\"Date naissance\" required />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <FormInput form={form} label=\"N° immatriculation\" name='insee' placeholder=\"n° sur 13 car\" required />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <div className='field'><label>Sexe</label></div>\r\n            <Form.Group inline>\r\n              <Field\r\n                component={formAdapter.renderRadio}\r\n                label=\"Masculin\"\r\n                className='field'\r\n                name=\"sexe\"\r\n                radioValue='M'\r\n              />\r\n              <Field\r\n                component={formAdapter.renderRadio}\r\n                label=\"Féminin\"\r\n                className='field'\r\n                name=\"sexe\"\r\n                radioValue='F'\r\n              />\r\n            </Form.Group>\r\n          </Grid>\r\n        </Grid>\r\n        <p></p>\r\n        <Form.Group inline>\r\n          <Form.Button type='submit' primary>Délivrer cette ordonnance</Form.Button>\r\n          <Form.Button type='reset'>Annuler</Form.Button>\r\n        </Form.Group>\r\n      </Form>\r\n    )\r\n  }\r\n\r\n}","import React, { Component, Fragment } from 'react'\r\nimport { connect } from \"react-redux\"\r\nimport { Message, Divider, Header, Label } from 'semantic-ui-react'\r\n\r\nimport { dataTypes, setOrdonnanceEmise } from './OrdonnanceActions'\r\nimport { recapitulerPrescription } from './PrescriptionService'\r\nimport OrdonnanceForm from './OrdonnanceForm';\r\nimport { formNames } from '../redux/FormActions'\r\nimport {handleForm} from '../hoc/FormHandler'\r\n\r\nconst FORM_NAME = formNames.INFOS_PATIENT_FORM\r\n\r\nconst mapStateToProps = state => {\r\n\tconst prescriptionSaisie = state.ordonnance[dataTypes.PRESCRIPTION_SAISIE]\r\n\tconst libelleDouleur = state.ordonnance[dataTypes.PRESCRIPTION_CHOISIE] ?\r\n\t\tstate.ordonnance[dataTypes.PRESCRIPTION_CHOISIE].nomenclatureDouleur.libelle : ''\r\n\treturn {\r\n\t\tprescriptionSaisie, libelleDouleur,\r\n\t}\r\n}\r\n\r\n\r\nclass OrdonnanceService extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.submitOrdonnance.bind(this)\r\n\t}\r\n\r\n\tsubmitOrdonnance = (infosPatient, event) => {\r\n\t\tlet ordonnance = {\r\n\t\t\tinfosPatient,\r\n\t\t\tprescription: this.props.prescriptionSaisie\r\n\t\t}\r\n\t\tsetOrdonnanceEmise(ordonnance, this.props.history)\r\n\t\tevent.preventDefault()\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst prescription = this.props.prescriptionSaisie\r\n\t\tconst infosPatient = this.props[FORM_NAME]\r\n\t\treturn (\r\n\t\t\tprescription ?\r\n\t\t\t\t<Fragment>\r\n\t\t\t\t\t<h3>{this.props.libelleDouleur}</h3>\r\n\t\t\t\t\t<OrdonnanceForm onSubmit={this.submitOrdonnance}\t{...this.props} />\r\n\t\t\t\t\t<p></p>\r\n\r\n\t\t\t\t\t<Message>\r\n\r\n\t\t\t\t\t\t<Divider horizontal fitted><Header as='h5'>Votre ordonnance</Header></Divider>\r\n\r\n\t\t\t\t\t\t{infosPatient && (\r\n\t\t\t\t\t\t\t<Fragment>\r\n\t\t\t\t\t\t\t\t<Label>Patient</Label>\r\n\t\t\t\t\t\t\t\t<div style={{ margin: '20px 10px' }}>\r\n\t\t\t\t\t\t\t\t\t{recapitulerInfosPatient(infosPatient)}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</Fragment>\r\n\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t<Label>Prescription</Label>\r\n\t\t\t\t\t\t<div style={{ margin: '20px 10px' }}>\r\n\t\t\t\t\t\t\t{recapitulerPrescription(prescription)}\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tprescription.recommandations &&\r\n\t\t\t\t\t\t\t\t<p> <b> Recommandations </b>\r\n\t\t\t\t\t\t\t\t\t<div className='infosBase'>{prescription.recommandations}</div>\r\n\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t</Message>\r\n\t\t\t\t</Fragment>\r\n\t\t\t\t:\r\n\t\t\t\t<Message error> Erreur : Aucune prescription saisie !!! </Message>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport const recapitulerInfosPatient = (infosPatient) => {\r\n\tif (infosPatient) {\r\n\t\treturn (\r\n\t\t\t<div> {\r\n\t\t\t\tObject.keys(infosPatient).map(\r\n\t\t\t\t\tkey => {\r\n\t\t\t\t\t\tswitch (key) {\r\n\t\t\t\t\t\t\tcase 'nomPatient': return infosPatient[key]\r\n\t\t\t\t\t\t\tcase 'dateNaissance': return ' - né(e) le ' + infosPatient[key]\r\n\t\t\t\t\t\t\tcase 'insee': return <p>n° immatriculation {infosPatient[key]}</p>\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tcase 'nomUsuPatient': return ' - ' + infosPatient[key]\r\n\t\t\t\t\t\t\tcase 'prenomPatient': return ' - ' + infosPatient[key]\r\n\t\t\t\t\t\t\tdefault: return ''\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t} </div>\r\n\t\t)\r\n\r\n\t}\r\n\treturn null\r\n}\r\n\r\nexport default connect(mapStateToProps)(handleForm(OrdonnanceService, FORM_NAME))\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Message, Button, Icon } from 'semantic-ui-react'\r\nimport LoadComponent from \"../components/LoadComponent\";\r\nimport { dataTypes } from './OrdonnanceActions';\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {\r\n\t\tordonnance: state.ordonnance[dataTypes.ORDONNANCE_EMISE],\r\n\t}\r\n}\r\n\r\nfunction OrdonnanceConfirm({ ordonnance, ...others }) {\r\n\treturn (\r\n\t\t<LoadComponent loadedObject={ordonnance}>\r\n\t\t\t{ordonnance && ordonnance.fileURL ?\r\n\t\t\t\t<Message info>\r\n\t\t\t\t\t<p>Votre ordonnance a bien été enregistrée.</p>\r\n\t\t\t\t\t<p>Si elle ne s'affiche pas automatiquement, vous pouvez y accéder en cliquant le lien suivant</p>\r\n\t\t\t\t\t<a id='ordo' title='ordonnance émise' href={ordonnance.fileURL} target='_blank' rel='noopener noreferrer'>\r\n\t\t\t\t\t\t<Button primary icon labelPosition='left' size='small'>\r\n\t\t\t\t\t\t\t<Icon name='file outline' />\r\n\t\t\t\t\t\t\tEditer l'ordonnance\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</Message>\r\n\t\t\t\t:\r\n\t\t\t\t<Message error>\r\n\t\t\t\t\tUn problème est survenu : l'ordonnance n'a pas pu être émise. Veuillez recommencer ultérieurement\r\n\t\t\t\t</Message>\r\n\t\t\t}\r\n\t\t</LoadComponent>\r\n\r\n\r\n\t)\r\n}\r\n\r\nexport default connect(mapStateToProps)(OrdonnanceConfirm)\r\n\r\n","import { generatePath } from \"react-router\";\r\n\r\nimport ArborescenceService from \"../ordonnance/ArborescenceService\"\r\nimport FicheDouleurService from \"../ordonnance/FicheDouleurService\"\r\nimport PrescriptionService from \"../ordonnance/PrescriptionService\"\r\nimport OrdonnanceService from \"../ordonnance/OrdonnanceService\";\r\nimport OrdonnanceConfirm from \"../ordonnance/OrdonnanceConfirm\";\r\n\r\nconst basePath = '/clientApp'\r\n\r\nexport const routes = {\r\n    ARBORESCENCE: 'arborescence',\r\n    FICHE_DOULEUR: 'ficheDouleur',\r\n    FORMULAIRE_PRESCRIPTION: 'formulairePrescription',\r\n    FORMULAIRE_ORDONNANCE: 'formulaireOrdonnance',\r\n\t\tCONFIRMATION_ORDONNANCE: 'confirmationOrdonnance',\r\n    HISTORIQUE: 'historique',\r\n    LIENS: 'liens',\r\n}\r\n\r\nexport const routesConfig = [\r\n    { key: routes.ARBORESCENCE, path: `${basePath}/douleurs`, component: ArborescenceService },\r\n    { key: routes.FICHE_DOULEUR, path: `${basePath}/douleurs/:idDouleur`, component: FicheDouleurService },\r\n    { key: routes.FORMULAIRE_PRESCRIPTION, path: `${basePath}/prescriptionForm`, component: PrescriptionService },\r\n    { key: routes.FORMULAIRE_ORDONNANCE, path: `${basePath}/ordonnanceForm`, component: OrdonnanceService },\r\n\t\t{ key: routes.CONFIRMATION_ORDONNANCE, path: `${basePath}/ordonnanceConfirm`, component: OrdonnanceConfirm },\r\n]\r\n\r\nexport const getRoutePath = (route, pathParams) => (\r\n    generatePath(routesConfig.filter(element => element.key === route)\r\n        .map(config => config.path).join(), pathParams)\r\n)\r\n\r\nexport const goToRoute = props => {\r\n    let { history } = props    \r\n    if (!history) {\r\n        history = props\r\n    }\r\n    return (route, pathParams) => history.push(getRoutePath(route, pathParams))\r\n}","import { createStore, combineReducers } from \"redux\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\nimport ordonnanceReducer from \"../ordonnance/OrdonnanceActions\";\r\nimport formsReducer from \"./FormActions\";\r\n\r\n/**\r\n * C'est ici qu'il faut référencer les différents reducers de l'appli Redux.\r\n * Ce sont des fonctions qui doivent être définies dans les composants *Actions.js \r\n * et qui ont pour responsabilité de calculer le nouvel état du store en fonction \r\n * des actions effectuées.\r\n */\r\nconst reducers = combineReducers({\r\n   ordonnance: ordonnanceReducer,\r\n   form: formReducer,\r\n   appForms : formsReducer\r\n})\r\n\r\n// les reducers sont chargés de la mise à jour du store lorsque celui ci reçoit une action\r\nexport const store = createStore(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n\r\nexport function getState(namespace) {\r\n    return store.getState()[namespace]\r\n}\r\n\r\nexport default function dispatchData(type, content) {\r\n    store.dispatch({ type, content })\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport { slide as Menu } from 'react-burger-menu'\r\n\r\nimport { getRoutePath, routes } from \"../services/routeService\";\r\nimport './MenuBar.css'\r\n\r\n\r\nexport default function MenuBar() {\r\n    return (\r\n        <Menu>\r\n            <a className=\"menu-item accueil\" href=\"/\">Accueil</a>\r\n            <a className=\"menu-item ordonnance\" href={getRoutePath(routes.ARBORESCENCE)}>Ordonnance</a>\r\n            <a className=\"menu-item histo\" href={getRoutePath(routes.HISTORIQUE)}>Historique</a>\r\n            <a className=\"menu-item lien\" href={getRoutePath(routes.LIENS)}>Liens</a>\r\n        </Menu>\r\n    )\r\n}","import React from 'react'\r\nimport { Message } from 'semantic-ui-react'\r\n\r\n\r\nconst Accueil = function (props) {\r\n\r\n    return (\r\n        <Message info>\r\n            {props.message}<br />\r\n        </Message>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Accueil\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\n\r\n\r\nexport default class Test extends React.Component {\r\n\r\n\ttableau = [\r\n\t\t{ nom: 'TPO' },\r\n\t\t{ nom: 'GDC' },\r\n\t\t{ nom: 'SUIVI AMC' },\r\n\t\t{ nom: 'esope' },\r\n\t]\r\n\r\n\r\n\trender() {\r\n\r\n\t\treturn ''\r\n\t\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n\r\n/**\r\n *    ====>    Autocomplétion avec material-ui\r\n */\r\n\r\n// function Test(props) {\r\n\r\n//     const defaultProps = {\r\n//         options: top100Films,\r\n//         getOptionLabel: option => option.title,\r\n//     };\r\n\r\n//     const [value, setValue] = React.useState([]);\r\n\r\n//     return (\r\n//         <div >\r\n\r\n//             <p>Choix : {\r\n//                 (Array.isArray(value) && value.map(item => <p>{item.id}</p>)) ||\r\n//                 (value && value.id ? value.id : (value ? value : ''))\r\n//             } </p>\r\n\r\n//             <Grid container spacing={2}>\r\n//                 <Grid item xs={3}>\r\n//                     <Autocomplete\r\n//                         {...defaultProps}\r\n//                         id=\"include-input-in-list\"\r\n//                         freeSolo\r\n//                         renderInput={params => (\r\n//                             <TextField {...params} label=\"includeInputInList\" fullWidth />\r\n//                         )}\r\n//                     />\r\n//                 </Grid>\r\n//                 <Grid item xs={3}>\r\n//                     <Autocomplete\r\n//                         id=\"controlled-demo\"\r\n//                         options={[{ id: '400 mg' }, { id: '500 mg' },]}\r\n//                         getOptionLabel={option => option.id}\r\n//                         // disableOpenOnFocus\r\n//                         clearOnEscape\r\n//                         freeSolo\r\n//                         // multiple\r\n//                         value={value}\r\n//                         onChange={(event, newValue) => { setValue(newValue); }}\r\n//                         renderInput={params => (\r\n//                             <TextField {...params} label=\"dosage\" fullWidth />\r\n//                         )}\r\n//                     />\r\n//                 </Grid>\r\n\r\n//             </Grid>\r\n\r\n\r\n\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// // Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\n// const top100Films = [\r\n//     { title: 'The Shawshank Redemption', year: 1994 },\r\n//     { title: 'The Godfather', year: 1972 },\r\n//     { title: 'The Godfather: Part II', year: 1974 },\r\n//     { title: 'The Dark Knight', year: 2008 },\r\n//     { title: '12 Angry Men', year: 1957 },\r\n//     { title: \"Schindler's List\", year: 1993 },\r\n//     { title: 'Pulp Fiction', year: 1994 },\r\n//     { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n//     { title: 'Life Is Beautiful', year: 1997 },\r\n//     { title: 'The Usual Suspects', year: 1995 },\r\n//     { title: 'Léon: The Professional', year: 1994 },\r\n//     { title: 'Spirited Away', year: 2001 },\r\n//     { title: 'Saving Private Ryan', year: 1998 },\r\n//     { title: 'Once Upon a Time in the West', year: 1968 },\r\n//     { title: 'American History X', year: 1998 },\r\n//     { title: 'Interstellar', year: 2014 },\r\n//     { title: 'Casablanca', year: 1942 },\r\n//     { title: 'City Lights', year: 1931 },\r\n//     { title: 'Psycho', year: 1960 },\r\n//     { title: 'The Green Mile', year: 1999 },\r\n//     { title: 'The Intouchables', year: 2011 },\r\n//     { title: 'Modern Times', year: 1936 },\r\n//     { title: 'Raiders of the Lost Ark', year: 1981 },\r\n//     { title: 'Rear Window', year: 1954 },\r\n//     { title: 'The Pianist', year: 2002 },\r\n//     { title: 'The Departed', year: 2006 },\r\n//     { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n//     { title: 'Back to the Future', year: 1985 },\r\n//     { title: 'Paths of Glory', year: 1957 },\r\n//     { title: 'Django Unchained', year: 2012 },\r\n//     { title: 'The Shining', year: 1980 },\r\n//     { title: 'WALL·E', year: 2008 },\r\n//     { title: 'American Beauty', year: 1999 },\r\n//     { title: 'The Dark Knight Rises', year: 2012 },\r\n//     { title: 'Princess Mononoke', year: 1997 },\r\n//     { title: 'Aliens', year: 1986 },\r\n//     { title: 'Oldboy', year: 2003 },\r\n//     { title: 'Once Upon a Time in America', year: 1984 },\r\n//     { title: 'Witness for the Prosecution', year: 1957 },\r\n//     { title: 'Das Boot', year: 1981 },\r\n//     { title: 'Citizen Kane', year: 1941 },\r\n//     { title: 'North by Northwest', year: 1959 },\r\n//     { title: 'Vertigo', year: 1958 },\r\n//     { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\r\n//     { title: 'Reservoir Dogs', year: 1992 },\r\n//     { title: 'Braveheart', year: 1995 },\r\n//     { title: 'M', year: 1931 },\r\n//     { title: 'Requiem for a Dream', year: 2000 },\r\n// ];\r\n\r\n// export default Test","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nimport MainApp from './App'\r\n\r\nReactDOM.render( <MainApp />, document.getElementById('react-app'))\r\n","import React from 'react'\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { Header, Segment } from 'semantic-ui-react';\r\n\r\nimport { store } from \"./redux/store\";\r\nimport { routesConfig } from \"./services/routeService\";\r\nimport \"./App.css\";\r\n// import \"./assets/bootstrap-slate.css\";\r\nimport Menu from \"./components/MenuBar\";\r\nimport Accueil from \"./components/Accueil\";\r\nimport Test from './Test';\r\n\r\nexport default function App() {\r\n\r\n  const msgBienvenue = (\r\n    <div>\r\n        <p>Bienvenue dans Pain Control Pro</p>\r\n        <p>L'application qu'il vous faut pour gérer la douleur de vos patients</p>\r\n        <p>Cliquez sur le menu en haut à gauche et sélectionnez votre choix</p>\r\n    </div>\r\n  )\r\n\r\n  return (\r\n    // le Provider permet la connexion des composants enfants au store\r\n    <Provider store={store}>\r\n\r\n      {/** le Router transmets la prop history à tous les composants enfants */}\r\n      <Router>\r\n\r\n        <Menu />\r\n\r\n        <Header as=\"h2\" color=\"grey\" textAlign=\"center\" inverted dividing style={{\r\n          margin: 0, paddingTop: '1.5rem', paddingBottom: '1.5rem', position: 'fixed', top: 0, left: 0, \r\n          zIndex: 900, background: 'rgb(0, 0, 0)', minWidth: '100%'\r\n        }}>\r\n          <span> Pain Control Pro </span>\r\n        </Header>\r\n\r\n        <Segment className='center' style={{ top: '6rem', height: '900px', overflow: 'auto' }}>\r\n\r\n          <Route exact path='/' render={props => <Accueil {...props} message={msgBienvenue} />} />\r\n          \r\n          {routesConfig.map(\r\n            config => (<Route exact {...config} />)            \r\n          )}\r\n\r\n          \r\n           <Test className='infosBase'>\r\n          </Test>  \r\n\r\n        </Segment>\r\n\r\n      </Router>\r\n\r\n\r\n    </Provider>\r\n  )\r\n\r\n}"],"sourceRoot":""}