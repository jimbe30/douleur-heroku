{"version":3,"sources":["components/TruncBox.js","ordonnance/ArborescenceComponent.js","ordonnance/ArborescenceService.js","redux/OrdonnanceActions.js","ordonnance/FicheDouleurComponent.js","redux/reduxFormAdapter.js","ordonnance/PrescriptionObj.js","ordonnance/OrdonnanceForm.js","ordonnance/FicheDouleurService.js","ordonnance/OrdonnanceService.js","config/URLs-conf.js","redux/reducers.js","redux/store.js","components/MenuBar.js","components/Accueil.jsx","index.jsx","App.jsx"],"names":["TruncBox","props","className","children","width","height","moreText","lessText","rest","Object","objectWithoutProperties","style","react_default","a","createElement","concat","truncated","onClick","e","target","previousSibling","Fragment","assign","Arborescence","handleClickDouleur","buttonStyle","float","maxWidth","marginTop","marginBottom","marginRight","Entree","_ref","data","libelle","infosGenerales","idDouleur","retour","title","content","Button","components_TruncBox","Accordion","styled","panels","Branche","_ref2","nomenclaturesEnfants","Array","isArray","entreesAffichables","map","nomenclature","titre","id","length","_ref3","nomenclatures","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","goToRoute","history","routes","FICHE_DOULEUR","bind","assertThisInitialized","_setArborescence","apply","arguments","setArborescence","Message","info","ArborescenceComponent_Arborescence","Component","connect","appState","ordonnance","arborescence","FicheDouleurComponent","prescriptions","prescriptionChoisie","clickOrdonnance","douleur","nomenclatureDouleur","infos","recommandations","nbPreco","messageInfo","warning","messageRecommandation","Divider_Divider","horizontal","fitted","Header","as","renderPrescription","prescription","medicamentsPreconises","preconisation","description","split","ligne","react","index","Label","renderSelect","field","Form","Select","label","name","input","onChange","value","options","placeholder","renderTextArea","TextArea","Prescription","nbMedicaments","getProduits","numMedicament","compatibilites","compatibilite","produit","getDesignationsProduits","produits","designation","OrdonnanceForm","medicaments","libellesMedicaments","medicament","join","_this2","size","onSubmit","ordonnanceSaisie","formulaireMedicament","Field","component","formAdapter","getRecapitulatif","Group","inline","type","primary","reset","padding","Grid","container","spacing","numProduit","item","xs","Input","required","key","text","_this3","designationProduit","dosageProduit","_this4","_this5","getRecapDosage","_this6","autresChamps","_loop","dosages","getDosages","forEach","champ","React","FicheDouleur","setState","choixOrdonnance","console","log","submitOrdonnance","form","body","JSON","stringify","state","match","params","setPreconisations","getRouteParams","ordonnance_OrdonnanceForm","formValues","reduxForm","values","OrdonnanceService","onClickOrdonnance","apiURLs","arborescenceDouleurs","ficheDouleur","path","ARBORESCENCE","FORMULAIRE_ORDONNANCE","HISTORIQUE","LIENS","routesConfig","ArborescenceService","FicheDouleurService","getRoutePath","route","generatePath","filter","element","config","push","ordonnanceActions","SET_PRESCRIPTIONS","SET_ARBORESCENCE","_x","_setPreconisations","_callee2","result","regenerator_default","wrap","_context2","prev","next","getResultFromUrl","urls","sent","dispatchAction","stop","_callee3","_context3","asyncToGenerator","mark","_callee","url","_context","axios","get","then","response","abrupt","t0","_x2","combineReducers","undefined","action","objectSpread","formReducer","store","createStore","reducers","actionType","actionContent","dispatch","MenuBar","BurgerMenu","href","Accueil","actif","message","ReactDOM","render","msgBienvenue","es","react_router_dom","MenuBar_MenuBar","color","textAlign","inverted","dividing","margin","paddingTop","paddingBottom","position","top","left","zIndex","background","minWidth","Segment","react_router","exact","components_Accueil","Divider","document","getElementById"],"mappings":"0bAiEeA,MA/Df,SAAkBC,GAAO,IAEdC,EAAmED,EAAnEC,UAAWC,EAAwDF,EAAxDE,SAAUC,EAA8CH,EAA9CG,MAAOC,EAAuCJ,EAAvCI,OAAQC,EAA+BL,EAA/BK,SAAUC,EAAqBN,EAArBM,SAAaC,EAF7CC,OAAAC,EAAA,EAAAD,CAEqDR,EAFrD,iEAIfU,EACFC,EAAAC,EAAAC,cAAA,4EAAAC,OAEsBV,EAASA,EAAS,IAAI,QAF5C,iCAAAU,OAGqBX,EAAQA,EAAQ,IAAI,QAHzC,6BAAAW,OAIiBX,EAAQA,EAAQ,IAAI,QAJrC,2dAAAW,OAmBoBT,GAAsB,WAnB1C,oCAAAS,OAoBsBT,EAAoB,QAAT,OApBjC,sFAAAS,OAuBoBR,GAAsB,WAvB1C,mCAAAQ,OAwBsBR,EAAoB,QAAT,OAxBjC,+BA6BAS,GAAY,EAEVC,EAAU,SAAAC,GACRF,GACAE,EAAEC,OAAOjB,UAAY,QACrBgB,EAAEC,OAAOC,gBAAgBlB,UAAYA,GAAuB,GAC5Dc,GAAY,IAEZE,EAAEC,OAAOjB,UAAY,SACrBgB,EAAEC,OAAOC,gBAAgBlB,UAAzB,GAAAa,OAAwCb,EAAYA,EAAY,IAAM,GAAtE,aACAc,GAAY,IAgBpB,OAVQJ,EAAAC,EAAAC,cAACF,EAAAC,EAAMQ,SAAP,KACKV,EACDC,EAAAC,EAAAC,cAAA,MAAAL,OAAAa,OAAA,CAAKpB,UAAS,GAAAa,OAAKb,EAAYA,EAAY,IAAM,GAAnC,cAAsDM,GAC/DL,GAELS,EAAAC,EAAAC,cAAA,OAAKG,QAASA,EAASf,UAAU,aCpDlC,SAASqB,EAAatB,GAAO,IAEhCuB,EAAuBvB,EAAvBuB,mBAEFC,EAAc,CAAEC,MAAO,QAASC,SAAU,OAAQC,UAAW,QAASC,aAAc,MAAOC,YAAa,MAExGC,EAAS,SAAAC,GAAkD,IAC9BC,EADRC,EAAsCF,EAAtCE,QAASC,EAA6BH,EAA7BG,eAAgBC,EAAaJ,EAAbI,UAiB1CC,EAAS,CAAC,CACZC,MAAOJ,EACPK,QAAS,CAAEA,SAlBgBN,EAeFE,GAZjBvB,EAAAC,EAAAC,cAACF,EAAAC,EAAMQ,SAAP,KACIT,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAQ7B,MAAOc,EAAaR,QAAS,kBAAMO,EAAmBY,KAA9D,sBAGAxB,EAAAC,EAAAC,cAAC2B,EAAD,CAAUpC,OAAO,OAAOC,SAAS,2BAAsBC,SAAS,6BAC5DK,EAAAC,EAAAC,cAAA,OAAKZ,UAAU,aAAa+B,KAKrC,MAOX,OAAQrB,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAWC,QAAM,EAACC,OAAQP,KAGhCQ,EAAU,SAAVA,EAAUC,GAAsD,IAA1CZ,EAA0CY,EAA1CZ,QAASa,EAAiCD,EAAjCC,qBAAyBvC,EAAQC,OAAAC,EAAA,EAAAD,CAAAqC,EAAA,oCAC5DT,EAAS,CAAC,CACZC,MAAOJ,EACPK,QAAS,KAEb,GAAIQ,GAAwBC,MAAMC,QAAQF,GAAuB,CAC7D,IAAIG,EAAqBH,EAAqBI,IAAI,SAAAC,GAC9C,IAAIC,EAAQD,EAAalB,QACrBC,EAAiBiB,EAAajB,eAC9BC,EAAYgB,EAAaE,GAC7B,OAAIF,EAAaL,sBAAwBK,EAAaL,qBAAqBQ,OAAS,EACzE3C,EAAAC,EAAAC,cAAC+B,EAADpC,OAAAa,OAAA,CAASY,QAASmB,EAAON,qBAAsBK,EAAaL,sBAA0BvC,IAGtFI,EAAAC,EAAAC,cAACiB,EAADtB,OAAAa,OAAA,CAAQY,QAASmB,EAAOlB,eAAgBA,EAAgBC,UAAWA,GAAe5B,MAG7F+B,EAAU3B,EAAAC,EAAAC,cAAA,WAAMoC,GACpBb,EAAO,GAAGE,QAAU,CAAEA,WAO1B,OAAO3B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAWC,QAAM,EAACC,OAAQP,KAgBrC,OACIzB,EAAAC,EAAAC,cAdU,SAAA0C,GAAsC,IAA1BC,EAA0BD,EAA1BC,cAAkBjD,EAAQC,OAAAC,EAAA,EAAAD,CAAA+C,EAAA,mBAChD,OACI5C,EAAAC,EAAAC,cAAA,WACIkC,MAAMC,QAAQQ,IAAkBA,EAAcN,IAC1C,SAAAC,GACI,OAAOxC,EAAAC,EAAAC,cAAC+B,EAADpC,OAAAa,OAAA,CAASY,QAASkB,EAAalB,QAASa,qBAAsBK,EAAaL,sBAA0BvC,QASjHP,gBClEbsB,cAEF,SAAAA,EAAYtB,GAAO,IAAAyD,EAAA,OAAAjD,OAAAkD,EAAA,EAAAlD,CAAAmD,KAAArC,IACfmC,EAAAjD,OAAAoD,EAAA,EAAApD,CAAAmD,KAAAnD,OAAAqD,EAAA,EAAArD,CAAAc,GAAAwC,KAAAH,KAAM3D,KAQVuB,mBAAqB,SAACY,GAClB4B,GAAUN,EAAKzD,MAAMgE,QAArBD,CAA8BE,EAAOC,cAAe,CAAC/B,eARrDsB,EAAKlC,mBAAmB4C,KAAxB3D,OAAA4D,EAAA,EAAA5D,CAAAiD,IAFeA,oFCChB,WAAPY,GAAAC,MAAAX,KAAAY,WDKQC,oCAQA,OACI7D,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CAASC,MAAI,GAAb,6EACA/D,EAAAC,EAAAC,cAAC8D,EAADnE,OAAAa,OAAA,GAA2BsC,KAAK3D,MAAhC,CAAuCuB,mBAAoBoC,KAAKpC,8BAnBrDqD,aAqCZC,cARS,SAAAC,GAAQ,MAAK,CACjCtB,cAAesB,EAASC,WAAWC,eAOxBH,CAAyBvD,8BE7CzB,SAAS2D,EAAsBjF,GAAO,IAE3CkF,EAAwDlF,EAAxDkF,cAAeC,EAAyCnF,EAAzCmF,oBAAqBC,EAAoBpF,EAApBoF,gBAOxCC,EAAU,WACZ,IAAIC,EAAsB,KAM1B,OALIH,EACFG,EAAsBH,EAAoBG,oBACjCJ,GAAiBA,EAAc5B,OAAS,IACjDgC,EAAsBJ,EAAc,GAAGI,qBAErCA,EACK,CACLrD,QAASqD,EAAoBrD,QAC7BsD,MAAOD,EAAoBpD,eAC3BsD,gBAAiBF,EAAoBE,iBAGlC,IAETH,EAAUA,IAEV,IAAII,EAAUP,GAAiBA,EAAc5B,OAAS,EAAI4B,EAAc5B,OAAS,EAG7EoC,EAAc,WAChB,OAAIP,EAEAxE,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CAASC,MAAI,GAAb,0CAIU,IAAZe,EACE9E,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CAASkB,SAAO,GAAhB,iEACAhF,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CAASC,MAAI,GAAb,IAAA5D,OACO2E,EADP,eAAA3E,OAC4B2E,EAAU,EAAI,2BAA0B,wBADpE,KAEE9E,EAAAC,EAAAC,cAAA,WAFF,4CAMN6E,EAAcA,IAGd,IAAIE,GACDT,GAAuBE,EAAQG,iBAAmBH,EAAQG,gBAAgBlC,OAAS,EAClF3C,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CAASkB,SAAO,EAAC1F,UAAU,aACzBU,EAAAC,EAAAC,cAACgF,EAAA,EAAD,CAASC,YAAU,EAACC,QAAM,GAACpF,EAAAC,EAAAC,cAACmF,EAAA,EAAD,CAAQC,GAAG,MAAX,cAC1BZ,EAAQG,iBACE,GA8BXU,EAAqB,SAACC,GAO1B,GAAIA,EAAaC,sBAAsB9C,OAAS,EAC9C,OACE3C,EAAAC,EAAAC,cAAA,OAAKZ,UAAU,aAAf,IACEkG,EAAaC,sBAAsBlD,IACjC,SAAAmD,GAAa,OAAI1F,EAAAC,EAAAC,cAAA,SAAgBwF,EAAcC,YAT5BC,MAAM,OACjBrD,IACZ,SAAAsD,GAAK,OAAKA,EAAQ,cAaxB,OACE7F,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKwE,EAAQpD,SACZyD,EA7CCP,EAEAxE,EAAAC,EAAAC,cAAC4F,EAAA,SAAD,KACGP,EAAmBf,GACpBxE,EAAAC,EAAAC,cAACgF,EAAA,EAAD,OAIGJ,EAAU,EACVP,EAAchC,IACnB,SAACiD,EAAcO,GAAf,OACE/F,EAAAC,EAAAC,cAAC4F,EAAA,SAAD,KACE9F,EAAAC,EAAAC,cAAC8F,EAAA,EAAD,CAAOV,GAAG,IAAIjF,QAAS,kBAAMoE,EAAgBsB,KAA7C,cACcA,EAAQ,GAErBR,EAAmBC,GACpBxF,EAAAC,EAAAC,cAACgF,EAAA,EAAD,cARH,EAuCFD,yBCvFMgB,EAAe,SAAAC,GAAK,OAC/BlG,EAAAC,EAAAC,cAACiG,EAAA,EAAKC,OAAN,CACEC,MAAOH,EAAMG,MACbC,KAAMJ,EAAMK,MAAMD,KAClBE,SAAU,SAAClG,EAADsC,GAAA,IAAM6D,EAAN7D,EAAM6D,MAAN,OAAkBP,EAAMK,MAAMC,SAASC,IACjDC,QAASR,EAAMQ,QACfC,YAAaT,EAAMS,YACnBF,MAAOP,EAAMK,MAAME,SAIVG,EAAiB,SAAAV,GAAK,OACjClG,EAAAC,EAAAC,cAACiG,EAAA,EAAKU,SAANhH,OAAAa,OAAA,GACMwF,EAAMK,MADZ,CAEEF,MAAOH,EAAMG,MACbM,YAAaT,EAAMS,gBCpCR,SAASG,EAAa1C,GAEnCpB,KAAKyC,sBAAwBrB,EAAaA,EAAWqB,sBAAwB,GAE7EzC,KAAK+D,cAAgB/D,KAAKyC,sBAAsB9C,OAEhDK,KAAKgE,YAAc,SAASC,GAC1B,OAAIjE,KAAKyC,sBAAsBwB,IAAkBjE,KAAKyC,sBAAsBwB,GAAeC,eAClFlE,KAAKyC,sBAAsBwB,GAAeC,eAAe3E,IAAI,SAAA4E,GAAa,OAAIA,EAAcC,UAE9F,MAGTpE,KAAKqE,wBAA0B,SAASJ,GACtC,IAAMK,EAAWtE,KAAKgE,YAAYC,GAClC,OAAIK,EACKA,EAAS/E,IAAI,SAAA6E,GAAO,OAAIA,EAAQG,cAElC,mBCyKIC,cA/Jb,SAAAA,EAAYnI,GAAO,IAAAyD,EAAA,OAAAjD,OAAAkD,EAAA,EAAAlD,CAAAmD,KAAAwE,IAEjB1E,EAAAjD,OAAAoD,EAAA,EAAApD,CAAAmD,KAAAnD,OAAAqD,EAAA,EAAArD,CAAA2H,GAAArE,KAAAH,KAAM3D,KACDmF,oBAAsB,IAAIsC,EAAazH,EAAM+E,YAClDtB,EAAK2E,YAAc3E,EAAK0B,oBAAoBiB,sBAC5C3C,EAAK4E,oBAAsB5E,EAAK2E,YAAYlF,IAC1C,SAACoF,EAAYV,GAAb,OAA+BnE,EAAK0B,oBAAoB6C,wBAAwBJ,GAAeW,KAAK,SANrF9E,wEAUV,IAAA+E,EAAA7E,KAEP,OACEhD,EAAAC,EAAAC,cAACiG,EAAA,EAAD,CAAM2B,KAAK,QAAQC,SAAU,kBAAMF,EAAKxI,MAAM0I,SAASF,EAAKG,sBAE1DhI,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CAASC,MAAI,GAAb,kEAFF,KAGIf,KAAKwB,qBAAuBxB,KAAKwB,oBAAoBiB,sBAAsBlD,IACzE,SAACoF,EAAYV,GAAb,OAA+BY,EAAKI,qBAAqBhB,KAI7DjH,EAAAC,EAAAC,cAACgI,EAAA,EAAD,CACEC,UAAWC,EACX/B,MAAM,kBACNC,KAAK,kBACLK,YAAY,sFAGd3G,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,KACE9D,EAAAC,EAAAC,cAACgF,EAAA,EAAD,CAASC,YAAU,EAACC,QAAM,GAACpF,EAAAC,EAAAC,cAACmF,EAAA,EAAD,CAAQC,GAAG,MAAX,qBAC1BtC,KAAKqF,oBAGRrI,EAAAC,EAAAC,cAACiG,EAAA,EAAKmC,MAAN,CAAYC,QAAM,GAChBvI,EAAAC,EAAAC,cAACiG,EAAA,EAAKvE,OAAN,CAAa4G,KAAK,SAASC,SAAO,GAAlC,WACAzI,EAAAC,EAAAC,cAACiG,EAAA,EAAKvE,OAAN,CAAavB,QAAS2C,KAAK3D,MAAMqJ,OAAjC,0DAOazB,GAEnB,OAEEjH,EAAAC,EAAAC,cAACF,EAAAC,EAAMQ,SAAP,KAEET,EAAAC,EAAAC,cAAA,OAAKH,MAAO,CAAE4I,QAAS,WAAY3I,EAAAC,EAAAC,cAAC8F,EAAA,EAAD,KAAQhD,KAAK0E,oBAAoBT,KAEpEjH,EAAAC,EAAAC,cAAA,SACEoG,KAAM,aAAeW,EACrBuB,KAAK,SACLzC,MAAOkB,EACPR,MAAOzD,KAAK0E,oBAAoBT,KAGlCjH,EAAAC,EAAAC,cAAC0I,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GAEtB9F,KAAKwB,oBAAoBwC,YAAYC,GAAe1E,IAAI,SAAC6E,EAAS2B,GAAV,OACvD/I,EAAAC,EAAAC,cAAC0I,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GACbjJ,EAAAC,EAAAC,cAACgI,EAAA,EAAD,CAAOC,UAAWhC,IAAK+C,MAAO7C,MAAsB,IAAf0C,EAAmB,SAAW,GAAIzC,KAAM,SAAWW,EAAgB8B,EAAYpC,YAAaS,EAAQG,YAAa4B,UAAQ,OAIlKnJ,EAAAC,EAAAC,cAAC0I,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GACbjJ,EAAAC,EAAAC,cAACgI,EAAA,EAAD,CAAOC,UAAWhC,IAAK+C,MAAO7C,MAAM,sBAAmBC,KAAM,WAAaW,EAAeN,YAAY,kBAAewC,UAAQ,KAE9HnJ,EAAAC,EAAAC,cAAC0I,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GACbjJ,EAAAC,EAAAC,cAACgI,EAAA,EAAD,CAAOC,UAAWC,EAA0B/B,MAAM,QAAQC,KAAM,QAAUW,EAAeN,YAAY,kBACnGD,QAAS,CACP,CAAE0C,IAAK,SAAUC,KAAM,cAAY5C,MAAO,kBAC1C,CAAE2C,IAAK,SAAUC,KAAM,YAAU5C,MAAO,oBAI9CzG,EAAAC,EAAAC,cAAC0I,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GACbjJ,EAAAC,EAAAC,cAACgI,EAAA,EAAD,CAAOC,UAAWhC,IAAK+C,MAAO7C,MAAM,eAAYC,KAAM,YAAcW,EAAeN,YAAY,mBAAmBwC,UAAQ,KAE5HnJ,EAAAC,EAAAC,cAAC0I,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GACbjJ,EAAAC,EAAAC,cAACgI,EAAA,EAAD,CAAOC,UAAWhC,IAAK+C,MAAO7C,MAAM,WAAQC,KAAM,QAAUW,EAAeN,YAAY,cAAcwC,UAAQ,8CASxGlC,GAAe,IAAAqC,EAAAtG,KACtBsE,EAAWtE,KAAKwB,oBAAoBwC,YAAYC,GACtD,OAAI7E,MAAMC,QAAQiF,GACOA,EAAS/E,IAC9B,SAAC6E,EAAS2B,GACR,IAAMQ,EAAqBnC,EAAQG,YAC7BiC,EAAgBF,EAAKjK,MAAM,SAAW4H,EAAgB8B,GAC5D,OAAQS,EAAgBD,EAAqB,IAAMC,EAAgB,KAGjD5B,KAAK,OAEtB,wCAGEX,GAAe,IAAAwC,EAAAzG,KAClBsE,EAAWtE,KAAKwB,oBAAoBwC,YAAYC,GACtD,OAAI7E,MAAMC,QAAQiF,GACOA,EAAS/E,IAC9B,SAAC6E,EAAS2B,GACR,OAAOU,EAAKpK,MAAM,SAAW4H,EAAgB8B,KAK5C,gDAIU,IAAAW,EAAA1G,KACjB,OACEA,KAAKyE,YAAYlF,IACf,SAACoF,EAAYV,GAAb,OACEjH,EAAAC,EAAAC,cAAA,eACEwJ,EAAKC,eAAe1C,IACjByC,EAAKrK,MAAM,WAAa4H,IAAkByC,EAAKrK,MAAM,QAAU4H,GAChE,KAAOyC,EAAKrK,MAAM,WAAa4H,GAAiB,IAAMyC,EAAKrK,MAAM,QAAU4H,GAAiB,KAC3FyC,EAAKrK,MAAM,YAAc4H,GAAiB,KAAOyC,EAAKrK,MAAM,YAAc4H,GAAiB,iBAAmB,KAC9GyC,EAAKrK,MAAM,QAAU4H,GAAiB,YAAcyC,EAAKrK,MAAM,QAAU4H,GAAiB,SAAW,IAL1G,kDAuBN,IAViB,IAAA2C,EAAA5G,KAEX6G,EAAe,CAAC,WAAY,QAAS,YAAa,SAEpDzF,EAAa,CACf2C,cAAe/D,KAAKyE,YAAY9E,OAChC8E,YAAa,GACb5C,gBAAiB7B,KAAK3D,MAAMwF,iBAPbiF,EAAA,SAUR7C,GACP7C,EAAWqD,YAAYR,GAAiB,CACtCU,WAAYiC,EAAKlC,oBAAoBT,GACrC8C,QAASH,EAAKI,WAAW/C,IAE3B4C,EAAaI,QAAQ,SAAAC,GACnB9F,EAAWqD,YAAYR,GAAeiD,GAASN,EAAKvK,MAAM6K,EAAQjD,MAN7DA,EAAgB,EAAGA,EAAgB7C,EAAW2C,cAAeE,IAAiB6C,EAA9E7C,GAST,OAAO7C,SA/KkB+F,IAAMlG,WCA7BmG,cAEF,SAAAA,EAAY/K,GAAO,IAAAyD,EAAA,OAAAjD,OAAAkD,EAAA,EAAAlD,CAAAmD,KAAAoH,IACftH,EAAAjD,OAAAoD,EAAA,EAAApD,CAAAmD,KAAAnD,OAAAqD,EAAA,EAAArD,CAAAuK,GAAAjH,KAAAH,KAAM3D,KAoBVoF,gBAAkB,SAACsB,GACfjD,EAAKuH,SAAS,CACVC,gBAAiBvE,EACjBvB,oBAAqB1B,EAAKzD,MAAMkF,cAAcwB,KAElDwE,QAAQC,IAAI,gCAAgCzE,EAAQ,KA1BrCjD,EA6BnB2H,iBAAmB,SAAAC,GACf,IAAMC,EAAOC,KAAKC,UAAUH,GAC5BH,QAAQC,IAAIG,IA7BZ7H,EAAKgI,MAAQ,CACTR,gBAAiB,KACjB9F,oBAAqB,MAEzB1B,EAAK2B,gBAAgBjB,KAArB3D,OAAA4D,EAAA,EAAA5D,CAAAiD,IANeA,gFAUf,OAAIE,KAAK3D,MAAM0L,MACJ/H,KAAK3D,MAAM0L,MAAMC,OAErB,+CAKPC,GADoBjI,KAAKkI,iBAAnB1J,4CAkBN,OACIxB,EAAAC,EAAAC,cAAC4F,EAAA,SAAD,KACI9F,EAAAC,EAAAC,cAACoE,EAAD,CAAuBG,gBAAiBzB,KAAKyB,gBACzCD,oBAAqBxB,KAAK8H,MAAMtG,oBAAqBD,cAAevB,KAAK3D,MAAMkF,gBAE/EvB,KAAK8H,MAAMtG,qBACXxE,EAAAC,EAAAC,cAACiL,EAADtL,OAAAa,OAAA,CACIqH,SAAU/E,KAAKyH,iBACfrG,WAAYpB,KAAK8H,MAAMtG,qBACnBxB,KAAK3D,MAAM+L,qBA9CZnH,aAsD3BmG,EAAeiB,YAAU,CACrBX,KAAM,cADKW,CAEZjB,GAOH,IASelG,cATS,SAAAC,GAAQ,MAAK,CACjCI,cAAeJ,EAASC,WAAWG,cACnC6G,WAAYjH,EAASuG,KAAKtG,WAAaD,EAASuG,KAAKtG,WAAWkH,OAAS,KAO9DpH,CAAyBkG,GCxElCmB,cAEF,SAAAA,EAAYlM,GAAO,IAAAyD,EAAA,OAAAjD,OAAAkD,EAAA,EAAAlD,CAAAmD,KAAAuI,IACfzI,EAAAjD,OAAAoD,EAAA,EAAApD,CAAAmD,KAAAnD,OAAAqD,EAAA,EAAArD,CAAA0L,GAAApI,KAAAH,KAAM3D,KAoBVoF,gBAAkB,SAACsB,GACfjD,EAAKuH,SAAS,CACVC,gBAAiBvE,EACjBvB,oBAAqB1B,EAAKzD,MAAMkF,cAAcwB,KAElDwE,QAAQC,IAAI,gCAAgCzE,EAAQ,KA1BrCjD,EA6BnB2H,iBAAmB,SAAAC,GACf,IAAMC,EAAOC,KAAKC,UAAUH,GAC5BH,QAAQC,IAAIG,IA7BZ7H,EAAKgI,MAAQ,CACTR,gBAAiB,KACjB9F,oBAAqB,MAEzB1B,EAAK0I,kBAAkBhI,KAAvB3D,OAAA4D,EAAA,EAAA5D,CAAAiD,IANeA,gFAUf,OAAIE,KAAK3D,MAAM0L,MACJ/H,KAAK3D,MAAM0L,MAAMC,OAErB,+CAKPC,GADoBjI,KAAKkI,iBAAnB1J,4CAkBN,OACIxB,EAAAC,EAAAC,cAAC4F,EAAA,SAAD,KACI9F,EAAAC,EAAAC,cAACoE,EAAD,CAAuBG,gBAAiBzB,KAAKyB,gBACzCD,oBAAqBxB,KAAK8H,MAAMtG,oBAAqBD,cAAevB,KAAK3D,MAAMkF,gBAE/EvB,KAAK8H,MAAMtG,qBACXxE,EAAAC,EAAAC,cAACiL,EAADtL,OAAAa,OAAA,CACIqH,SAAU/E,KAAKyH,iBACfrG,WAAYpB,KAAK8H,MAAMtG,qBACnBxB,KAAK3D,MAAM+L,qBA9CPnH,aAsDhCsH,EAAoBF,YAAU,CAC1BX,KAAM,cADUW,CAEjBE,GAOH,IASerH,cATS,SAAAC,GAAQ,MAAK,CACjCI,cAAeJ,EAASC,WAAWG,cACnC6G,WAAYjH,EAASuG,KAAKtG,WAAaD,EAASuG,KAAKtG,WAAWkH,OAAS,KAO9DpH,CAAyBqH,GCzE3BE,EAAU,CACnBC,qBAAsB,yBACtBC,aAAc,SAAAnK,GAAS,MAAI,aAAeA,IAGxCoK,EAAO,aAEAtI,EAAS,CAClBuI,aAAc,eACdtI,cAAe,eACfuI,sBAAuB,uBACvBC,WAAY,aACZC,MAAO,SAGEC,EAAe,CACxB,CAAE7C,IAAK9F,EAAOuI,aAAcD,KAAI,GAAAzL,OAAKyL,EAAL,aAAsBzD,UAAW+D,GACjE,CAAE9C,IAAK9F,EAAOC,cAAeqI,KAAI,GAAAzL,OAAKyL,EAAL,wBAAiCzD,UAAWgE,GAC7E,CAAE/C,IAAK9F,EAAOwI,sBAAuBF,KAAI,GAAAzL,OAAKyL,EAAL,mBAA4BzD,UAAWoD,IAGvEa,EAAe,SAACC,EAAOrB,GAAR,OACxBsB,YACIL,EAAaM,OAAO,SAAAC,GAAO,OAAIA,EAAQpD,MAAQiD,IAAO9J,IAAI,SAAAkK,GAAM,OAAIA,EAAOb,OAAMhE,OACjFoD,IAIK5H,GAAY,SAAAC,GAAO,OAC5B,SAACgJ,EAAOrB,GAAR,OAAmB3H,EAAQqJ,KAAKN,EAAaC,EAAOrB,MP/B3C2B,GAAoB,CAC7BC,kBAAmB,oBACnBC,iBAAkB,oBAGf,SAAe5B,GAAtB6B,GAAA,OAAAC,GAAApJ,MAAAX,KAAAY,wDAAO,SAAAoJ,EAAiCxL,GAAjC,IAAAyL,EAAA,OAAAC,EAAAjN,EAAAkN,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACgBC,GAAiBC,EAAK7B,aAAanK,IADnD,OACCyL,EADDG,EAAAK,KAELC,GAAef,GAAkBC,kBAAmBK,GAF/C,wBAAAG,EAAAO,SAAAX,0EAKA,SAAAY,IAAA,IAAAX,EAAA,OAAAC,EAAAjN,EAAAkN,KAAA,SAAAU,GAAA,cAAAA,EAAAR,KAAAQ,EAAAP,MAAA,cAAAO,EAAAP,KAAA,EACkBC,GAAiBC,EAAK9B,sBADxC,OACGuB,EADHY,EAAAJ,KAEHC,GAAef,GAAkBE,iBAAkBI,GAFhD,wBAAAY,EAAAF,SAAAC,6BAKP,IAAML,GAAgB,eAAAnM,EAAAvB,OAAAiO,EAAA,EAAAjO,CAAAqN,EAAAjN,EAAA8N,KAAG,SAAAC,EAAMC,GAAN,IAAAhB,EAAA,OAAAC,EAAAjN,EAAAkN,KAAA,SAAAe,GAAA,cAAAA,EAAAb,KAAAa,EAAAZ,MAAA,cAAAY,EAAAb,KAAA,EAAAa,EAAAZ,KAAA,EAGfa,IAAMC,IAAIH,GAAKI,KAAK,SAAAC,GAAQ,OAAIrB,EAASqB,EAASjN,OAHnC,cAAA6M,EAAAK,OAAA,SAIdtB,GAJc,cAAAiB,EAAAb,KAAA,EAAAa,EAAAM,GAAAN,EAAA,SAAAA,EAAAK,OAAA,SAAAL,EAAAM,IAAA,wBAAAN,EAAAP,SAAAK,EAAA,iBAAH,gBAAAS,GAAA,OAAArN,EAAAuC,MAAAX,KAAAY,YAAA,iBQTP8K,eAAgB,CAC5BtK,WRwBY,WAAoD,IAAzBA,EAAyBR,UAAAjB,OAAA,QAAAgM,IAAA/K,UAAA,GAAAA,UAAA,GAAZ,GAAIgL,EAAQhL,UAAAjB,OAAA,EAAAiB,UAAA,QAAA+K,EAE/D,OAAOC,EAAOpG,MACV,KAAKmE,GAAkBC,kBACrB,OAAO/M,OAAAgP,EAAA,EAAAhP,CAAA,GAAIuE,EAAX,CAAuBG,cAAeqK,EAAOjN,UAE/C,KAAKgL,GAAkBE,iBACpB,OAAOhN,OAAAgP,EAAA,EAAAhP,CAAA,GAAIuE,EAAX,CAAuBC,aAAcuK,EAAOjN,UAE/C,QACI,OAAOyC,IQjChBsG,KAAMoE,OCRIC,GAAQC,YAAYC,IAElB,SAASvB,GAAewB,EAAYC,GAC/CJ,GAAMK,SAAS,CACX5G,KAAM0G,EACNvN,QAASwN,gCCFF,SAASE,KACpB,OACIrP,EAAAC,EAAAC,cAACoP,GAAA,MAAD,KACItP,EAAAC,EAAAC,cAAA,KAAGZ,UAAU,oBAAoBiQ,KAAK,KAAtC,WACAvP,EAAAC,EAAAC,cAAA,KAAGZ,UAAU,uBAAuBiQ,KAAMnD,EAAa9I,EAAOuI,eAA9D,cACA7L,EAAAC,EAAAC,cAAA,KAAGZ,UAAU,kBAAkBiQ,KAAMnD,EAAa9I,EAAOyI,aAAzD,cACA/L,EAAAC,EAAAC,cAAA,KAAGZ,UAAU,iBAAiBiQ,KAAMnD,EAAa9I,EAAO0I,QAAxD,cCqBGwD,eA7BX,SAAAA,EAAYnQ,GAAO,IAAAyD,EAAA,OAAAjD,OAAAkD,EAAA,EAAAlD,CAAAmD,KAAAwM,IACf1M,EAAAjD,OAAAoD,EAAA,EAAApD,CAAAmD,KAAAnD,OAAAqD,EAAA,EAAArD,CAAA2P,GAAArM,KAAAH,KAAM3D,KACDgB,QAAUyC,EAAKzC,QAAQmD,KAAb3D,OAAA4D,EAAA,EAAA5D,CAAAiD,IACfA,EAAKgI,MAAQ,CACT2E,OAAO,GAJI3M,uEAQXxC,GACA0C,KAAK8H,MAAM2E,OACXnP,EAAEC,OAAOjB,UAAY,WACrB0D,KAAKqH,SAAS,CAAEoF,OAAO,MAEvBnP,EAAEC,OAAOjB,UAAY,sBACrB0D,KAAKqH,SAAS,CAAEoF,OAAO,sCAM3B,OACIzP,EAAAC,EAAAC,cAAA,OAAKZ,UAAU,WAAWe,QAAS2C,KAAK3C,SACnC2C,KAAK3D,MAAMqQ,QAAQ1P,EAAAC,EAAAC,cAAA,mBAxBd+D,kCCGtB0L,IAASC,OAAQ5P,EAAAC,EAAAC,cCQF,WAEb,IAAM2P,EACJ7P,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,4CACAF,EAAAC,EAAAC,cAAA,mFACAF,EAAAC,EAAAC,cAAA,uFAKN,OAEEF,EAAAC,EAAAC,cAAC4P,EAAA,EAAD,CAAUf,MAAOA,IAGf/O,EAAAC,EAAAC,cAAC6P,EAAA,EAAD,KAEE/P,EAAAC,EAAAC,cAAC8P,GAAD,MAEAhQ,EAAAC,EAAAC,cAACmF,EAAA,EAAD,CAAQC,GAAG,KAAK2K,MAAM,OAAOC,UAAU,SAASC,UAAQ,EAACC,UAAQ,EAACrQ,MAAO,CACvEsQ,OAAQ,EAAGC,WAAY,OAAQC,cAAe,OAAQC,SAAU,QAASC,IAAK,EAAGC,KAAM,EACvFC,OAAQ,IAAKC,WAAY,kBAAmBC,SAAU,SAEtD7Q,EAAAC,EAAAC,cAAA,mCAGFF,EAAAC,EAAAC,cAAC4Q,EAAA,EAAD,CAASxR,UAAU,SAASS,MAAO,CAAE0Q,IAAK,SAExCzQ,EAAAC,EAAAC,cAAC6Q,EAAA,EAAD,CAAOC,OAAK,EAACpF,KAAK,IAAIgE,OAAQ,SAAAvQ,GAAK,OAAIW,EAAAC,EAAAC,cAAC+Q,GAADpR,OAAAa,OAAA,GAAarB,EAAb,CAAoBqQ,QAASG,QAEnE5D,EAAa1J,IACZ,SAAAkK,GAAM,OAAKzM,EAAAC,EAAAC,cAAC6Q,EAAA,EAADlR,OAAAa,OAAA,CAAOsQ,OAAK,GAAKvE,MAG9BzM,EAAAC,EAAAC,cAACgR,EAAA,EAAD,UD5CO,MAAaC,SAASC,eAAe","file":"static/js/main.dccaf68f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction TruncBox(props) {\r\n\r\n    const {className, children, width, height, moreText, lessText, ...rest} = props\r\n\r\n    const style = \r\n        <style> {`\r\n            .truncated {\r\n                max-height: ${height ? height + ';':'2rem;'}\r\n                max-width: ${width ? width + ';':'100%;'}\r\n                width: ${width ? width + ';':'100%;'}\r\n                overflow: hidden;\r\n                text-overflow: ellipsis;\r\n            } \r\n            .expand, .trunc {\r\n                width: fit-content;\r\n                margin-left: auto;\r\n                margin-right: auto;\r\n            }\r\n            .expand::after, .trunc::after {\r\n                cursor: pointer;\r\n                color: #718293;\r\n                font-style: italic;\r\n            }\r\n            .expand::after {\r\n                content: '${moreText ? moreText : '\\\\0025BC'}'; \r\n                font-size: ${!moreText ? '1rem' : '.5rem'};\r\n            }         \r\n            .trunc::after {\r\n                content: '${lessText ? lessText : '\\\\0025B2'}';\r\n                font-size: ${!lessText ? '1rem' : '.5rem'};\r\n            }\r\n        `}\r\n        </style>\r\n\r\n    let truncated = true\r\n\r\n    const onClick = e => {\r\n        if (truncated) {\r\n            e.target.className = 'trunc'\r\n            e.target.previousSibling.className = className ? className: ''\r\n            truncated = false\r\n        } else {\r\n            e.target.className = 'expand'\r\n            e.target.previousSibling.className = `${className ? className + ' ' : ''}truncated`\r\n            truncated = true\r\n        }\r\n    }\r\n\r\n    const render = function () {\r\n        return (\r\n            <React.Fragment>\r\n                {style}\r\n                <div className={`${className ? className + ' ' : ''}truncated`} {...rest}>\r\n                    {children}                    \r\n                </div>\r\n                <div onClick={onClick} className='expand'></div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    return render()\r\n}\r\n\r\nexport default TruncBox","import React from 'react'\r\nimport { Accordion, Button } from 'semantic-ui-react'\r\nimport \"./Arborescence.css\";\r\nimport TruncBox from '../components/TruncBox';\r\n\r\nexport default function Arborescence(props) {\r\n\r\n    const { handleClickDouleur } = props\r\n\r\n    const buttonStyle = { float: 'right', maxWidth: '100%', marginTop: '-40px', marginBottom: '5px', marginRight: '2%' }\r\n\r\n    const Entree = function ({ libelle, infosGenerales, idDouleur }) {\r\n        const buildContent = function (data) {\r\n            if (data) {\r\n                return (\r\n                    <React.Fragment>\r\n                        <Button style={buttonStyle} onClick={() => handleClickDouleur(idDouleur)}>\r\n                            Faire l'ordonnance\r\n                        </Button>\r\n                        <TruncBox height='6rem' moreText='▼ ( voir plus ... )' lessText='▲ ( réduire ... )'>\r\n                            <pre className='infosBase'>{data}</pre>\r\n                        </TruncBox>\r\n                    </React.Fragment>\r\n                )\r\n            }\r\n            return \"\";\r\n        }\r\n        const content = buildContent(infosGenerales)\r\n        const retour = [{\r\n            title: libelle,\r\n            content: { content }\r\n        }];\r\n        return (<Accordion styled panels={retour} />)\r\n    }\r\n\r\n    const Branche = function ({ libelle, nomenclaturesEnfants, ...rest }) {\r\n        const retour = [{\r\n            title: libelle,\r\n            content: {}\r\n        }];\r\n        if (nomenclaturesEnfants && Array.isArray(nomenclaturesEnfants)) {\r\n            let entreesAffichables = nomenclaturesEnfants.map(nomenclature => {\r\n                let titre = nomenclature.libelle\r\n                let infosGenerales = nomenclature.infosGenerales;\r\n                let idDouleur = nomenclature.id;\r\n                if (nomenclature.nomenclaturesEnfants && nomenclature.nomenclaturesEnfants.length > 0) {\r\n                    return <Branche libelle={titre} nomenclaturesEnfants={nomenclature.nomenclaturesEnfants} {...rest} />;\r\n                }\r\n                else {\r\n                    return <Entree libelle={titre} infosGenerales={infosGenerales} idDouleur={idDouleur} {...rest} />;\r\n                }\r\n            });\r\n            let content = <div>{entreesAffichables}</div>;\r\n            retour[0].content = { content };\r\n        }\r\n        /**\r\n         * FIX : Extraire la function Branche dans une classe avec gestion d'état actif/inactif \r\n         * en fonction du click (handler méthode)\r\n         * pour modifier l'attribut className (mettre une bordure si actif, pas de bordure si inactif)\r\n         */\r\n        return <Accordion styled panels={retour} />;\r\n    }\r\n\r\n    const Arbre = function ({ nomenclatures, ...rest }) {\r\n        return (\r\n            <div>{\r\n                Array.isArray(nomenclatures) && nomenclatures.map(\r\n                    nomenclature => {\r\n                        return <Branche libelle={nomenclature.libelle} nomenclaturesEnfants={nomenclature.nomenclaturesEnfants} {...rest} />;\r\n                    }\r\n                )\r\n            }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Arbre {...props} />\r\n    );\r\n}\r\n","/**\r\n * Ici on prends en compte l'état applicatif.\r\n * La méthode connect() relie le store au composant cible \r\n */\r\nimport { connect } from 'react-redux'\r\nimport { setArborescence } from \"../redux/OrdonnanceActions\";\r\nimport ArborescenceComponent from \"./ArborescenceComponent\";\r\nimport React, { Component } from 'react'\r\nimport { Message } from 'semantic-ui-react';\r\nimport { routes, goToRoute } from '../config/URLs-conf';\r\n\r\nclass Arborescence extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.handleClickDouleur.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        setArborescence()\r\n    }\r\n\r\n    handleClickDouleur = (idDouleur) => {\r\n        goToRoute(this.props.history)(routes.FICHE_DOULEUR, {idDouleur})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Message info>Choisissez le type de douleur concernée dans l'arborescence ci-dessous</Message>\r\n                <ArborescenceComponent {...this.props} handleClickDouleur={this.handleClickDouleur}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n/**\r\n * La fonction mapStateToProps renvoie un objet résultant du state. \r\n * L'objet renvoyé est passé en props du composant connecté\r\n */\r\nconst mapStateToProps = appState => ({\r\n    nomenclatures: appState.ordonnance.arborescence\r\n})\r\n/**\r\n * La méthode connect() relie le store au composant cible.\r\n * Elle prend en paramètres \r\n * - la fonction \"mapStateToProps\" à laquelle le state du store est passé en paramètre.\r\n */\r\nexport default connect(mapStateToProps)(Arborescence)","import dispatchAction from \"./store\";\r\nimport axios from \"axios\";\r\nimport { apiURLs as urls } from \"../config/URLs-conf\";\r\n\r\nexport const ordonnanceActions = {\r\n    SET_PRESCRIPTIONS: 'SET_PRESCRIPTIONS', \r\n    SET_ARBORESCENCE: 'SET_ARBORESCENCE',\r\n}\r\n\r\nexport async function setPreconisations(idDouleur) {\r\n  const result = await getResultFromUrl(urls.ficheDouleur(idDouleur))\r\n  dispatchAction(ordonnanceActions.SET_PRESCRIPTIONS, result);  \r\n}\r\n\r\nexport async function setArborescence() {\r\n    const result = await getResultFromUrl(urls.arborescenceDouleurs)\r\n    dispatchAction(ordonnanceActions.SET_ARBORESCENCE, result);\r\n}\r\n\r\nconst getResultFromUrl = async url => {\r\n  try {\r\n    let result\r\n    await axios.get(url).then(response => result = response.data)\r\n    return result\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Reducer pour le thème ordonnance\r\n * @param {*} ordonnance \r\n * @param {*} action \r\n */\r\nexport default function ordonnanceReducer(ordonnance = {}, action) {\r\n\r\n    switch(action.type) {\r\n        case ordonnanceActions.SET_PRESCRIPTIONS: {\r\n          return {...ordonnance, prescriptions: action.content}\r\n        }\r\n        case ordonnanceActions.SET_ARBORESCENCE: {\r\n           return {...ordonnance, arborescence: action.content}\r\n        }\r\n        default:\r\n            return ordonnance         \r\n    } \r\n}\r\n\r\n","import React, { Fragment } from 'react'\r\nimport { Message, Label, Divider, Header } from 'semantic-ui-react'\r\n\r\nexport default function FicheDouleurComponent(props) {\r\n\r\n  const { prescriptions, prescriptionChoisie, clickOrdonnance } = props\r\n\r\n  /**\r\n   * Si une prescription a été choisie on n'affiche que celle ci avec un message approprié\r\n   * Sinon on affiche la liste des prescriptions proposées avec possibilité d'en choisir une par clic\r\n   */\r\n\r\n  let douleur = () => {\r\n    let nomenclatureDouleur = null\r\n    if (prescriptionChoisie) {\r\n      nomenclatureDouleur = prescriptionChoisie.nomenclatureDouleur\r\n    } else if (prescriptions && prescriptions.length > 0) {\r\n      nomenclatureDouleur = prescriptions[0].nomenclatureDouleur\r\n    }\r\n    if (nomenclatureDouleur) {\r\n      return {\r\n        libelle: nomenclatureDouleur.libelle,\r\n        infos: nomenclatureDouleur.infosGenerales,\r\n        recommandations: nomenclatureDouleur.recommandations,\r\n      }\r\n    }\r\n    return {}\r\n  }\r\n  douleur = douleur()\r\n\r\n  let nbPreco = prescriptions && prescriptions.length > 0 ? prescriptions.length : 0\r\n\r\n\r\n  let messageInfo = () => {\r\n    if (prescriptionChoisie) {\r\n      return (\r\n        <Message info>Vous avez choisi l'ordonnance suivante</Message>\r\n      )\r\n    }\r\n    return (\r\n      nbPreco === 0 ?\r\n        <Message warning>Aucune ordonnance n'est encore proposée pour cette douleur</Message> :\r\n        <Message info>\r\n          {` ${nbPreco} ordonnance${nbPreco > 1 ? 's vous sont proposées' : ' vous est proposée'} `}\r\n          <br />Cliquez sur l'ordonnance de votre choix\r\n        </Message>\r\n    )\r\n  }\r\n  messageInfo = messageInfo()\r\n\r\n\r\n  let messageRecommandation = (\r\n    !prescriptionChoisie && douleur.recommandations && douleur.recommandations.length > 0 ?\r\n      <Message warning className='infosBase'>\r\n        <Divider horizontal fitted><Header as='h4'>Remarques</Header></Divider>\r\n        {douleur.recommandations}\r\n      </Message> : ''\r\n  )\r\n\r\n  const renderListePrescriptions = () => {\r\n\r\n    if (prescriptionChoisie) {\r\n      return (\r\n        <Fragment>\r\n          {renderPrescription(prescriptionChoisie)}\r\n          <Divider />\r\n        </Fragment>\r\n      )\r\n    }\r\n    else if (nbPreco > 0) {\r\n      return prescriptions.map(\r\n        (prescription, index) => (\r\n          <Fragment>\r\n            <Label as='a' onClick={() => clickOrdonnance(index)}>\r\n              Ordonnance {index + 1}\r\n            </Label>\r\n            {renderPrescription(prescription)}\r\n            <Divider />\r\n          </Fragment>\r\n        )\r\n      )\r\n    }\r\n  }\r\n\r\n\r\n\r\n  const renderPrescription = (prescription) => {\r\n    const formatTexte = description => {\r\n      let lignes = description.split(' ; ')\r\n      return lignes.map(\r\n        ligne => (ligne + '\\r\\n')\r\n      )\r\n    }\r\n    if (prescription.medicamentsPreconises.length > 0) {\r\n      return (\r\n        <div className='infosBase'> {\r\n          prescription.medicamentsPreconises.map(\r\n            preconisation => <p>{formatTexte(preconisation.description)}</p>\r\n          )\r\n        }</div>)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>{douleur.libelle}</h3>\r\n      {messageInfo}         \r\n      {renderListePrescriptions()}\r\n      {messageRecommandation}   \r\n    </div>\r\n  )\r\n}\r\n\r\n","import React from \"react\";\r\nimport { Form } from \"semantic-ui-react\";\r\n\r\nexport const renderCheckbox = field => (\r\n  <Form.Checkbox\r\n    checked={!!field.input.value}\r\n    name={field.input.name}\r\n    label={field.label}\r\n    onChange={(e, { checked }) => field.input.onChange(checked)}\r\n  />\r\n);\r\n\r\nexport const renderRadio = field => (\r\n  <Form.Radio\r\n    checked={field.input.value === field.radioValue}\r\n    label={field.label}\r\n    name={field.input.name}\r\n    onChange={(e, { checked }) => field.input.onChange(field.radioValue)}\r\n  />\r\n);\r\n\r\nexport const renderSelect = field => (\r\n  <Form.Select\r\n    label={field.label}\r\n    name={field.input.name}\r\n    onChange={(e, { value }) => field.input.onChange(value)}\r\n    options={field.options}\r\n    placeholder={field.placeholder}\r\n    value={field.input.value}\r\n  />\r\n);\r\n\r\nexport const renderTextArea = field => (\r\n  <Form.TextArea\r\n    {...field.input}\r\n    label={field.label}\r\n    placeholder={field.placeholder}\r\n  />\r\n);","export default function Prescription(ordonnance) {\r\n\r\n  this.medicamentsPreconises = ordonnance ? ordonnance.medicamentsPreconises : []\r\n\r\n  this.nbMedicaments = this.medicamentsPreconises.length\r\n\r\n  this.getProduits = function(numMedicament) {\r\n    if (this.medicamentsPreconises[numMedicament] && this.medicamentsPreconises[numMedicament].compatibilites) {\r\n      return this.medicamentsPreconises[numMedicament].compatibilites.map(compatibilite => compatibilite.produit)\r\n    }\r\n    return null\r\n  }\r\n\r\n  this.getDesignationsProduits = function(numMedicament) {\r\n    const produits = this.getProduits(numMedicament)\r\n    if (produits) {\r\n      return produits.map(produit => produit.designation)\r\n    }\r\n    return null\r\n  }\r\n\r\n\r\n}","import React from \"react\";\r\nimport { Field } from \"redux-form\";\r\nimport { Form, Message, Header, Divider, Label } from \"semantic-ui-react\";\r\nimport * as formAdapter from \"../redux/reduxFormAdapter\"\r\nimport Prescription from \"./PrescriptionObj\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nclass OrdonnanceForm extends React.Component {\r\n\r\n  // On reçoit l'ordonnance en props. C'est un objet de la forme suivante :\r\n  // ordonnance\r\n  // \t.medicamentsPreconises[]\r\n  // \t\t.description\r\n  // \t\t.dureeMin\r\n  // \t\t.dureeMax\r\n  // \t\t.idDouleur\r\n  // \t\t.numOrdonnance\r\n  // \t\t.numMedicament\r\n  // \t\t.compatibilites[]\r\n  // \t\t\t.produit\r\n  // \t\t\t\t.code\r\n  // \t\t\t\t.designation\r\n  // \t\t\t\t.id\r\n  // \t\t\t\t.indesirable\r\n  // \t\t\t\t.indication\r\n  // \t\t\t.dosages\r\n  // \t\t\t.formes\r\n\r\n  constructor(props) {\r\n\r\n    super(props)\r\n    this.prescriptionChoisie = new Prescription(props.ordonnance)\r\n    this.medicaments = this.prescriptionChoisie.medicamentsPreconises\r\n    this.libellesMedicaments = this.medicaments.map(\r\n      (medicament, numMedicament) => this.prescriptionChoisie.getDesignationsProduits(numMedicament).join(' + ')\r\n    )\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Form size='small' onSubmit={() => this.props.onSubmit(this.ordonnanceSaisie())}>\r\n\r\n        <Message info>Veuillez renseigner la posologie dans le formulaire ci-dessous</Message>  {\r\n          this.prescriptionChoisie && this.prescriptionChoisie.medicamentsPreconises.map(\r\n            (medicament, numMedicament) => this.formulaireMedicament(numMedicament)\r\n          )\r\n        }\r\n\r\n        <Field\r\n          component={formAdapter.renderTextArea}\r\n          label=\"Recommandations\"\r\n          name=\"recommandations\"\r\n          placeholder=\"Conseils, effets indésirables à surveiller, cas d'arrêt du traitement...\"\r\n        />\r\n\r\n        <Message>\r\n          <Divider horizontal fitted><Header as='h5'>Récapitulatif</Header></Divider>\r\n          {this.getRecapitulatif()}\r\n        </Message>\r\n\r\n        <Form.Group inline>\r\n          <Form.Button type='submit' primary>Valider</Form.Button>\r\n          <Form.Button onClick={this.props.reset}>Annuler</Form.Button>\r\n        </Form.Group>\r\n\r\n      </Form>\r\n    )\r\n  }\r\n\r\n  formulaireMedicament(numMedicament) {\r\n\r\n    return (\r\n\r\n      <React.Fragment>\r\n\r\n        <div style={{ padding: '1rem 0' }}><Label>{this.libellesMedicaments[numMedicament]}</Label></div>\r\n\r\n        <input\r\n          name={'medicament' + numMedicament}\r\n          type='hidden'\r\n          index={numMedicament}\r\n          value={this.libellesMedicaments[numMedicament]}\r\n        />\r\n\r\n        <Grid container spacing={1}>\r\n\r\n          {this.prescriptionChoisie.getProduits(numMedicament).map((produit, numProduit) =>\r\n            <Grid item xs={2}>\r\n              <Field component={Form.Input} label={numProduit === 0 ? 'dosage' : ''} name={'dosage' + numMedicament + numProduit} placeholder={produit.designation} required />\r\n            </Grid>\r\n          )}\r\n\r\n          <Grid item xs={4}>\r\n            <Field component={Form.Input} label=\"Quantité / prise\" name={'quantite' + numMedicament} placeholder=\"Nb comprimés\" required />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <Field component={formAdapter.renderSelect} label=\"Forme\" name={'forme' + numMedicament} placeholder=\"Comprimé ...\"\r\n              options={[\r\n                { key: \"forme1\", text: \"Comprimé\", value: \"comprimé(s)\" },\r\n                { key: \"forme2\", text: \"Gélule\", value: \"gélule(s)\" }\r\n              ]}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Field component={Form.Input} label=\"Fréquence\" name={'frequence' + numMedicament} placeholder=\"Nb fois par jour\" required />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Field component={Form.Input} label=\"Durée\" name={'duree' + numMedicament} placeholder=\"Nb de jours\" required />\r\n          </Grid>\r\n\r\n        </Grid>\r\n\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  getRecapDosage(numMedicament) {\r\n    const produits = this.prescriptionChoisie.getProduits(numMedicament)\r\n    if (Array.isArray(produits)) {\r\n      const dosagesProduit = produits.map(\r\n        (produit, numProduit) => {\r\n          const designationProduit = produit.designation\r\n          const dosageProduit = this.props['dosage' + numMedicament + numProduit]\r\n          return (dosageProduit ? designationProduit + ' ' + dosageProduit : '')\r\n        }\r\n      )\r\n      return dosagesProduit.join(' + ')\r\n    }\r\n    return null\r\n  }\r\n\r\n  getDosages(numMedicament) {\r\n    const produits = this.prescriptionChoisie.getProduits(numMedicament)\r\n    if (Array.isArray(produits)) {\r\n      const dosagesProduit = produits.map(\r\n        (produit, numProduit) => {\r\n          return this.props['dosage' + numMedicament + numProduit]\r\n        }\r\n      )\r\n      return dosagesProduit\r\n    }\r\n    return null\r\n  }\r\n\r\n\r\n  getRecapitulatif() {\r\n    return (\r\n      this.medicaments.map(\r\n        (medicament, numMedicament) => (\r\n          <div> {\r\n            this.getRecapDosage(numMedicament)\r\n            + (this.props['quantite' + numMedicament] && this.props['forme' + numMedicament] ?\r\n              ', ' + this.props['quantite' + numMedicament] + ' ' + this.props['forme' + numMedicament] : '')\r\n            + (this.props['frequence' + numMedicament] ? ', ' + this.props['frequence' + numMedicament] + ' fois par jour' : '')\r\n            + (this.props['duree' + numMedicament] ? ' pendant ' + this.props['duree' + numMedicament] + ' jours' : '')\r\n          } </div>\r\n        )\r\n      )\r\n    )\r\n  }\r\n\r\n\r\n  ordonnanceSaisie() {\r\n\r\n    const autresChamps = ['quantite', 'forme', 'frequence', 'duree']\r\n\r\n    let ordonnance = {\r\n      nbMedicaments: this.medicaments.length,\r\n      medicaments: [],\r\n      recommandations: this.props.recommandations\r\n    }\r\n\r\n    for (let numMedicament = 0; numMedicament < ordonnance.nbMedicaments; numMedicament++) {\r\n      ordonnance.medicaments[numMedicament] = {\r\n        medicament: this.libellesMedicaments[numMedicament],\r\n        dosages: this.getDosages(numMedicament),\r\n      }\r\n      autresChamps.forEach(champ => {\r\n        ordonnance.medicaments[numMedicament][champ] = this.props[champ + numMedicament]\r\n      })\r\n    }\r\n    return ordonnance\r\n  }\r\n\r\n}\r\n\r\nexport default OrdonnanceForm;\r\n","import { connect } from 'react-redux'\r\nimport { reduxForm } from \"redux-form\";\r\nimport { setPreconisations } from \"../redux/OrdonnanceActions\";\r\nimport FicheDouleurComponent from \"./FicheDouleurComponent\";\r\nimport React, { Component, Fragment } from 'react'\r\nimport OrdonnanceForm from \"./OrdonnanceForm\";\r\n\r\nclass FicheDouleur extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            choixOrdonnance: null,\r\n            prescriptionChoisie: null\r\n        }\r\n        this.clickOrdonnance.bind(this)\r\n    }\r\n\r\n    getRouteParams() {\r\n        if (this.props.match) {\r\n            return this.props.match.params\r\n        }\r\n        return {}\r\n    }\r\n\r\n    componentDidMount() {\r\n        let { idDouleur } = this.getRouteParams()\r\n        setPreconisations(idDouleur)\r\n    }\r\n\r\n    clickOrdonnance = (index) => {\r\n        this.setState({\r\n            choixOrdonnance: index,\r\n            prescriptionChoisie: this.props.prescriptions[index]\r\n        })\r\n        console.log('Choix de l\\'ordonnance n° ' + (index + 1))\r\n    }\r\n\r\n    submitOrdonnance = form => {\r\n        const body = JSON.stringify(form)\r\n        console.log(body)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <FicheDouleurComponent clickOrdonnance={this.clickOrdonnance}\r\n                    prescriptionChoisie={this.state.prescriptionChoisie} prescriptions={this.props.prescriptions} />\r\n                {\r\n                    this.state.prescriptionChoisie &&\r\n                    <OrdonnanceForm\r\n                        onSubmit={this.submitOrdonnance}\r\n                        ordonnance={this.state.prescriptionChoisie}\r\n                        {...this.props.formValues}\r\n                    />\r\n                }\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nFicheDouleur = reduxForm({\r\n    form: \"ordonnance\",\r\n})(FicheDouleur);\r\n\r\n\r\n/**\r\n * La fonction mapStateToProps renvoie un objet résultant du state. \r\n * L'objet renvoyé est passé en props du composant connecté\r\n */\r\nconst mapStateToProps = appState => ({\r\n    prescriptions: appState.ordonnance.prescriptions,\r\n    formValues: appState.form.ordonnance ? appState.form.ordonnance.values : {},\r\n})\r\n\r\n/**\r\n * La méthode connect() relie le store au composant cible.\r\n * Elle prend en paramètre la fonction \"mapStateToProps\", laquelle prend elle-même en paramètre le state du store.\r\n */\r\nexport default connect(mapStateToProps)(FicheDouleur)\r\n","import { connect } from 'react-redux'\r\nimport { reduxForm } from \"redux-form\";\r\nimport { setPreconisations } from \"../redux/OrdonnanceActions\";\r\nimport FicheDouleurComponent from \"./FicheDouleurComponent\";\r\nimport React, { Component, Fragment } from 'react'\r\nimport OrdonnanceForm from \"./OrdonnanceForm\";\r\n\r\nclass OrdonnanceService extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            choixOrdonnance: null,\r\n            prescriptionChoisie: null\r\n        }\r\n        this.onClickOrdonnance.bind(this)\r\n    }\r\n\r\n    getRouteParams() {\r\n        if (this.props.match) {\r\n            return this.props.match.params\r\n        }\r\n        return {}\r\n    }\r\n\r\n    componentDidMount() {\r\n        let { idDouleur } = this.getRouteParams()\r\n        setPreconisations(idDouleur)\r\n    }\r\n\r\n    clickOrdonnance = (index) => {\r\n        this.setState({\r\n            choixOrdonnance: index,\r\n            prescriptionChoisie: this.props.prescriptions[index]\r\n        })\r\n        console.log('Choix de l\\'ordonnance n° ' + (index + 1))\r\n    }\r\n\r\n    submitOrdonnance = form => {\r\n        const body = JSON.stringify(form)\r\n        console.log(body)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <FicheDouleurComponent clickOrdonnance={this.clickOrdonnance}\r\n                    prescriptionChoisie={this.state.prescriptionChoisie} prescriptions={this.props.prescriptions} />\r\n                {\r\n                    this.state.prescriptionChoisie &&\r\n                    <OrdonnanceForm\r\n                        onSubmit={this.submitOrdonnance}\r\n                        ordonnance={this.state.prescriptionChoisie}\r\n                        {...this.props.formValues}\r\n                    />\r\n                }\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nOrdonnanceService = reduxForm({\r\n    form: \"ordonnance\",\r\n})(OrdonnanceService);\r\n\r\n\r\n/**\r\n * La fonction mapStateToProps renvoie un objet résultant du state. \r\n * L'objet renvoyé est passé en props du composant connecté\r\n */\r\nconst mapStateToProps = appState => ({\r\n    prescriptions: appState.ordonnance.prescriptions,\r\n    formValues: appState.form.ordonnance ? appState.form.ordonnance.values : {},\r\n})\r\n\r\n/**\r\n * La méthode connect() relie le store au composant cible.\r\n * Elle prend en paramètre la fonction \"mapStateToProps\", laquelle prend elle-même en paramètre le state du store.\r\n */\r\nexport default connect(mapStateToProps)(OrdonnanceService)\r\n","import { generatePath } from \"react-router\";\r\n\r\nimport ArborescenceService from \"../ordonnance/ArborescenceService\"\r\nimport FicheDouleurService from \"../ordonnance/FicheDouleurService\"\r\nimport OrdonnanceService from \"../ordonnance/OrdonnanceService\"\r\n\r\nexport const apiURLs = {\r\n    arborescenceDouleurs: '/douleurs/arborescence',\r\n    ficheDouleur: idDouleur => '/douleurs/' + idDouleur,\r\n}\r\n\r\nconst path = '/clientApp'\r\n\r\nexport const routes = {\r\n    ARBORESCENCE: 'arborescence',\r\n    FICHE_DOULEUR: 'ficheDouleur',\r\n    FORMULAIRE_ORDONNANCE: 'formulaireOrdonnance',\r\n    HISTORIQUE: 'historique',\r\n    LIENS: 'liens',\r\n}\r\n\r\nexport const routesConfig = [\r\n    { key: routes.ARBORESCENCE, path: `${path}/douleurs`, component: ArborescenceService },\r\n    { key: routes.FICHE_DOULEUR, path: `${path}/douleurs/:idDouleur`, component: FicheDouleurService },\r\n    { key: routes.FORMULAIRE_ORDONNANCE, path: `${path}/ordonnanceForm`, component: OrdonnanceService },\r\n]\r\n\r\nexport const getRoutePath = (route, params) => (\r\n    generatePath(\r\n        routesConfig.filter(element => element.key === route).map(config => config.path).join(),\r\n        params\r\n    )\r\n)\r\n\r\nexport const goToRoute = history => (\r\n    (route, params) => history.push(getRoutePath(route, params))\r\n)","import { combineReducers } from \"redux\";\r\nimport ordonnanceReducer from \"./OrdonnanceActions\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\n\r\n/**\r\n * C'est ici qu'il faut référencer les différents reducers de l'appli Redux.\r\n * Ce sont des fonctions qui doivent être définies dans les composants *Actions.js \r\n * et qui ont pour responsabilité de calculer le nouvel état du store en fonction \r\n * des actions effectuées.\r\n */\r\nexport default combineReducers({\r\n   ordonnance: ordonnanceReducer,\r\n   form: formReducer,\r\n})","import { createStore } from \"redux\";\r\nimport reducers from \"./reducers\";\r\n\r\n// les reducers sont chargés de la mise à jour du store lorsque celui ci reçoit une action\r\nexport const store = createStore(reducers)\r\n\r\nexport default function dispatchAction(actionType, actionContent) {\r\n    store.dispatch({\r\n        type: actionType,\r\n        content: actionContent\r\n    })\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport { slide as Menu } from 'react-burger-menu'\r\n\r\nimport { getRoutePath, routes } from \"../config/URLs-conf\";\r\nimport './MenuBar.css'\r\n\r\n\r\nexport default function MenuBar() {\r\n    return (\r\n        <Menu>\r\n            <a className=\"menu-item accueil\" href=\"/\">Accueil</a>\r\n            <a className=\"menu-item ordonnance\" href={getRoutePath(routes.ARBORESCENCE)}>Ordonnance</a>\r\n            <a className=\"menu-item histo\" href={getRoutePath(routes.HISTORIQUE)}>Historique</a>\r\n            <a className=\"menu-item lien\" href={getRoutePath(routes.LIENS)}>Liens</a>\r\n        </Menu>\r\n    )\r\n}","import React, { Component } from 'react'\r\n\r\n\r\nclass Accueil extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.onClick = this.onClick.bind(this)\r\n        this.state = {\r\n            actif: false,\r\n        }\r\n    }\r\n\r\n    onClick(e) {\r\n        if (this.state.actif) {\r\n            e.target.className = 'noborder'\r\n            this.setState({ actif: false })\r\n        } else {\r\n            e.target.className = 'ui accordion styled'\r\n            this.setState({ actif: true })\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className='noborder' onClick={this.onClick} >                \r\n                {this.props.message}<br/>                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Accueil\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nimport MainApp from './App'\r\n\r\nReactDOM.render( <MainApp />, document.getElementById('react-app'))\r\n","import React from 'react'\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { Header, Segment } from 'semantic-ui-react';\r\nimport { Divider } from '@material-ui/core';\r\n\r\nimport { store } from \"./redux/store\";\r\nimport { routesConfig } from \"./config/URLs-conf\";\r\nimport \"./App.css\";\r\n// import \"./assets/bootstrap-slate.css\";\r\nimport Menu from \"./components/MenuBar\";\r\nimport Accueil from \"./components/Accueil\";\r\nimport Test from './Test';\r\n\r\nexport default function App() {\r\n\r\n  const msgBienvenue = (\r\n    <div>\r\n      <h5>\r\n        <p>Bienvenue dans Pain Control Pro</p>\r\n        <p>L'application qu'il vous faut pour gérer la douleur de vos patients</p>\r\n        <p>Cliquez sur le menu en haut à gauche pour sélectionner votre choix</p>\r\n      </h5>\r\n    </div>\r\n  )\r\n\r\n  return (\r\n    // le Provider permet la connexion des composants enfants au store\r\n    <Provider store={store}>\r\n\r\n      {/** le Router transmets la prop history à tous les composants enfants */}\r\n      <Router>\r\n\r\n        <Menu />\r\n\r\n        <Header as=\"h2\" color=\"grey\" textAlign=\"center\" inverted dividing style={{\r\n          margin: 0, paddingTop: '20px', paddingBottom: '10px', position: 'fixed', top: 0, left: 0, \r\n          zIndex: 900, background: 'rgb(35, 55, 60)', minWidth: '100%'\r\n        }}>\r\n          <span> Pain Control Pro </span>\r\n        </Header>\r\n\r\n        <Segment className='center' style={{ top: '60px' }}>\r\n\r\n          <Route exact path='/' render={props => <Accueil {...props} message={msgBienvenue} />} />\r\n          \r\n          {routesConfig.map(\r\n            config => (<Route exact {...config} />)            \r\n          )}\r\n\r\n          <Divider/>\r\n          {/* \r\n           <Test className='infosBase'>\r\n\r\n          </Test>  */}\r\n\r\n        </Segment>\r\n\r\n      </Router>\r\n\r\n\r\n    </Provider>\r\n  )\r\n\r\n}"],"sourceRoot":""}