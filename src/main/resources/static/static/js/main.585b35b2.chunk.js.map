{"version":3,"sources":["components/TruncBox.js","ordonnance/ArborescenceComponent.js","components/LoadComponent.js","ordonnance/ArborescenceService.js","redux/OrdonnanceActions.js","ordonnance/FicheDouleurComponent.js","ordonnance/FicheDouleurService.js","redux/reduxFormAdapter.js","ordonnance/PrescriptionObj.js","ordonnance/PrescriptionForm.js","ordonnance/PrescriptionService.js","ordonnance/OrdonnanceForm.js","ordonnance/OrdonnanceService.js","config/URLs-conf.js","redux/reducers.js","redux/store.js","components/MenuBar.js","components/Accueil.jsx","index.jsx","App.jsx"],"names":["TruncBox","props","className","children","width","height","moreText","lessText","rest","Object","objectWithoutProperties","style","react_default","a","createElement","concat","truncated","onClick","e","target","previousSibling","Fragment","assign","Arborescence","handleClickDouleur","buttonStyle","float","maxWidth","marginTop","marginBottom","marginRight","Entree","_ref","data","libelle","infosGenerales","idDouleur","retour","title","content","Button","primary","size","components_TruncBox","Accordion","styled","panels","Branche","_ref2","nomenclaturesEnfants","Array","isArray","entreesAffichables","map","nomenclature","titre","id","length","_ref3","nomenclatures","LoadComponent","errorMessage","loadedObj","renderer","loader","Loader","active","top","error","Message","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","goToRoute","routes","FICHE_DOULEUR","bind","assertThisInitialized","_setArborescence","apply","arguments","setArborescence","components_LoadComponent","info","ArborescenceComponent_Arborescence","Component","connect","appState","ordonnance","dataTypes","ARBORESCENCE","FicheDouleurComponent","prescriptions","prescriptionChoisie","clickOrdonnance","douleur","nomenclatureDouleur","infos","recommandations","nbPreco","messageInfo","warning","messageRecommandation","Divider","horizontal","fitted","Header","as","renderPrescription","prescription","medicamentsPreconises","preconisation","description","split","ligne","react","index","FicheDouleur","clickPrescription","dispatchData","PRESCRIPTION_CHOISIE","FORMULAIRE_PRESCRIPTION","_x","_setPreconisations","setPreconisations","getRouteParams","match","params","PRESCRIPTIONS","renderRadio","field","Form","Radio","checked","input","value","radioValue","label","name","onChange","renderSelect","Select","options","placeholder","renderTextArea","TextArea","Prescription","ordonnancePreconisee","nbMedicaments","getProduits","numMedicament","compatibilites","compatibilite","produit","getDesignationsProduits","produits","designation","PrescriptionForm","recapPrescription","medicaments","libellesMedicaments","medicament","join","_this2","onSubmit","prescriptionSaisie","formulaireMedicament","Field","component","formAdapter","Group","inline","type","reset","padding","Label","Grid","container","spacing","numProduit","item","xs","Input","required","key","text","_this3","dosagesProduits","dosage","autresChamps","prescpription","_loop","forEach","champ","React","PrescriptionService","submitPrescription","formValues","PRESCRIPTION_FORM_VALUES","PRESCRIPTION_SAISIE","FORMULAIRE_ORDONNANCE","ordonnance_PrescriptionForm","recapitulerPrescription","filter","recapDosage","quantite","forme","frequence","duree","reduxForm","form","state","values","initialValues","OrdonnanceForm","OrdonnanceService","submitOrdonnance","infosPatient","_x2","_setOrdonnanceEmise","setOrdonnanceEmise","console","log","JSON","stringify","libelleDouleur","OrdonnanceForm_OrdonnanceForm","margin","recapitulerInfosPatient","keys","apiURLs","arborescenceDouleurs","ficheDouleur","nouvelleOrdonnance","HISTORIQUE","LIENS","routesConfig","path","ArborescenceService","FicheDouleurService","getRoutePath","route","pathParams","generatePath","element","config","history","push","ORDONNANCE_EMISE","_callee3","result","regenerator_default","wrap","_context3","prev","next","getResultFromUrl","urls","sent","stop","_callee4","_context4","_callee5","textResult","isError","obj","file","fileURL","_context5","postObjectToUrl","responseType","then","parse","errors","Blob","URL","createObjectURL","window","open","asyncToGenerator","mark","_callee","url","responseBody","_context","axios","get","response","abrupt","t0","message","_x3","_x4","_callee2","object","_context2","post","_x5","_x6","_x7","combineReducers","undefined","action","objectSpread","defineProperty","formReducer","store","createStore","reducers","dispatch","MenuBar","BurgerMenu","href","Accueil","ReactDOM","render","msgBienvenue","es","react_router_dom","MenuBar_MenuBar","color","textAlign","inverted","dividing","paddingTop","paddingBottom","position","left","zIndex","background","minWidth","Segment","overflow","react_router","exact","components_Accueil","document","getElementById"],"mappings":"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","file":"static/js/main.585b35b2.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction TruncBox(props) {\r\n\r\n    const {className, children, width, height, moreText, lessText, ...rest} = props\r\n\r\n    const style = \r\n        <style> {`\r\n            .truncated {\r\n                max-height: ${height ? height + ';':'2rem;'}\r\n                max-width: ${width ? width + ';':'100%;'}\r\n                width: ${width ? width + ';':'100%;'}\r\n                overflow: hidden;\r\n                text-overflow: ellipsis;\r\n            } \r\n            .expand, .trunc {\r\n                width: fit-content;\r\n                margin-left: auto;\r\n                margin-right: auto;\r\n            }\r\n            .expand::after, .trunc::after {\r\n                cursor: pointer;\r\n                color: #718293;\r\n                font-style: italic;\r\n            }\r\n            .expand::after {\r\n                content: '${moreText ? moreText : '\\\\0025BC'}'; \r\n                font-size: ${!moreText ? '1rem' : '.5rem'};\r\n            }         \r\n            .trunc::after {\r\n                content: '${lessText ? lessText : '\\\\0025B2'}';\r\n                font-size: ${!lessText ? '1rem' : '.5rem'};\r\n            }\r\n        `}\r\n        </style>\r\n\r\n    let truncated = true\r\n\r\n    const onClick = e => {\r\n        if (truncated) {\r\n            e.target.className = 'trunc'\r\n            e.target.previousSibling.className = className ? className: ''\r\n            truncated = false\r\n        } else {\r\n            e.target.className = 'expand'\r\n            e.target.previousSibling.className = `${className ? className + ' ' : ''}truncated`\r\n            truncated = true\r\n        }\r\n    }\r\n\r\n    const render = function () {\r\n        return (\r\n            <React.Fragment>\r\n                {style}\r\n                <div className={`${className ? className + ' ' : ''}truncated`} {...rest}>\r\n                    {children}                    \r\n                </div>\r\n                <div onClick={onClick} className='expand'></div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    return render()\r\n}\r\n\r\nexport default TruncBox","import React from 'react'\r\nimport { Accordion, Button } from 'semantic-ui-react'\r\nimport \"./Arborescence.css\";\r\nimport TruncBox from '../components/TruncBox';\r\n\r\nexport default function Arborescence(props) {\r\n\r\n    const { handleClickDouleur } = props\r\n\r\n    const buttonStyle = { float: 'right', maxWidth: '100%', marginTop: '-40px', marginBottom: '5px', marginRight: '2%' }\r\n\r\n    const Entree = function ({ libelle, infosGenerales, idDouleur }) {\r\n        const buildContent = function (data) {\r\n            if (data) {\r\n                return (\r\n                    <React.Fragment>\r\n                        <Button primary size='tiny' style={buttonStyle} onClick={() => handleClickDouleur(idDouleur)}>\r\n                            Faire l'ordonnance\r\n                        </Button>\r\n                        <TruncBox height='6rem' moreText='▼ ( voir plus ... )' lessText='▲ ( réduire ... )'>\r\n                            <pre className='infosBase'>{data}</pre>\r\n                        </TruncBox>\r\n                    </React.Fragment>\r\n                )\r\n            }\r\n            return \"\";\r\n        }\r\n        const content = buildContent(infosGenerales)\r\n        const retour = [{\r\n            title: libelle,\r\n            content: { content }\r\n        }];\r\n        return (<Accordion styled panels={retour} />)\r\n    }\r\n\r\n    const Branche = function ({ libelle, nomenclaturesEnfants, ...rest }) {\r\n        const retour = [{\r\n            title: libelle,\r\n            content: {}\r\n        }];\r\n        if (nomenclaturesEnfants && Array.isArray(nomenclaturesEnfants)) {\r\n            let entreesAffichables = nomenclaturesEnfants.map(nomenclature => {\r\n                let titre = nomenclature.libelle\r\n                let infosGenerales = nomenclature.infosGenerales;\r\n                let idDouleur = nomenclature.id;\r\n                if (nomenclature.nomenclaturesEnfants && nomenclature.nomenclaturesEnfants.length > 0) {\r\n                    return <Branche libelle={titre} nomenclaturesEnfants={nomenclature.nomenclaturesEnfants} {...rest} />;\r\n                }\r\n                else {\r\n                    return <Entree libelle={titre} infosGenerales={infosGenerales} idDouleur={idDouleur} {...rest} />;\r\n                }\r\n            });\r\n            let content = <div>{entreesAffichables}</div>;\r\n            retour[0].content = { content };\r\n        }\r\n        /**\r\n         * FIX : Extraire la function Branche dans une classe avec gestion d'état actif/inactif \r\n         * en fonction du click (handler méthode)\r\n         * pour modifier l'attribut className (mettre une bordure si actif, pas de bordure si inactif)\r\n         */\r\n        return <Accordion styled panels={retour} />;\r\n    }\r\n\r\n    const Arbre = function ({ nomenclatures, ...rest }) {\r\n        return (\r\n            <div>{\r\n                Array.isArray(nomenclatures) && nomenclatures.map(\r\n                    nomenclature => {\r\n                        return <Branche libelle={nomenclature.libelle} nomenclaturesEnfants={nomenclature.nomenclaturesEnfants} {...rest} />;\r\n                    }\r\n                )\r\n            }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Arbre {...props} />\r\n    );\r\n}\r\n","import React from 'react'\r\nimport { Loader, Message } from 'semantic-ui-react'\r\n\r\n\r\nconst LoadComponent = function (props) {\r\n\r\n  const { loadedObj, renderer, children } = props\r\n  const loader = <Loader active style={{ top: '30%' }}>Chargement en cours ... veuillez patienter</Loader>\r\n  const error = errorMessage => <Message error>{errorMessage}</Message>\r\n\r\n  if (!loadedObj) {\r\n    return loader\r\n  } else if (loadedObj.error) {\r\n    return error(loadedObj.error)\r\n  } else if (renderer) {\r\n    return renderer\r\n  } else if (children) {\r\n    return children\r\n  } else {\r\n    return <div className='center'><h1>???</h1></div>\r\n  }\r\n}\r\n\r\nexport default LoadComponent","/**\r\n * Ici on prends en compte l'état applicatif.\r\n * La méthode connect() relie le store au composant cible \r\n */\r\nimport { connect } from 'react-redux'\r\nimport { setArborescence, dataTypes } from \"../redux/OrdonnanceActions\";\r\nimport ArborescenceComponent from \"./ArborescenceComponent\";\r\nimport React, { Component } from 'react'\r\nimport { Message } from 'semantic-ui-react';\r\nimport { routes, goToRoute } from '../config/URLs-conf';\r\nimport LoadComponent from '../components/LoadComponent';\r\n\r\n/**\r\n * La fonction mapStateToProps renvoie un objet résultant du state. \r\n * L'objet renvoyé est passé en props du composant connecté\r\n */\r\nconst mapStateToProps = appState => ({\r\n    nomenclatures: appState.ordonnance[dataTypes.ARBORESCENCE]\r\n})\r\n\r\nclass Arborescence extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.handleClickDouleur.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        setArborescence()\r\n    }\r\n\r\n    handleClickDouleur = (idDouleur) => {\r\n        goToRoute(this.props)(routes.FICHE_DOULEUR, {idDouleur})\r\n    }\r\n\r\n    render() {\r\n        return <LoadComponent loadedObj={this.props.nomenclatures}>\r\n            <div>\r\n                <Message info>Choisissez le type de douleur concernée dans l'arborescence ci-dessous</Message>\r\n                <ArborescenceComponent {...this.props} handleClickDouleur={this.handleClickDouleur}/>\r\n            </div>\r\n        </LoadComponent>        \r\n    }\r\n}\r\n/**\r\n * La méthode connect() relie le store au composant cible.\r\n * Elle prend en paramètres \r\n * - la fonction \"mapStateToProps\" à laquelle le state du store est passé en paramètre.\r\n */\r\nexport default connect(mapStateToProps)(Arborescence)","import dispatchData from \"./store\";\r\nimport axios from \"axios\";\r\nimport { apiURLs as urls } from \"../config/URLs-conf\";\r\n\r\nexport const dataTypes = {\r\n  ARBORESCENCE: 'ARBORESCENCE',\r\n  PRESCRIPTIONS: 'PRESCRIPTIONS',\r\n  PRESCRIPTION_CHOISIE: 'PRESCRIPTION_CHOISIE',\r\n  PRESCRIPTION_SAISIE: 'PRESCRIPTION_SAISIE',\r\n  PRESCRIPTION_FORM_VALUES: 'PRESCRIPTION_FORM_VALUES',\r\n  ORDONNANCE_EMISE: 'ORDONNANCE_EMISE'\r\n}\r\n\r\nexport async function setArborescence() {\r\n  const result = await getResultFromUrl(urls.arborescenceDouleurs)\r\n  dispatchData(dataTypes.ARBORESCENCE, result);\r\n}\r\n\r\nexport async function setPreconisations(idDouleur) {\r\n  const result = await getResultFromUrl(urls.ficheDouleur(idDouleur))\r\n  dispatchData(dataTypes.PRESCRIPTIONS, result);\r\n}\r\n\r\nexport function setPrescriptionChoisie(prescription) {\r\n  dispatchData(dataTypes.PRESCRIPTION_CHOISIE, prescription);\r\n}\r\n\r\nexport function setPrescriptionFormValues(formValues) {\r\n  dispatchData(dataTypes.PRESCRIPTION_FORM_VALUES, formValues);\r\n}\r\n\r\nexport function setPrescriptionSaisie(prescription) {\r\n  dispatchData(dataTypes.PRESCRIPTION_SAISIE, prescription);\r\n}\r\n\r\nexport async function setOrdonnanceEmise(ordonnance) {\r\n  let result = await postObjectToUrl(ordonnance, urls.nouvelleOrdonnance, { responseType: 'blob' })\r\n  if (result.data) {\r\n    let textResult\r\n    let isError = false\r\n    await result.data.text().then(text => textResult = text)\r\n    try {\r\n      const obj = JSON.parse(textResult)\r\n      if (obj && (obj.error || obj.errors)) {\r\n        isError = true\r\n        console.log(JSON.stringify(obj.error))\r\n        console.log(JSON.stringify(obj.errors))\r\n      }\r\n    } catch (error) {\r\n      console.log(\"error: \" + error)\r\n    }\r\n    if (isError === false) {\r\n      const file = new Blob([result.data], { type: 'application/pdf' })\r\n      const fileURL = URL.createObjectURL(file);\r\n      window.open(fileURL);\r\n      console.log('L\\'ordonnance a bien été enregistrée')\r\n    }\r\n  } else {\r\n    console.error('L\\'ordonnance n\\'a pas pu être correctement enregistrée')\r\n  }\r\n  dispatchData(dataTypes.ORDONNANCE_EMISE, ordonnance)\r\n}\r\n\r\nexport const getResultFromUrl = async (url, config) => {\r\n  try {\r\n    let responseBody\r\n    await axios.get(url, config).then(response => {\r\n      responseBody = response.data\r\n    })\r\n    return responseBody\r\n  } catch (error) {\r\n    console.log(JSON.stringify(error))\r\n    return { error: error.message };\r\n  }\r\n}\r\n\r\nexport const postObjectToUrl = async (object, url, config) => {\r\n  try {\r\n    let result = {}\r\n    await axios.post(url, object, config).then(response => {\r\n      result = response\r\n    })\r\n    return result\r\n  } catch (error) {\r\n    console.log(JSON.stringify(error))\r\n    return { error: error.message };\r\n  }\r\n}\r\n\r\n/**\r\n * Reducer pour le thème ordonnance\r\n * @param {*} ordonnance \r\n * @param {*} action \r\n */\r\nexport default function ordonnanceReducer(ordonnance = {}, action) {\r\n\r\n  if (dataTypes[action.type]) {\r\n    return { ...ordonnance, [dataTypes[action.type]]: action.content }\r\n  }\r\n  return ordonnance\r\n\r\n}\r\n\r\n","import React, { Fragment } from 'react'\r\nimport { Message, Divider, Header, Button } from 'semantic-ui-react'\r\n\r\n/**\r\n * Si une prescription a été choisie on n'affiche que celle ci avec un message approprié\r\n * Sinon on affiche la liste des prescriptions proposées avec possibilité d'en choisir une par clic\r\n */\r\nexport default function FicheDouleurComponent(props) {\r\n\r\n  const { prescriptions, prescriptionChoisie, clickOrdonnance } = props\r\n\r\n  let douleur = () => {\r\n    let nomenclatureDouleur = null\r\n    if (prescriptionChoisie) {\r\n      nomenclatureDouleur = prescriptionChoisie.nomenclatureDouleur\r\n    } else if (prescriptions && prescriptions.length > 0) {\r\n      nomenclatureDouleur = prescriptions[0].nomenclatureDouleur\r\n    }\r\n    if (nomenclatureDouleur) {\r\n      return {\r\n        libelle: nomenclatureDouleur.libelle,\r\n        infos: nomenclatureDouleur.infosGenerales,\r\n        recommandations: nomenclatureDouleur.recommandations,\r\n      }\r\n    }\r\n    return {}\r\n  }\r\n  douleur = douleur()\r\n\r\n  let nbPreco = prescriptions && prescriptions.length > 0 ? prescriptions.length : 0\r\n\r\n  let messageInfo = () => {\r\n    if (prescriptionChoisie) {\r\n      return (\r\n        <Message info>Vous avez choisi l'ordonnance suivante</Message>\r\n      )\r\n    }\r\n    return (\r\n      nbPreco === 0 ?\r\n        <Message warning>Aucune ordonnance n'est encore proposée pour cette douleur</Message> :\r\n        <Message info>\r\n          {` ${nbPreco} ordonnance${nbPreco > 1 ? 's vous sont proposées' : ' vous est proposée'} `}\r\n          <br />Cliquez sur le bouton correspondant à l'ordonnance de votre choix\r\n        </Message>\r\n    )\r\n  }\r\n  messageInfo = messageInfo()\r\n\r\n\r\n  let messageRecommandation = (\r\n    !prescriptionChoisie && douleur.recommandations && douleur.recommandations.length > 0 ?\r\n      <Message warning className='infosBase'>\r\n        <Divider horizontal fitted><Header as='h4'>Remarques</Header></Divider>\r\n        {douleur.recommandations}\r\n      </Message> : ''\r\n  )\r\n\r\n  const renderListePrescriptions = () => {\r\n\r\n    if (prescriptionChoisie) {\r\n      return (\r\n        <Fragment>\r\n          {renderPrescription(prescriptionChoisie)}\r\n          <Divider />\r\n        </Fragment>\r\n      )\r\n    }\r\n    else if (nbPreco > 0) {\r\n      return prescriptions.map(\r\n        (prescription, index) => (\r\n          <Fragment>\r\n             <Button size='tiny' primary onClick={() => clickOrdonnance(index)}>\r\n                Ordonnance {index + 1}\r\n             </Button>\r\n           \r\n            {renderPrescription(prescription)}\r\n            <Divider />\r\n          </Fragment>\r\n        )\r\n      )\r\n    }\r\n  }\r\n\r\n  const renderPrescription = (prescription) => {\r\n    const formatTexte = description => {\r\n      let lignes = description.split(' ; ')\r\n      return lignes.map(\r\n        ligne => (ligne + '\\r\\n')\r\n      )\r\n    }\r\n    if (prescription.medicamentsPreconises.length > 0) {\r\n      return (\r\n        <div className='infosBase'> {\r\n          prescription.medicamentsPreconises.map(\r\n            preconisation => <p>{formatTexte(preconisation.description)}</p>\r\n          )\r\n        }</div>)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>{douleur.libelle}</h3>\r\n      {messageInfo}         \r\n      {renderListePrescriptions()}\r\n      {messageRecommandation}   \r\n    </div>\r\n  )\r\n}\r\n\r\n","import { connect } from 'react-redux'\r\nimport React, { Component } from 'react'\r\n\r\nimport { setPreconisations, setPrescriptionChoisie, dataTypes } from \"../redux/OrdonnanceActions\";\r\nimport FicheDouleurComponent from \"./FicheDouleurComponent\";\r\nimport { goToRoute, routes } from '../config/URLs-conf';\r\nimport LoadComponent from '../components/LoadComponent';\r\n\r\nconst mapStateToProps = appState => ({\r\n    prescriptions: appState.ordonnance[dataTypes.PRESCRIPTIONS],\r\n})\r\n\r\nclass FicheDouleur extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.clickPrescription.bind(this)\r\n    }    \r\n\r\n    componentDidMount() {\r\n        let { idDouleur } = this.getRouteParams()\r\n        setPreconisations(idDouleur)\r\n    }\r\n\r\n    getRouteParams() {\r\n        if (this.props.match) {\r\n            return this.props.match.params\r\n        }\r\n        return {}\r\n    }\r\n\r\n    clickPrescription = (index) => {\r\n        setPrescriptionChoisie(this.props.prescriptions[index])\r\n        goToRoute(this.props)(routes.FORMULAIRE_PRESCRIPTION)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <LoadComponent loadedObj={this.props.prescriptions}>\r\n                <FicheDouleurComponent clickOrdonnance={this.clickPrescription} prescriptions={this.props.prescriptions} />               \r\n            </LoadComponent>\r\n        )\r\n    }\r\n}\r\n/**\r\n * La méthode connect() relie le store au composant cible.\r\n * Elle prend en paramètre la fonction \"mapStateToProps\", laquelle prend elle-même en paramètre le state du store.\r\n */\r\nexport default connect(mapStateToProps)(FicheDouleur)\r\n","import React from \"react\";\r\nimport { Form } from \"semantic-ui-react\";\r\n\r\nexport const renderCheckbox = field => (\r\n  <Form.Checkbox\r\n    checked={!!field.input.value}\r\n    name={field.input.name}\r\n    label={field.label}\r\n    onChange={(e, { checked }) => field.input.onChange(checked)}\r\n  />\r\n);\r\n\r\nexport const renderRadio = field => (\r\n  <Form.Radio\r\n    checked={field.input.value === field.radioValue}\r\n    label={field.label}\r\n    name={field.input.name}\r\n    onChange={(e, { checked }) => field.input.onChange(field.radioValue)}\r\n  />\r\n);\r\n\r\nexport const renderSelect = field => (\r\n  <Form.Select\r\n    label={field.label}\r\n    name={field.input.name}\r\n    onChange={(e, { value }) => field.input.onChange(value)}\r\n    options={field.options}\r\n    placeholder={field.placeholder}\r\n    value={field.input.value}\r\n  />\r\n);\r\n\r\nexport const renderTextArea = field => (\r\n  <Form.TextArea\r\n    {...field.input}\r\n    label={field.label}\r\n    placeholder={field.placeholder}\r\n  />\r\n);","export default function Prescription(ordonnancePreconisee) {\r\n\r\n  // L'ordonnance préconisée est reçue du backend et est un objet de la forme suivante :\r\n  // \t.medicamentsPreconises[]\r\n  // \t\t.description\r\n  // \t\t.dureeMin\r\n  // \t\t.dureeMax\r\n  // \t\t.idDouleur\r\n  // \t\t.numOrdonnance\r\n  // \t\t.numMedicament\r\n  // \t\t.compatibilites[]\r\n  // \t\t\t.produit\r\n  // \t\t\t\t.code\r\n  // \t\t\t\t.designation\r\n  // \t\t\t\t.id\r\n  // \t\t\t\t.indesirable\r\n  // \t\t\t\t.indication\r\n  // \t\t\t.dosages\r\n  // \t\t\t.formes\r\n\r\n  this.medicamentsPreconises = ordonnancePreconisee ? ordonnancePreconisee.medicamentsPreconises : []\r\n\r\n  this.nbMedicaments = this.medicamentsPreconises.length\r\n\r\n  this.getProduits = function(numMedicament) {\r\n    if (this.medicamentsPreconises[numMedicament] && this.medicamentsPreconises[numMedicament].compatibilites) {\r\n      return this.medicamentsPreconises[numMedicament].compatibilites.map(compatibilite => compatibilite.produit)\r\n    }\r\n    return null\r\n  }\r\n\r\n  this.getDesignationsProduits = function(numMedicament) {\r\n    const produits = this.getProduits(numMedicament)\r\n    if (produits) {\r\n      return produits.map(produit => produit.designation)\r\n    }\r\n    return null\r\n  }\r\n\r\n\r\n}","import React from \"react\";\r\nimport { Field } from \"redux-form\";\r\nimport { Form, Message, Header, Divider, Label } from \"semantic-ui-react\";\r\nimport * as formAdapter from \"../redux/reduxFormAdapter\"\r\nimport Prescription from \"./PrescriptionObj\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nclass PrescriptionForm extends React.Component {\r\n\r\n  // On reçoit la prescription préconisée en props. Cet objet est utilisé pour construire la Prescription\r\n  constructor(props) {\r\n\r\n    super(props)\r\n    this.prescriptionChoisie = new Prescription(props.prescription)\r\n    this.recapPrescription = props.recapPrescription\r\n    this.medicaments = this.prescriptionChoisie.medicamentsPreconises\r\n    this.libellesMedicaments = this.medicaments.map(\r\n      (medicament, numMedicament) => this.prescriptionChoisie.getDesignationsProduits(numMedicament).join(' + ')\r\n    )\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Form size='small' onSubmit={() => this.props.onSubmit(this.prescriptionSaisie())}>\r\n\r\n        <Message info>Veuillez renseigner la posologie dans le formulaire ci-dessous</Message>\r\n\r\n        {\r\n          this.prescriptionChoisie && this.prescriptionChoisie.medicamentsPreconises.map(\r\n            (medicament, numMedicament) => this.formulaireMedicament(numMedicament)\r\n          )\r\n        }\r\n\r\n        <Field\r\n          component={formAdapter.renderTextArea}\r\n          label=\"Recommandations\"\r\n          name=\"recommandations\"\r\n          placeholder=\"Conseils, effets indésirables à surveiller, cas d'arrêt du traitement...\"\r\n        />\r\n\r\n        <Message>\r\n          <Divider horizontal fitted><Header as='h5'>Récapitulatif</Header></Divider>\r\n          {this.recapPrescription(this.prescriptionSaisie())}\r\n        </Message>\r\n\r\n        <Form.Group inline>\r\n          <Form.Button type='submit' primary>Valider</Form.Button>\r\n          <Form.Button onClick={this.props.reset}>Annuler</Form.Button>\r\n        </Form.Group>\r\n\r\n      </Form>\r\n    )\r\n  }\r\n\r\n  formulaireMedicament(numMedicament) {\r\n\r\n    return (\r\n\r\n      <React.Fragment>\r\n\r\n        <div style={{ padding: '1rem 0' }}><Label>{this.libellesMedicaments[numMedicament]}</Label></div>\r\n\r\n        <input\r\n          name={'medicament' + numMedicament}\r\n          type='hidden'\r\n          index={numMedicament}\r\n          value={this.libellesMedicaments[numMedicament]}\r\n        />\r\n\r\n        <Grid container spacing={1}>\r\n\r\n          {this.prescriptionChoisie.getProduits(numMedicament).map((produit, numProduit) =>\r\n            <Grid item xs={2}>\r\n              <Field component={Form.Input} label={numProduit === 0 ? 'dosage' : ''} name={'dosage' + numMedicament + numProduit} placeholder={produit.designation} required />\r\n            </Grid>\r\n          )}\r\n\r\n          <Grid item xs={4}>\r\n            <Field component={Form.Input} label=\"Quantité / prise\" name={'quantite' + numMedicament} placeholder=\"Nb comprimés\" required />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <Field component={formAdapter.renderSelect} label=\"Forme\" name={'forme' + numMedicament} placeholder=\"Comprimé ...\"\r\n              options={[\r\n                { key: \"forme1\", text: \"Comprimé\", value: \"comprimé(s)\" },\r\n                { key: \"forme2\", text: \"Gélule\", value: \"gélule(s)\" }\r\n              ]}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Field component={Form.Input} label=\"Fréquence\" name={'frequence' + numMedicament} placeholder=\"Nb fois par jour\" required />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Field component={Form.Input} label=\"Durée\" name={'duree' + numMedicament} placeholder=\"Nb de jours\" required />\r\n          </Grid>\r\n\r\n        </Grid>\r\n\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  prescriptionSaisie() {\r\n\r\n    const dosagesProduits = (numMedicament) => {\r\n      const produits = this.prescriptionChoisie.getProduits(numMedicament)\r\n      if (Array.isArray(produits)) {\r\n        const dosagesProduits = produits.map(\r\n          (produit, numProduit) => {\r\n            const dosage = this.props['dosage' + numMedicament + numProduit]\r\n            return { designation: produit.designation, dosage }\r\n          }\r\n        )\r\n        return dosagesProduits\r\n      }\r\n      return null\r\n    }\r\n\r\n    const autresChamps = ['quantite', 'forme', 'frequence', 'duree']\r\n\r\n    let prescpription = {\r\n      nbMedicaments: this.medicaments.length,\r\n      medicaments: [],\r\n      recommandations: this.props.recommandations\r\n    }\r\n\r\n    for (let numMedicament = 0; numMedicament < prescpription.nbMedicaments; numMedicament++) {\r\n      prescpription.medicaments[numMedicament] = {\r\n        libelle: this.libellesMedicaments[numMedicament], // concat(produits, ' + ' )\r\n        produits: dosagesProduits(numMedicament),  // Array of {produit, dosage}\r\n      }\r\n      autresChamps.forEach(champ => {\r\n        prescpription.medicaments[numMedicament][champ] = this.props[champ + numMedicament]\r\n      })\r\n    }\r\n\r\n    return prescpription\r\n  }\r\n\r\n}\r\n\r\nexport default PrescriptionForm;\r\n","import { connect } from 'react-redux'\r\nimport { reduxForm } from \"redux-form\";\r\nimport React, { Component, Fragment } from 'react'\r\n\r\nimport PrescriptionForm from \"./PrescriptionForm\";\r\nimport FicheDouleurComponent from './FicheDouleurComponent';\r\nimport { dataTypes, setPrescriptionSaisie, setPrescriptionFormValues } from '../redux/OrdonnanceActions';\r\nimport { goToRoute, routes } from '../config/URLs-conf';\r\n\r\n/**\r\n * La fonction mapStateToProps renvoie un objet provenant du state. \r\n * L'objet renvoyé est passé en props du composant connecté\r\n */\r\nconst mapStateToProps = state => ({\r\n    prescriptionChoisie: state.ordonnance[dataTypes.PRESCRIPTION_CHOISIE],\r\n    formValues: state.form.prescription ? state.form.prescription.values : {},\r\n    initialValues : state.ordonnance[dataTypes.PRESCRIPTION_FORM_VALUES],\r\n})\r\n\r\nclass PrescriptionService extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.submitPrescription.bind(this)\r\n    }\r\n\r\n    submitPrescription = prescriptionSaisie => {  \r\n        // sauvegarde les valeurs saisies pour les réinjecter en initialValues\r\n        // lorsqu'on revient sur le formulaire\r\n        setPrescriptionFormValues(this.props.formValues)  \r\n        setPrescriptionSaisie(prescriptionSaisie)\r\n        goToRoute(this.props)(routes.FORMULAIRE_ORDONNANCE)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <FicheDouleurComponent prescriptionChoisie={this.props.prescriptionChoisie} />\r\n                {\r\n                    this.props.prescriptionChoisie &&\r\n                    <PrescriptionForm\r\n                        onSubmit={this.submitPrescription}\r\n                        prescription={this.props.prescriptionChoisie}\r\n                        {...this.props.formValues}\r\n                        recapPrescription={recapitulerPrescription}\r\n                    />\r\n                }\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport const recapitulerPrescription = (prescription) => {\r\n    const recapDosage = medicament => (\r\n        Array.isArray(medicament.produits) ? (\r\n            medicament.produits\r\n                .filter(produit => produit.dosage)\r\n                .map(produit => produit.designation + ' ' + produit.dosage)\r\n                .join(' + ')\r\n        ) : null\r\n    )\r\n    if (prescription && Array.isArray(prescription.medicaments)) {\r\n        return (\r\n            prescription.medicaments.map(\r\n                (medicament, numMedicament) => (\r\n                    <div> {\r\n                        recapDosage(medicament)\r\n                        + (medicament.quantite && medicament.forme ? ', ' + medicament.quantite + ' ' + medicament.forme : '')\r\n                        + (medicament.frequence ? ', ' + medicament.frequence + ' fois par jour' : '')\r\n                        + (medicament.duree ? ' pendant ' + medicament.duree + ' jours' : '')\r\n                    } </div>\r\n                )\r\n            )\r\n        )\r\n    }\r\n    return null\r\n}\r\n\r\nPrescriptionService = reduxForm({\r\n    form: \"prescription\", \r\n})(PrescriptionService);\r\n\r\n/**\r\n * La méthode connect() relie le store au composant cible.\r\n * Elle prend en paramètre la fonction \"mapStateToProps\", laquelle prend elle-même en paramètre le state du store.\r\n */\r\nexport default connect(mapStateToProps)(PrescriptionService)\r\n","import React from \"react\";\r\nimport { Field } from \"redux-form\";\r\nimport { Form, Message } from \"semantic-ui-react\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nimport * as formAdapter from \"../redux/reduxFormAdapter\";\r\n\r\nexport default class OrdonnanceForm extends React.Component {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Form size='small' onSubmit={this.props.onSubmit}>\r\n\r\n        <Message info>Veuillez renseigner les informations du patient dans le formulaire ci-dessous</Message>\r\n\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={3}>\r\n            <Field component={Form.Input} label=\"Nom de famille\" name='nomPatient' placeholder=\"Nom obligatoire\" required />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Field component={Form.Input} label=\"Nom usuel\" name='nomUsuPatient' placeholder=\"Facultatif\" />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Field component={Form.Input} label=\"Prénom\" name='prenomPatient' placeholder=\"Prénom\" required />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Field component={Form.Input} label=\"Date naissance\" name='dateNaissance' placeholder=\"jj/mm/aaaa\" required />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <Field component={Form.Input} label=\"N° immatriculation\" name='insee' placeholder=\"n° sur 13 car\" required />\r\n          </Grid>\r\n          <Grid item xs={6}>       \r\n            <div className='field'><label>Sexe</label></div>\r\n            <Form.Group inline>\r\n              <Field\r\n                component={formAdapter.renderRadio}\r\n                label=\"Masculin\"\r\n                className='field'\r\n                name=\"sexe\"\r\n                radioValue='M'\r\n              />\r\n              <Field\r\n                component={formAdapter.renderRadio}\r\n                label=\"Féminin\"\r\n                className='field'\r\n                name=\"sexe\"\r\n                radioValue='F'\r\n              />\r\n            </Form.Group>\r\n\r\n          </Grid>\r\n\r\n        </Grid>\r\n        <p></p>\r\n        <Form.Group inline>\r\n          <Form.Button type='submit' primary>Editer l'ordonnance</Form.Button>\r\n          <Form.Button onClick={this.props.reset}>Annuler</Form.Button>\r\n        </Form.Group>\r\n\r\n      </Form>\r\n    )\r\n  }\r\n\r\n}","import React, { Component, Fragment } from 'react'\r\nimport { connect } from \"react-redux\"\r\nimport { reduxForm } from \"redux-form\";\r\nimport { Message, Divider, Header, Label } from 'semantic-ui-react'\r\n\r\nimport { dataTypes, setOrdonnanceEmise } from '../redux/OrdonnanceActions'\r\nimport { recapitulerPrescription } from './PrescriptionService'\r\nimport OrdonnanceForm from './OrdonnanceForm';\r\n\r\nconst mapStateToProps = state => ({\r\n    prescriptionSaisie: state.ordonnance[dataTypes.PRESCRIPTION_SAISIE],\r\n    infosPatient: state.form.infosPatient ? state.form.infosPatient.values : null,\r\n    libelleDouleur: state.ordonnance[dataTypes.PRESCRIPTION_CHOISIE] ? \r\n        state.ordonnance[dataTypes.PRESCRIPTION_CHOISIE].nomenclatureDouleur.libelle : ''\r\n})\r\n\r\nclass OrdonnanceService extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.submitOrdonnance.bind(this)\r\n    }\r\n\r\n    submitOrdonnance = infosPatient => {\r\n        let ordonnance = {\r\n            infosPatient,\r\n            prescription : this.props.prescriptionSaisie\r\n        }\r\n        setOrdonnanceEmise(ordonnance)\r\n        console.log(JSON.stringify(ordonnance))\r\n    }\r\n\r\n    render() {\r\n        const prescription = this.props.prescriptionSaisie\r\n        return (\r\n            prescription ?\r\n                <Fragment>\r\n                    <h3>{this.props.libelleDouleur}</h3>\r\n                    <OrdonnanceForm onSubmit={() => this.submitOrdonnance(this.props.infosPatient)} {...this.props} />\r\n                    <p></p>\r\n\r\n                    <Message>\r\n\r\n                        <Divider horizontal fitted><Header as='h5'>Votre ordonnance</Header></Divider>\r\n                        \r\n                        {this.props.infosPatient && (\r\n                            <Fragment>\r\n                                <Label>Patient</Label>\r\n                                <div style={{ margin: '20px 10px' }}>\r\n                                    {recapitulerInfosPatient(this.props.infosPatient)}\r\n                                </div>\r\n                            </Fragment>\r\n                        )}\r\n\r\n                        <Label>Prescription</Label>\r\n                        <div style={{ margin: '20px 10px' }}>\r\n                            {recapitulerPrescription(prescription)}\r\n                            {\r\n                                prescription.recommandations &&\r\n                                <p> <b> Recommandations </b>\r\n                                    <div className='infosBase'>{prescription.recommandations}</div>\r\n                                </p>\r\n                            }\r\n                        </div>\r\n\r\n                    </Message>\r\n                </Fragment>\r\n                :\r\n                <Message error> Erreur : Aucune prescription saisie !!! </Message>\r\n        )\r\n    }\r\n}\r\n\r\nexport const recapitulerInfosPatient = (infosPatient) => {\r\n    if (infosPatient) {\r\n        return (\r\n            <div> {\r\n                Object.keys(infosPatient).map(\r\n                    key => {\r\n                        switch (key) {\r\n                            case 'nomPatient': return infosPatient[key]\r\n                            case 'dateNaissance': return ' - né(e) le ' + infosPatient[key]\r\n                            case 'insee': return <p>n° immatriculation {infosPatient[key]}</p>\r\n                            case 'sexe': return ''\r\n                            default: return ' - ' + infosPatient[key]\r\n                        }\r\n                    }\r\n                )\r\n            } </div>\r\n        )\r\n\r\n    }\r\n    return null\r\n}\r\n\r\nOrdonnanceService = reduxForm({\r\n    form: \"infosPatient\",\r\n})(OrdonnanceService);\r\n\r\nexport default connect(mapStateToProps)(OrdonnanceService)\r\n","import { generatePath } from \"react-router\";\r\n\r\nimport ArborescenceService from \"../ordonnance/ArborescenceService\"\r\nimport FicheDouleurService from \"../ordonnance/FicheDouleurService\"\r\nimport PrescriptionService from \"../ordonnance/PrescriptionService\"\r\nimport OrdonnanceService from \"../ordonnance/OrdonnanceService\";\r\n\r\nexport const apiURLs = {\r\n    arborescenceDouleurs: '/douleurs/arborescence',\r\n    ficheDouleur: idDouleur => '/douleurs/' + idDouleur,\r\n    nouvelleOrdonnance: '/ordonnances/nouvelle',\r\n}\r\n\r\nconst basePath = '/clientApp'\r\n\r\nexport const routes = {\r\n    ARBORESCENCE: 'arborescence',\r\n    FICHE_DOULEUR: 'ficheDouleur',\r\n    FORMULAIRE_PRESCRIPTION: 'formulairePrescription',\r\n    FORMULAIRE_ORDONNANCE: 'formulaireOrdonnance',\r\n    HISTORIQUE: 'historique',\r\n    LIENS: 'liens',\r\n}\r\n\r\nexport const routesConfig = [\r\n    { key: routes.ARBORESCENCE, path: `${basePath}/douleurs`, component: ArborescenceService },\r\n    { key: routes.FICHE_DOULEUR, path: `${basePath}/douleurs/:idDouleur`, component: FicheDouleurService },\r\n    { key: routes.FORMULAIRE_PRESCRIPTION, path: `${basePath}/prescriptionForm`, component: PrescriptionService },\r\n    { key: routes.FORMULAIRE_ORDONNANCE, path: `${basePath}/ordonnanceForm`, component: OrdonnanceService },\r\n]\r\n\r\nexport const getRoutePath = (route, pathParams) => (\r\n    generatePath(routesConfig.filter(element => element.key === route)\r\n        .map(config => config.path).join(), pathParams)\r\n)\r\n\r\nexport const goToRoute = props => {\r\n    let { history } = props \r\n    if (!history) {\r\n        history = props\r\n    }\r\n    return (route, pathParams) => history.push(getRoutePath(route, pathParams))\r\n}","import { combineReducers } from \"redux\";\r\nimport ordonnanceReducer from \"./OrdonnanceActions\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\n\r\n/**\r\n * C'est ici qu'il faut référencer les différents reducers de l'appli Redux.\r\n * Ce sont des fonctions qui doivent être définies dans les composants *Actions.js \r\n * et qui ont pour responsabilité de calculer le nouvel état du store en fonction \r\n * des actions effectuées.\r\n */\r\nexport default combineReducers({\r\n   ordonnance: ordonnanceReducer,\r\n   form: formReducer,\r\n})","import { createStore } from \"redux\";\r\nimport reducers from \"./reducers\";\r\n\r\n// les reducers sont chargés de la mise à jour du store lorsque celui ci reçoit une action\r\nexport const store = createStore(reducers)\r\n\r\nexport default function dispatchData(type, content) {\r\n    store.dispatch({ type, content })\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport { slide as Menu } from 'react-burger-menu'\r\n\r\nimport { getRoutePath, routes } from \"../config/URLs-conf\";\r\nimport './MenuBar.css'\r\n\r\n\r\nexport default function MenuBar() {\r\n    return (\r\n        <Menu>\r\n            <a className=\"menu-item accueil\" href=\"/\">Accueil</a>\r\n            <a className=\"menu-item ordonnance\" href={getRoutePath(routes.ARBORESCENCE)}>Ordonnance</a>\r\n            <a className=\"menu-item histo\" href={getRoutePath(routes.HISTORIQUE)}>Historique</a>\r\n            <a className=\"menu-item lien\" href={getRoutePath(routes.LIENS)}>Liens</a>\r\n        </Menu>\r\n    )\r\n}","import React from 'react'\r\nimport { Message } from 'semantic-ui-react'\r\n\r\n\r\nconst Accueil = function (props) {\r\n\r\n    return (\r\n        <Message>\r\n            {props.message}<br />\r\n        </Message>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Accueil\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nimport MainApp from './App'\r\n\r\nReactDOM.render( <MainApp />, document.getElementById('react-app'))\r\n","import React from 'react'\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { Header, Segment } from 'semantic-ui-react';\r\n\r\nimport { store } from \"./redux/store\";\r\nimport { routesConfig } from \"./config/URLs-conf\";\r\nimport \"./App.css\";\r\n// import \"./assets/bootstrap-slate.css\";\r\nimport Menu from \"./components/MenuBar\";\r\nimport Accueil from \"./components/Accueil\";\r\n\r\nexport default function App() {\r\n\r\n  const msgBienvenue = (\r\n    <div>\r\n        <p>Bienvenue dans Pain Control Pro</p>\r\n        <p>L'application qu'il vous faut pour gérer la douleur de vos patients</p>\r\n        <p>Cliquez sur le menu en haut à gauche et sélectionnez votre choix</p>\r\n    </div>\r\n  )\r\n\r\n  return (\r\n    // le Provider permet la connexion des composants enfants au store\r\n    <Provider store={store}>\r\n\r\n      {/** le Router transmets la prop history à tous les composants enfants */}\r\n      <Router>\r\n\r\n        <Menu />\r\n\r\n        <Header as=\"h2\" color=\"grey\" textAlign=\"center\" inverted dividing style={{\r\n          margin: 0, paddingTop: '1.5rem', paddingBottom: '1.5rem', position: 'fixed', top: 0, left: 0, \r\n          zIndex: 900, background: 'rgb(0, 0, 0)', minWidth: '100%'\r\n        }}>\r\n          <span> Pain Control Pro </span>\r\n        </Header>\r\n\r\n        <Segment className='center' style={{ top: '6rem', height: '900px', overflow: 'auto' }}>\r\n\r\n          <Route exact path='/' render={props => <Accueil {...props} message={msgBienvenue} />} />\r\n          \r\n          {routesConfig.map(\r\n            config => (<Route exact {...config} />)            \r\n          )}\r\n\r\n          {/* \r\n           <Test className='infosBase'>\r\n          </Test>  */}\r\n\r\n        </Segment>\r\n\r\n      </Router>\r\n\r\n\r\n    </Provider>\r\n  )\r\n\r\n}"],"sourceRoot":""}